   1               	# 1 "main.S"
   1               	
   0               	
   0               	
   2               	/*
   3               	 *  DISCLAIMER
   4               	 *
   5               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   6               	 *
   7               	 *  Permission is hereby granted, free of charge, to any person obtaining
   8               	 *  a copy of this software and associated documentation files (the
   9               	 *  "Software"), to deal in the Software without restriction, including
  10               	 *  without limitation the rights to use, copy, modify, merge, publish,
  11               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  12               	 *  permit persons to whom the Software is furnished to do so, subject to
  13               	 *  the following conditions:
  14               	 *
  15               	 *  The above copyright notice and this permission notice shall be
  16               	 *  included in all copies or substantial portions of the Software.
  17               	 *
  18               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  19               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  20               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  21               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  22               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  23               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  24               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  25               	 *
  26               	 */
  27               	
  28               	;---------------------------------------------------------------------
  29               	; atmega8 avr
  30               	;
  31               	; UPDATE: 10/2022 to include stuff for atmega328 
  32               	;---------------------------------------------------------------------- 
  33               	;
  34               	; version information
  35               	;
  36               	.equ version, 12 ; 0.00.10
  37               	
  38               	#include "macros.S"
   1               	
   2               	/*
   3               	 *  DISCLAIMER
   4               	 *
   5               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   6               	 *
   7               	 *  Permission is hereby granted, free of charge, to any person obtaining
   8               	 *  a copy of this software and associated documentation files (the
   9               	 *  "Software"), to deal in the Software without restriction, including
  10               	 *  without limitation the rights to use, copy, modify, merge, publish,
  11               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  12               	 *  permit persons to whom the Software is furnished to do so, subject to
  13               	 *  the following conditions:
  14               	 *
  15               	 *  The above copyright notice and this permission notice shall be
  16               	 *  included in all copies or substantial portions of the Software.
  17               	 *
  18               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  19               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  20               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  21               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  22               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  23               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  24               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  25               	 *
  26               	 */
  27               	
  28               	;----------------------------------------------------------------------
  29               	;
  30               	;   MUST use gnu cpp 
  31               	;   use with .S (upper S) or
  32               	;   use with -x assembler-with-cpp
  33               	;
  34               	;     can't use alias 
  35               	;----------------------------------------------------------------------
  36               	;
  37               	; all defines, equs, macros are defined in this file
  38               	;
  39               	
  40               	#define atmega328
  41               	
  42               	;----------------------------------------------------------------------
  43               	;
  44               	;    about registers 
  45               	;
  46               	; r1:r0 reserved and used in internal atmega8
  47               	;   instructions, as spm, mul, des, etc
  48               	;   do not use inside interrupts
  49               	
  50               	#define _reserved_r0_ r0
  51               	#define _reserved_r1_ r1
  52               	
  53               	;----------------------------------------------------------------------
  54               	;
  55               	;  reserved for use inside timer0 interrupt
  56               	;
  57               	; sreg keep in interrupts
  58               	#define _sreg_ r2
  59               	
  60               	; offset for adjust timer0 interrupt counter
  61               	#define _offs_ r3
  62               	
  63               	; ticks counter for timer0 at 1 ms, (count 65 sec)
  64               	#define ticks_low r4
  65               	#define ticks_high r5
  66               	
  67               	;-----------------------------------------------------------------------
  68               	;
  69               	; forth model (like pdp-11)
  70               	;
  71               	; must be 16bits (16 to 31) registers
  72               	;
  73               	; Z generic pointer for access sram and flash memory, lpm, spm, index, etc
  74               	#define zpm_low r30
  75               	#define zpm_high r31
  76               	
  77               	; Y parameter stack pointer for access sram
  78               	#define psp_low r28
  79               	#define psp_high r29
  80               	
  81               	; X return stack pointer for access sram
  82               	#define rsp_low r26
  83               	#define rsp_high r27
  84               	
  85               	; top, Top parameter stack
  86               	#define tos_low r24
  87               	#define tos_high r25
  88               	
  89               	; nos, Next temporary
  90               	#define nos_low r22
  91               	#define nos_high r23
  92               	
  93               	; wrk, Work temporary 
  94               	#define wrk_low r20
  95               	#define wrk_high r21
  96               	
  97               	; extras
  98               	#define _zero_ r6
  99               	#define _work_ r7
 100               	
 101               	; registers r8 to r19 free
 102               	
 103               	;----------------------------------------------------------------------
 104               	;
 105               	;  trick adapted from amforth-6.9
 106               	;
 107               	.macro STRINGS string
 108               	;    .word DOSCON
 109               	    .byte 8f - 7f
 110               	7:  .ascii "\\string"
 111               	8:  .balign 2
 112               	.endm
 113               	
 114               	;----------------------------------------------------------------------
 115               	;
 116               	; header of leaf word in dictionary
 117               	;    flags must be 0x80, 0x40, 0x20, 0x10
 118               	;    size  must be 1 to 15
 119               	;
 120               	;----------------------------------------------------------------------
 121               	;
 122               	; set start reverse linked list
 123               	;
 124               	.set _link_, 0x0
 125               	.set _list_, 0x0
 126               	.set _last_, 0x0
 127               	
 128               	.macro HEADER name, label, flags=0x0
 129               	is_\label:
 130               	10:
 131               	    .p2align 1, 0x00
 132               	7:    
 133               	    .word _link_
 134               	    .set _link_, 7b
 135               	    .byte (9f - 8f) + \flags
 136               	8:    
 137               	    .ascii "\name"
 138               	9:    
 139               	    .p2align 1, 0x20
 140               	\label:
 141               	11:
 142               	    .set _last_, _list_
 143               	    .set _list_, _last_ + (11b - 10b + 1)
 144               	.endm
 145               	
 146               	;----------------------------------------------------------------------
 147               	; little endian !!! AVR
 148               	;
 149               	;    A    Z (r31:r30) is used as generic address pointer, deed by avr ISA
 150               	;
 151               	;    RSP  Y (r29:r28) used as return stack pointer    
 152               	;    PSP  X (r27:r26) used as data/parameter stack pointer
 153               	;    TOS  T (r25:r24) used as top in stack
 154               	;    NOS  N (r22:r23) used as second in stack
 155               	;    WRK  W (r20:r21) used as work            
 156               	;
 157               	;   all stacks grows downwards.
 158               	;
 159               	;----------------------------------------------------------------------
 160               	;    push into return stack, 
 161               	.macro rspush low, high 
 162               	    st -X, \low
 163               	    st -X, \high
 164               	.endm
 165               	
 166               	;----------------------------------------------------------------------
 167               	;    pull from return stack, 
 168               	.macro rspull low, high
 169               	    ld \high, X+
 170               	    ld \low, X+
 171               	.endm
 172               	
 173               	;----------------------------------------------------------------------
 174               	;    push into data stack, 
 175               	.macro pspush low, high
 176               	    st -Y, \low
 177               	    st -Y, \high
 178               	.endm
 179               	
 180               	;----------------------------------------------------------------------
 181               	;    pull from data stack, 
 182               	.macro pspull low, high
 183               	    ld \high, Y+
 184               	    ld \low, Y+
 185               	.endm
 186               	
 187               	;----------------------------------------------------------------------
 188               	;    load a word from program memory (flash)
 189               	;    ( only works with TWO lpm !!! )
 190               	;    Z address in bytes!
 191               	.macro pmload low, high
 192               	    lsl zpm_low
 193               	    rol zpm_high
 194               	    lpm \low, Z+
 195               	    lpm \high, Z+
 196               	    ror zpm_high
 197               	    ror zpm_low
 198               	.endm
 199               	
 200               	;----------------------------------------------------------------------
 201               	;    load from static memory (sram), increments pointer
 202               	;
 203               	.macro srload byte
 204               	    ld \byte, Z+
 205               	.endm
 206               	
 207               	;----------------------------------------------------------------------
 208               	;    save to static memory (sram), increments pointer
 209               	;
 210               	.macro srsave byte
 211               	    st Z+, \byte 
 212               	.endm
 213               	
 214               	;----------------------------------------------------------------------
 215               	;
 216               	; for Atmega8:
 217               	;
 218               	
 219               	;----------------------------------------------------------------------
 220               	; all primitives must start with NOOP and end with POON
 221               	;    a  nop (0x0000) is used as a null reference, and marks all primitives
 222               	;    as they are really a branch and link mark
 223               	;
 224               	
 225               	.macro NOOP
 226               	    nop
 227               	.endm
 228               	
 229               	.macro POON
 230               	    rjmp _link
 231               	.endm
 232               	
 233               	;**********************************************************************
 234               	;  constant values
 235               	;
 236               	;    %s/#define *\([^ ]*\) */ \1 = /
 237               	;    %s/ *\([^ ]*\) *= */#define \1 /
 238               	
 239               	;----------------------------------------------------------------------
 240               	;    sizes
 241               	;
 242               	; "Column 72 means Continue", 72 always \0
 243               	; Readability is good standart is 80
 244               	;
 245               	TIB_SIZE = 72
 246               	
 247               	; stacks 18 words deep. WISE as M00re said.
 248               	;
 249               	STACK_SIZE = 36
 250               	
 251               	; default cell size
 252               	;
 253               	CELL_SIZE = 2
 254               	
 255               	; maximum word size
 256               	;
 257               	WORD_SIZE = 15
 258               	
 259               	; default base
 260               	;
 261               	BASE_DEFAULT = 16
 262               	
 263               	;----------------------------------------------------------------------
 264               	;   words can be 1 to 15 chars lenght, 
 265               	;
 266               	;   almost over for normal english ~10 letters words 
 267               	;   http://norvig.com/mayzner.html
 268               	;
 269               	;   flags 
 270               	;
 271               	;   tradicional:
 272               	;
 273               	;       IMMEDIATE, COMPILE, SMUDGE, LEAP
 274               	;
 275               	;   IMMEDIATE is mandatory execute words.
 276               	;
 277               	;   COMPILE is for compile only words.
 278               	;
 279               	;   HIDDEN or SMUDGE is not used
 280               	;
 281               	;   LEAP is to mark as pure assembler routines, no calls inside.
 282               	;
 283               	;   RESERVED as 0x80, marks the byte as size+flag byte and allow
 284               	;   backtrace to name from execute address, names are ASCII < 0x80
 285               	;
 286               	;   if need 32 chars ANSI names, forget HIDDEN
 287               	;
 288               	F_RESERVED = 0x80
 289               	F_IMMEDIATE = 0x40
 290               	F_COMPILE = 0x20
 291               	F_HIDDEN = 0x10
 292               	F_LEAP = 0x00
 293               	
 294               	F_TOMASK = 0xF0
 295               	F_UNMASK = 0x0F
 296               	
 297               	;---------------------------------------------------------------------
 298               	;
 299               	; minimal error codes from forth 2012
 300               	;
 301               	NO_ERROR = 0
 302               	INVALID_MEMORY = -9
 303               	OUT_OF_RANGE = -11
 304               	INVALID_WORD = -13
 305               	TO_READ_ONLY = -20
 306               	NOT_A_NUMBER = -24
 307               	
 308               	;---------------------------------------------------------------------
 309               	; ASCII constants
 310               	;
 311               	; Flow Control
 312               	; assumes that all line edit is done at remote!
 313               	; no backspace, no delete, no moving cursor, just a static line.
 314               	; works as a screen or block, just receives a line till a CR or CR LF
 315               	; uses BS, for edit last char
 316               	;
 317               	;XON_   =   0x11    ; ascii DC1 ^Q
 318               	;XOFF_  =   0x13    ; ascii DC3 ^S
 319               	;NAK_   =   0x15    ; ascii NAK ^U
 320               	
 321               	CR_    =   0x0d    ; ascci carriage return ^M
 322               	LF_    =   0x0a    ; ascii line feed ^J
 323               	BS_    =   0x08    ; ascii backspace ^H
 324               	BL_    =   0x20    ; ascii space 
 325               	
 326               	;----------------------------------------------------------------------
 327               	; AVR SREG constants
 328               	;
 329               	
 330               	BIT_CARRY = 0
 331               	
 332               	BIT_ZERO = 1
 333               	
 334               	BIT_NEG = 2
 335               	
 336               	;----------------------------------------------------------------------
 337               	
 338               	#ifdef atmega8
 339               	
 340               	; atmega8 have flash memory of 128 pages of 32 words
 341               	
 342               	SPM_SIZE = 64
 343               	
 344               	SRAM_START = 0x060  ; SRAM from AVR manual
 345               	
 346               	SRAM_END = 0x45F    ; SRAM from AVR manual 
 347               	
 348               	FLASH_RWW = 0x0000
 349               	
 350               	FLASH_NRWW = 0x1E00    ; using optiboot in 512 bytes !!!!
 351               	
 352               	FLASH_END = 0x1FFF 
 353               	
 354               	E2P_END = 0x1FF
 355               	
 356               	#endif
 357               	
 358               	#ifdef atmega328
 359               	
 360               	; atmega328 have flash memory of 256 pages of 64 words
 361               	
 362               	SPM_SIZE = 128
 363               	
 364               	SRAM_START = 0x0100  ; SRAM from AVR manual
 365               	
 366               	SRAM_END = 0x08FF  ; SRAM from AVR manual
 367               	
 368               	FLASH_RWW = 0x0000
 369               	
 370               	FLASH_NRWW = 0x3E00    ; using optiboot in 512 bytes !!!!
 371               	
 372               	FLASH_END = 0x3FFF 
 373               	
 374               	E2P_END = 0x3FF
 375               	
 376               	#endif
 377               	
 378               	/* for eeprom use */
 379               	
 380               	E2P_PAGESIZE = 4
 381               	
 382               	E2P_START = 0x000
 383               	
 384               	/* temporary where start forth */
 385               	
 386               	FORTH_INI = SRAM_END + 1
 387               	
 388               	;----------------------------------------------------------------------
 389               	...
  39               	;----------------------------------------------------------------------
  40               	;
  41               	; for sake stacks grows down, heaps grows up
  42               	;
  43               	;----------------------------------------------------------------------
  44               	.section .eeprom
  45               	.org 0x0
  46               	
  47 0000 0000      	e_void:	.word 0 ; always zero
  48 0002 0000      	e_live:	.word 0 ; seed for random
  49 0004 0000      	e_turn:	.word 0 ; routine after boot
  50 0006 0000      	e_rest:	.word 0 ; routine before reset
  51 0008 0000      	e_last:	.word 0 ; link to last word in dictionary
  52 000a 0000      	e_dp:	.word 0 ; next free flash address for dictionary
  53 000c 0000      	e_up:	.word 0 ; next free sram address for variables, backwards
  54 000e 0000      	e_ep:	.word 0 ; next free eprom address for values, 
  55               	EP0 = .
  56               	
  57               	;----------------------------------------------------------------------
  58               	.section data
  59 0000 0000 0000 	.org SRAM_START
  59      0000 0000 
  59      0000 0000 
  59      0000 0000 
  59      0000 0000 
  60               	
  61               	;----------------------------------------------------------------------
  62               	; Terminal input buffer
  63 0100 0000 0000 	TIB0:	.space TIB_SIZE, 0x0
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  64               	
  65               	;----------------------------------------------------------------------
  66               	; Stacks
  67 0148 0000 0000 	SPZ:    .space STACK_SIZE, 0x0
  67      0000 0000 
  67      0000 0000 
  67      0000 0000 
  67      0000 0000 
  68               	SP0 = .
  69 016c 0000 0000 	PSZ:    .space STACK_SIZE, 0x0
  69      0000 0000 
  69      0000 0000 
  69      0000 0000 
  69      0000 0000 
  70               	PS0 = .
  71 0190 0000 0000 	RSZ:    .space STACK_SIZE, 0x0
  71      0000 0000 
  71      0000 0000 
  71      0000 0000 
  71      0000 0000 
  72               	RS0 = .
  73               	
  74               	;----------------------------------------------------------------------
  75               	; non volatile, must be saved in eeprom
  76 01b4 0000      	VOID:	.word 0		; always 0x0000
  77 01b6 0000      	LIVE:   .word 0     ; count boots
  78               	
  79 01b8 0000      	TURN:	.word 0		; routine to run after boot
  80 01ba 0000      	REST:	.word 0		; routine to run before reset
  81               	
  82 01bc 0000      	LAST:	.word 0		; reference to latest word in dictionary
  83 01be 0000      	VDP:	.word 0		; next free cell in flash dictionary
  84               	
  85 01c0 0000      	VUP:    .word 0     ; next free cell in static ram, backwards
  86 01c2 0000      	VEP: 	.word 0		; next free cell in eeprom
  87               	
  88               	;----------------------------------------------------------------------
  89               	; those are volatile, dont care
  90 01c4 0000      	VHP:    .word 0     ; next free cell in static ram, forward
  91 01c6 0000      	SEED:   .word 0     ; random seed
  92               	
  93 01c8 0000      	STAT:	.word 0		; state of interpreter, 0 interprete, 1 compile
  94 01ca 0000      	RADX:	.word 0		; numeric radix for convertion
  95               	
  96 01cc 0000      	TOIN:   .word 0     ; offset in TIB
  97 01ce 0000      	SPAN:   .word 0     ; offsets
  98               	
  99 01d0 0000      	HLD:    .word 0     ; picture number buffer
 100 01d2 0000      	HLDS:   .word 0     ; picture number cursor
 101               	
 102 01d4 0000      	TMP0:   .word 0     ; temporary
 103 01d6 0000      	TMP1:   .word 0     ; temporary
 104 01d8 0000      	TMP2:   .word 0     ; temporary
 105 01da 0000      	TMP3:   .word 0     ; temporary
 106               	
 107               	;----------------------------------------------------------------------
 108               	UH0 = .
 109               	
 110               	US0 = SRAM_END
 111               	
 112               	;.equ is_free_sram,  US0 - UH0
 113               	
 114               	;----------------------------------------------------------------------
 115               	;
 116               	; code segment, flash
 117               	;
 118               	.section .text
 119               	
 120               	;----------------------------------------------------------------------
 121               	.p2align 1, 0x00
 122               	#include "bios.S"
   1               	
   2               	/*
   3               	 *  DISCLAIMER
   4               	 *
   5               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   6               	 *
   7               	 *  Permission is hereby granted, free of charge, to any person obtaining
   8               	 *  a copy of this software and associated documentation files (the
   9               	 *  "Software"), to deal in the Software without restriction, including
  10               	 *  without limitation the rights to use, copy, modify, merge, publish,
  11               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  12               	 *  permit persons to whom the Software is furnished to do so, subject to
  13               	 *  the following conditions:
  14               	 *
  15               	 *  The above copyright notice and this permission notice shall be
  16               	 *  included in all copies or substantial portions of the Software.
  17               	 *
  18               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  19               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  20               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  21               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  22               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  23               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  24               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  25               	 *
  26               	 */
  27               	
  28               	;----------------------------------------------------------------------
  29               	; review for atmega328
  30               	;   10/2022 @agsb
  31               	
  32               	
  33               	;---------------------------------------------------------------------
  34               	; from avr manual, do not change 
  35               	; reserved I/O Memory address
  36               	;
  37               	__SREG__ = 0x3f
  38               	__SP_H__ = 0x3e
  39               	__SP_L__ = 0x3d
  40               	
  41               	/* USART */
  42               	UBRRL = 0x09
  43               	UCSRC = 0x20
  44               	UCSRB = 0x0a
  45               	UCSRA = 0x0b
  46               	
  47               	/* Watch dog */
  48               	WDTCR = 0x21
  49               	
  50               	/* timer0 */
  51               	TCNT0 = 0x32
  52               	TCCR0 = 0x33
  53               	TIMSK = 0x39
  54               	
  55               	/* SPMCR */
  56               	SPMCR = 0x37
  57               	
  58               	/* SPM BITS */
  59               	SPMIE = 7
  60               	RWWSB = 6
  61               	/* bit 5 reserved */
  62               	RWWSRE = 4
  63               	BLBSET = 3
  64               	PGWRT = 2
  65               	PGERS = 1
  66               	SPMEN = 0
  67               	
  68               	;----------------------------------------------------------------------
  69               	;792486AA–AVR–02/2013 ATmega8(L)Note:1.   See “About Code Examples” on page 8
  70               	;
  71               	; from atmeg8 datasheet
  72               	;
  73               	EEARH =  0x1F
  74               	EEARL =  0x1E
  75               	EEDR  =  0x1D
  76               	EECR  =  0x1C
  77               	EEWE  =  1
  78               	EEMWE =  2
  79               	EERE  =  0
  80               	
  81               	;----------------------------------------------------------------------
  82               	; sleep register
  83               	MCUCR = 0x35 
  84               	
  85               	;----------------------------------------------------------------------
  86               	;
  87               	; classic interrup vector table
  88               	;
  89               	;----------------------------------------------------------------------
  90               	
  91               	
  92               	;----------------------------------------------------------------------
  93               	;
  94               	; code segment, flash
  95               	;
  96               	.section .text
  97               	.org 0x000
  98               	.global boot
  99               	
 100               	boot:
 101               	
 102 0000 00C0      	    rjmp RESET ; Reset Handler
 103 0002 1895      	    reti ; rjmp EXT_INT0 ; IRQ0 Handler
 104 0004 1895      	    reti ; rjmp EXT_INT1 ; IRQ1 Handler
 105 0006 1895      	    reti ; rjmp TIM2_COMP ; Timer2 Compare Handler
 106 0008 1895      	    reti ; rjmp TIM2_OVF ; Timer2 Overflow Handler
 107 000a 1895      	    reti ; rjmp TIM1_CAPT ; Timer1 Capture Handler
 108 000c 1895      	    reti ; rjmp TIM1_COMPA ; Timer1 CompareA Handler
 109 000e 1895      	    reti ; rjmp TIM1_COMPB ; Timer1 CompareB Handler
 110 0010 1895      	    reti ; rjmp TIM1_OVF ; Timer1 Overflow Handler
 111 0012 00C0      	    rjmp TIM0_OVF ; Timer0 Overflow Handler
 112 0014 1895      	    reti ; rjmp SPI_STC ; SPI Transfer Complete Handler
 113 0016 1895      	    reti ; rjmp USART_RXC ; USART RX Complete Handler
 114 0018 1895      	    reti ; rjmp USART_UDRE ; ((0x0C) + 0x20) Empty Handler
 115 001a 1895      	    reti ; rjmp USART_TXC ; USART TX Complete Handler
 116 001c 1895      	    reti ; rjmp ADC ; ADC Conversion Complete Handler
 117 001e 1895      	    reti ; rjmp EE_RDY ; EEPROM Ready Handler
 118 0020 1895      	    reti ; rjmp ANA_COMP ; Analog Comparator Handler
 119 0022 1895      	    reti ; rjmp TWSI ; Two-wire Serial Interface Handler
 120 0024 1895      	    reti ; rjmp SPM_RDY ; Store Program Memory Ready Handler;
 121               	
 122               	;----------------------------------------------------------------------
 123               	; 
 124               	RESET:
 125               	;   yes, is a nop. 
 126 0026 0000      	    nop
 127               	; clear interrupts
 128 0028 F894      	    cli
 129               	; init _zero_ as zero
 130 002a 6624      	    clr _zero_
 131 002c 6FBE      	    out __SREG__, _zero_ ; clear sreg
 132               	; init real sp at end of sram
 133 002e 8FEF      	    ldi r24, lo8(SRAM_END)
 134 0030 98E0      	    ldi r25, hi8(SRAM_END)
 135               	; reserve
 136 0032 8DBF      	    out __SP_L__, r24
 137 0034 9EBF      	    out __SP_H__, r25
 138               	
 139               	;----------------------------------------------------------------------
 140               	/*
 141               	
 142               	OSCAL calibration,
 143               	from atmel 2555 note:
 144               	for atmega8 theorical for 25oC at 5V, value is 168.
 145               	for optiboot, value is 143 as sample better for 38400 bauds, maybe less for 40oC
 146               	CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DOSC_CAL=142' '-DNUM_LED_FLASHES=2' -DBAUD_RATE=38400
 147               	*/
 148               	
 149               	;----------------------------------------------------------------------
 150               	; init timer0, with internal clock 8MHz, 
 151               	;   from gcc public code, io ports as constants
 152               	;
 153               	; preset of timer0, with internal clock 8MHz ; cycle 64 ; offset 131
 154               	; timer cycle * offset / clock = 8k/8M = 1ms
 155               	;
 156               	; so it counts 125 clocks inside the interrup routines
 157               	;
 158               	; offset counter 256 - 125 = 131
 159               	; but was 8 clocks in routine timer0, 
 160               	; then 131 + 12 = 143
 161               	OFFSETCNT = 143
 162               	;
 163               	TIMER0_SET:
 164               	; enable pre-escaler
 165 0036 03B7      	    in r16, TCCR0
 166 0038 0360      	    ori r16, (1 << 1) | (1 << 0)
 167 003a 03BF      	    out TCCR0, r16
 168               	; offset counter
 169 003c 0FE8      	    ldi r16, OFFSETCNT
 170               	; preserve offset
 171 003e 302E      	    mov r3, r16
 172 0040 02BF      	    out TCNT0, r16
 173               	; enable counter
 174 0042 09B7      	    in r16, TIMSK
 175 0044 0160      	    ori r16, (1 << 0) 
 176 0046 09BF      	    out TIMSK, r16
 177               	;   clear click counter
 178 0048 4424      	    clr r4
 179 004a 5524      	    clr r5
 180               	
 181               	;----------------------------------------------------------------------
 182               	; init watch dog, from avr-gcc public code, io ports as constants
 183               	; write logical one to WDCE and WDE, set WDP2, WDP1, WDP0 to ~ 2.0 s
 184               	;
 185               	WATCHDOG_SET:
 186 004c 01B5      	    in r16, WDTCR
 187 004e 0861      	    ori r16, (1 << 4) | (1 << 3)
 188 0050 0760      	    ori r16, (1 << 2) | (1 << 1) | (1 << 0)
 189 0052 01BD      	    out WDTCR, r16
 190               	
 191               	;----------------------------------------------------------------------
 192               	; init usart, from avr-gcc public code
 193               	;
 194               	;   defaults to 9600, 8N1, no control
 195               	;
 196               	USART_SET:
 197 0054 0027      	    clr r16
 198 0056 00BD      	    out UCSRC, r16
 199 0058 04E3      	    ldi r16, lo8(52)
 200 005a 09B9      	    out UBRRL, r16
 201 005c 0AB1      	    in r16, UCSRB
 202 005e 0861      	    ori r16, lo8(24)
 203 0060 0AB9      	    out UCSRB, r16
 204 0062 0EE8      	    ldi r16, lo8(-114)
 205 0064 00BD      	    out UCSRC, r16
 206 0066 00B5      	    in r16, UCSRC
 207 0068 0064      	    ori r16,lo8(64)
 208 006a 00BD      	    out UCSRC, r16
 209               	
 210               	;----------------------------------------------------------------------
 211               	; enable interrupts
 212               	GOOD:
 213 006c 7894      	    sei
 214               	;    rjmp COLD 
 215 006e 00C0      	    rjmp HALT
 216               	
 217               	;----------------------------------------------------------------------
 218               	;
 219               	;   do not use r0 and r1 are scratch registers used in spm, mul, des, etc
 220               	;
 221               	;   generic:
 222               	;   r2 , save_SREG
 223               	;   r3 , offset prescale timer0
 224               	;   r4 , counter each 1ms low byte
 225               	;   r5 , counter each 1ms high byte
 226               	;   r6 , _zero_
 227               	
 228               	;   timer0 prescale 
 229               	;   for 8 MHz, prescale 64, offset 131, results about 1 ms
 230               	;   64 * 125 = 8000 ; 
 231               	;   256 - 125 = 131 ; offset for miliseconds
 232               	;   plus 12 cycles inside routine
 233               	;
 234               	;   ticks counts till 65 seconds
 235               	;
 236               	;   60000 is EA60
 237               	;
 238               	; interrupt routine
 239               	TIM0_OVF:
 240               	; disable interrups
 241 0070 F894      	    cli
 242               	; save flags
 243 0072 2FB6      	    in r2, __SREG__
 244               	; increase counter and also clear 
 245 0074 4394      	    inc r4
 246 0076 01F0      	    brbs BIT_ZERO, TIM0_ADJ
 247 0078 5394      	    inc r5
 248               	TIM0_ADJ:
 249 007a 32BE      	    out TCNT0, r3
 250               	;  reset watch dog
 251 007c A895      	    wdr
 252               	; clear _zero_  
 253 007e 6624      	    clr r6
 254               	; load flags and return
 255 0080 2FBE      	    out __SREG__, r2
 256               	; enable interrups
 257 0082 7894      	    sei
 258 0084 1895      	    reti
 259               	
 260               	;----------------------------------------------------------------------
 261               	;
 262               	;   do not use r0 and r1 are scratch registers used in spm, mul, des, etc
 263               	;
 264               	HALT:
 265 0086 0000      	    nop
 266 0088 7894      	    sei
 267 008a 00E8      	    ldi r16, 0x80 ; Enable sleep mode
 268 008c 05BF      	    out MCUCR, r16
 269 008e 8895      	    sleep           ; Put MCU in sleep mode
 270 0090 00C0      	    rjmp RESET
 271               	
 123               	
 124               	;----------------------------------------------------------------------
 125               	.p2align 1, 0x00
 126               	#include "messages.S"
   1               	
   2               	/*
   3               	 *  DISCLAIMER
   4               	 *
   5               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   6               	 *
   7               	 *  Permission is hereby granted, free of charge, to any person obtaining
   8               	 *  a copy of this software and associated documentation files (the
   9               	 *  "Software"), to deal in the Software without restriction, including
  10               	 *  without limitation the rights to use, copy, modify, merge, publish,
  11               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  12               	 *  permit persons to whom the Software is furnished to do so, subject to
  13               	 *  the following conditions:
  14               	 *
  15               	 *  The above copyright notice and this permission notice shall be
  16               	 *  included in all copies or substantial portions of the Software.
  17               	 *
  18               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  19               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  20               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  21               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  22               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  23               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  24               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  25               	 *
  26               	 */
  27               	
  28               	 disclaimer : 
  29 0092 4449 5343 	 .ascii "DISCLAIMER this software is provided \"AS IS\".\n"
  29      4C41 494D 
  29      4552 2074 
  29      6869 7320 
  29      736F 6674 
  30 00c0 436F 7079 	 .ascii "Copyright © 2020, Alvaro Gomes Sobral Barcellos,\n"
  30      7269 6768 
  30      7420 C2A9 
  30      2032 3032 
  30      302C 2041 
  31 00f2 4C69 6365 	 .ascii "Licence Creative Commons,f8f98284-589e-4290-867c-0ac3824721ac,\n"
  31      6E63 6520 
  31      4372 6561 
  31      7469 7665 
  31      2043 6F6D 
  32 0131 4174 7472 	 .ascii "Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)\n"
  32      6962 7574 
  32      696F 6E2D 
  32      4E6F 6E43 
  32      6F6D 6D65 
  33               	 
  34               	 prompt : ; 4
  35 016c 204F 6B00 	 .asciz " Ok"
  36               	 
  37               	 notoky : ; 4
  38 0170 203F 3F00 	 .asciz " ??"
  39               	 
  40               	 undefined: ; 12
  41 0174 2075 6E64 	 .asciz " undefined?"
  41      6566 696E 
  41      6564 3F00 
  42               	 
  43               	 exception: ; 12
  44 0180 2065 7863 	 .asciz " exception!"
  44      6570 7469 
  44      6F6E 2100 
  45               	 
  46               	 abort: ; 10
  47 018c 2061 626F 	 .asciz " aborted."
  47      7274 6564 
  47      2E00 
  48               	 
  49               	 roullete: ; 37, Pascal
  50               	 ; french: 0-32-15-19-4-21-2-25-17-34-6-27-13-36-11-30-8-23-10-5-24-16-33-1-20-14-31-9-22-18-29-7-2
  51               	 ; double: 0-28-9-26-30-11-7-20-32-17-5-22-34-15-3-24-36-13-1-00-27-10-25-29-12-8-19-31-18-6-21-33-
  52               	 ; triple: 0-000-00-32-15-19-4-21-2-25-17-34-6-27-13-36-11-30-8-23-10-5-24-16-33-1-20-14-31-9-22-18
  53 0196 0000      	 .word  0
  54 0198 2000 0F00 	 .word 32, 15, 19,  4, 21,  2, 25, 17, 34 
  54      1300 0400 
  54      1500 0200 
  54      1900 1100 
  54      2200 
  55 01aa 0600 1B00 	 .word  6, 27, 13, 36, 11, 30,  8, 23, 10
  55      0D00 2400 
  55      0B00 1E00 
  55      0800 1700 
  55      0A00 
  56 01bc 0500 1800 	 .word  5, 24, 16, 33,  1, 20, 14, 31,  9
  56      1000 2100 
  56      0100 1400 
  56      0E00 1F00 
  56      0900 
  57 01ce 1600 1200 	 .word 22, 18, 29,  7, 28, 12, 35,  3, 26
  57      1D00 0700 
  57      1C00 0C00 
  57      2300 0300 
  57      1A00 
  58               	
 127               	
 128               	;----------------------------------------------------------------------
 129               	.p2align 1, 0x00
 130               	#include "forth-leafs.S"
   1               	
   2               	/*
   3               	 *  DISCLAIMER
   4               	 *
   5               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   6               	 *
   7               	 *  Permission is hereby granted, free of charge, to any person obtaining
   8               	 *  a copy of this software and associated documentation files (the
   9               	 *  "Software"), to deal in the Software without restriction, including
  10               	 *  without limitation the rights to use, copy, modify, merge, publish,
  11               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  12               	 *  permit persons to whom the Software is furnished to do so, subject to
  13               	 *  the following conditions:
  14               	 *
  15               	 *  The above copyright notice and this permission notice shall be
  16               	 *  included in all copies or substantial portions of the Software.
  17               	 *
  18               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  19               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  20               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  21               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  22               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  23               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  24               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  25               	 *
  26               	 */
  27               	
  28               	;---------------------------------------------------------------------
  29               	;
  30               	;    A small Forth for ATmega8 
  31               	;
  32               	;---------------------------------------------------------------------
  33               	; dictionary structure 
  34               	;
  35               	; cell size is a word of 16 bits 
  36               	;
  37               	; .word  link    link to previous 
  38               	; .byte  size    sizeof name OR flags 
  39               	; .ascii "name"  name, plus a pad byte with BL (0x32) if size is even 
  40               	; .word  param,  many references 
  41               	;
  42               	;----------------------------------------------------------------------
  43               	 
  44               	;
  45               	; classics 
  46               	;
  48               	.LIST 
  49               	 
  50               	;----------------------------------------------------------------------
  51               	; start of dictionary 
  52               	;
  53               	 
  54               	;----------------------------------------------------------------------
  55               	;
  56               	; this is the forth inner engine, 
  57               	;
  58               	; a compound word, aka twig, must end with a reference to ENDS 
  59               	;
  60               	; a primitive work, aka leaf, must start with NOOP and ends with POON 
  61               	;
  62               	; the size byte must be masked by: or 0xF0 
  63               	;
  64               	; memory pointer r30:r31 as Z 
  65               	; parameter stack pointer r28:r29 as Y 
  66               	; return stack pointer r26:r27 as X 
  67               	; top of stack r24:r25 
  68               	; nos, temporary next of stack r22:r23 
  69               	; wrk, temporary working r20:r21 
  70               	;
  71               	; _zero_, always zero, keeped by timer0
  72               	; _work_, scratch
  73               	;
  74               	; Can only use LPM to access flash memory ? YES! 
  75               	;
  76               	; forth: all constants in flash
  77               	;
  78               	; user: no constants and variables in sdram 
  79               	;
  80               	; why ? flash memory suports only 10.000 cycles 
  81               	;
  82               	;----------------------------------------------------------------------
  83               	; starts just above sram ends 
  84               	;
  85               	; use the address to determine if is flash or is sram, above is flash :)
  86               	;
  87               	.section .text 
  88 01e0 0000 0000 	.org FORTH_INI
  88      0000 0000 
  88      0000 0000 
  88      0000 0000 
  88      0000 0000 
  89               	.global forth 
  90               	_forth_: 
  91               	;----------------------------------------------------------------------
  92               	; inner interpreter, 
  93               	; it is also a primitive word 
  94               	;
  95               	; on AVR use Z for access flash
  96               	;
  97               	;   temporary use zpm, wrk, _word_
  98               	;
  99 0900 0000 0445 	HEADER "ENDS", "ENDS", F_LEAP
  99      4E44 5320 
 100               	; does nothing and mark as primitive 
 101 0908 0000      	    NOOP 
 102               	 
 103               	; pull ips from rsp 
 104               	_unnest:  
 105 090a FD91 ED91 	    rspull zpm_low, zpm_high 
 106               	    ; rjump _next
 107               	 
 108               	; load w with contents of cell at ips 
 109               	_next: 
 110 090e EE0F FF1F 	    pmload wrk_low, wrk_high ; also increments zpm 
 110      4591 5591 
 110      F795 E795 
 111               	 
 112               	; if zero (NULL) is a primitive word 
 113               	_void:
 114 091a 742E      	    mov _work_, wrk_low 
 115 091c 752A      	    or _work_, wrk_high 
 116 091e 01F0      	    brbs BIT_ZERO, _jump
 117               	
 118               	; else is a reference ( 2 extra cycles )
 119               	_nest: 
 120 0920 EE93 FE93 	    rspush zpm_low, zpm_high ; push next reference 
 121 0924 FA01      	    movw zpm_low, wrk_low ; point to this reference 
 122 0926 00C0      	    rjmp _next 
 123               	 
 124               	; then jump, for exec it 
 125               	_jump: 
 126 0928 0994      	    ijmp 
 127               	 
 128               	; then link, for continue 
 129               	_link: 
 130 092a 00C0      	    rjmp _unnest 
 131               	 
 132               	;********************************************************************** 
 133               	;
 134               	;   bios i/O 
 135               	;
 136               	;----------------------------------------------------------------------
 137               	;
 138               	; ok ( -- w) 
 139               	; beware, it blocks while test if can receive a char 
 140               	;
 141 092c 0000 034B 	HEADER "KEY", "KEY", F_LEAP
 141      4559 
 142 0932 0000      	    NOOP 
 143               	1: 
 144 0934 5F9B      	    sbis 0x0b, 7 
 145 0936 00C0      	    rjmp 1b 
 146               	2: 
 147 0938 8A93 9A93 	    pspush tos_low, tos_high
 148 093c 8CB1      	    in tos_low, 0x0c 
 149 093e 9927      	    clr tos_high 
 150 0940 00C0      	    POON 
 151               	 
 152               	;----------------------------------------------------------------------
 153               	;
 154               	; ok ( -- FALSE | TRUE ) 
 155               	; test if can receive a char, or return FALSE 
 156               	;
 157 0942 0000 044B 	HEADER "KEY?", "QKEY", F_LEAP
 157      4559 3F20 
 158 094a 0000      	    NOOP 
 159               	3: 
 160 094c 5F9B      	    sbis 0x0b, 7 
 161 094e 00C0      	    rjmp _iffalse 
 162 0950 00C0      	    rjmp _iftrue 
 163               	 
 164               	;----------------------------------------------------------------------
 165               	;
 166               	; ok ( w -- ) 
 167               	; beware, it blocks while test if can send a char 
 168               	;
 169 0952 0000 0445 	HEADER "EMIT", "EMIT", F_LEAP
 169      4D49 5420 
 170 095a 0000      	    NOOP 
 171               	1: 
 172 095c 5D9B      	    sbis 0x0b, 5 
 173 095e 00C0      	    rjmp 1b 
 174               	2: 
 175 0960 8CB9      	    out 0x0c, tos_low 
 176 0962 9991 8991 	    pspull tos_low, tos_high
 177 0966 00C0      	    POON 
 178               	 
 179               	;----------------------------------------------------------------------
 180               	;
 181               	; ok ( -- FALSE | TRUE ) 
 182               	; test if can send a char, or return FALSE 
 183               	;
 184 0968 0000 0545 	HEADER "EMIT?", "QEMIT", F_LEAP
 184      4D49 543F 
 185 0970 0000      	    NOOP 
 186               	3: 
 187 0972 5D9B      	    sbis 0x0b, 5 
 188 0974 00C0      	    rjmp _iffalse 
 189 0976 00C0      	    rjmp _iftrue 
 190               	 
 191               	;----------------------------------------------------------------------
 192               	;
 193               	; ok ( c e -- ) 
 194               	;   write a byte to eprom 
 195               	;
 196 0978 0000 0343 	HEADER "C!E", "CTOE", F_LEAP
 196      2145 
 197 097e 0000      	    NOOP 
 198 0980 7991 6991 	    pspull nos_low, nos_high
 199               	
 200               	_ee_write:
 201               	; Wait for completion of previous write
 202 0984 E199      	    sbic EECR, EEWE
 203 0986 00C0      	    rjmp _ee_write
 204               	
 205               	; Set up address  in address register
 206 0988 9FBB      	    out EEARH, tos_high
 207 098a 8EBB      	    out EEARL, tos_low
 208               	
 209               	; Write data to Data Register
 210 098c 6DBB      	    out EEDR, nos_low
 211               	
 212               	; prepare    
 213 098e F894      	    cli
 214 0990 2FB6      	    in r2, __SREG__
 215               	
 216               	; Write logical one to EEMPE
 217 0992 E29A      	    sbi EECR, EEMWE
 218               	; Start eeprom write by setting EEWE
 219 0994 E19A      	    sbi EECR, EEWE
 220               	
 221               	; restore
 222 0996 2FBE      	    out __SREG__, r2
 223 0998 7894      	    sei
 224 099a 00C0      	    POON
 225               	
 226               	;----------------------------------------------------------------------
 227               	;
 228               	; ok ( e -- u ) 
 229               	;   read eeprom
 230               	;
 231 099c 0000 0343 	HEADER "C@E", "CATE", F_LEAP
 231      4045 
 232 09a2 0000      	    NOOP 
 233 09a4 7991 6991 	    pspull nos_low, nos_high
 234               	
 235               	_ee_read:
 236               	; Wait for completion of previous write
 237 09a8 E199      	    sbic EECR, EEWE
 238 09aa 00C0      	    rjmp _ee_read
 239               	
 240               	; Set up address in address register
 241 09ac 9FBB      	    out EEARH, tos_high
 242 09ae 8EBB      	    out EEARL, tos_low
 243               	
 244               	; Start eeprom read by writing EERE
 245 09b0 E09A      	    sbi EECR, EERE
 246               	; Read data from Data Register
 247 09b2 8DB3      	    in tos_low, EEDR
 248 09b4 9927      	    clr tos_high
 249 09b6 00C0      	    POON
 250               	
 251               	;----------------------------------------------------------------------
 252               	;
 253               	; ok ( w -- u ) 
 254               	; also io@
 255               	; only sram
 256               	;
 257 09b8 0000 0343 	HEADER "C@P", "CATIO", F_LEAP
 257      4050 
 258 09be 0000      	    NOOP 
 259               	_peek:
 260 09c0 FC01      	    movw zpm_low, tos_low  
 261 09c2 8081      	    ld tos_low, Z
 262 09c4 9927      	    clr tos_high
 263 09c6 00C0      	    POON
 264               	
 265               	;----------------------------------------------------------------------
 266               	;
 267               	; ok ( u w -- ) 
 268               	; also io!
 269               	; only sram
 270               	;
 271 09c8 0000 0343 	HEADER "C!P", "CTOIO", F_LEAP
 271      2150 
 272 09ce 0000      	    NOOP
 273               	_poke:
 274 09d0 FC01      	    movw zpm_low, tos_low  
 275 09d2 8083      	    st Z, tos_low
 276 09d4 9991 8991 	    pspull tos_low, tos_high
 277 09d8 00C0      	    POON
 278               	    
 279               	;----------------------------------------------------------------------
 280               	;
 281               	; ok ( -- w) 
 282               	; push timer counter 
 283               	;
 284 09da 0000 064D 	HEADER "MILLIS", "MILLIS", F_LEAP
 284      494C 4C49 
 284      5320 
 285 09e4 0000      	    NOOP 
 286 09e6 8A93 9A93 	    pspush tos_low, tos_high 
 287 09ea 842D      	    mov tos_low, ticks_low 
 288 09ec 952D      	    mov tos_high, ticks_high 
 289 09ee 00C0      	    POON 
 290               	 
 291               	;********************************************************************** 
 292               	;
 293               	;   primitive words 
 294               	;
 295               	;----------------------------------------------------------------------
 296               	 
 297               	;----------------------------------------------------------------------
 298               	;
 299               	; ok ( -- -1 ) 
 300               	;
 301 09f0 0000 0454 	HEADER "TRUE", "FTRUE", F_LEAP
 301      5255 4520 
 302 09f8 0000      	    NOOP 
 303 09fa 8A93 9A93 	    pspush tos_low, tos_high 
 304               	_iftrue: 
 305 09fe 8FEF      	    ser tos_low 
 306 0a00 9FEF      	    ser tos_high 
 307 0a02 00C0      	    POON 
 308               	 
 309               	;----------------------------------------------------------------------
 310               	;
 311               	; ok ( -- 0 ) 
 312               	;
 313 0a04 0000 0546 	HEADER "FALSE", "FFALSE", F_LEAP
 313      414C 5345 
 314 0a0c 0000      	    NOOP 
 315 0a0e 8A93 9A93 	    pspush tos_low, tos_high 
 316               	_iffalse: 
 317 0a12 8827      	    clr tos_low 
 318 0a14 9927      	    clr tos_high 
 319 0a16 00C0      	    POON 
 320               	 
 321               	;----------------------------------------------------------------------
 322               	;
 323               	; ok 0= 
 324               	;
 325 0a18 0000 0230 	HEADER "0=", "ZEQU", F_LEAP
 325      3D20 
 326 0a1e 0000      	    NOOP 
 327 0a20 892B      	    or tos_low, tos_high
 328 0a22 01F0      	    brbs BIT_ZERO, _iftrue
 329 0a24 01F4      	    brbc BIT_ZERO, _iffalse
 330 0a26 00C0      	    POON
 331               	 
 332               	;----------------------------------------------------------------------
 333               	;
 334               	; ok 0< 
 335               	;   using 2's complement, negative always have 0x8000
 336 0a28 0000 0230 	HEADER "0<", "ZLTH", F_LEAP
 336      3C20 
 337 0a2e 0000      	    NOOP 
 338               	    ; 0x80
 339 0a30 9078      	    andi tos_high, 0x80
 340 0a32 01F4      	    brbc BIT_ZERO, _iftrue
 341 0a34 01F0      	    brbs BIT_ZERO, _iffalse
 342 0a36 00C0      	    POON
 343               	
 344               	;----------------------------------------------------------------------
 345               	;
 346               	; ok ( u1 u2 -- f ) 
 347               	;   unsigned lessthan 
 348               	;   if u1 < u2, true, else, false
 349               	;
 350 0a38 0000 0255 	HEADER "U<", "UMLESS", F_LEAP
 350      3C20 
 351 0a3e 0000      	    NOOP 
 352 0a40 7991 6991 	    pspull nos_low, nos_high 
 353 0a44 8894      	    clc 
 354 0a46 6817      	    cp  nos_low, tos_low 
 355 0a48 7907      	    cpc nos_high, tos_high 
 356               	1:    
 357 0a4a 04F0      	    brlt 2f 
 358 0a4c 00C0      	    rjmp _iffalse
 359               	2:
 360 0a4e 00C0      	    rjmp _iftrue
 361 0a50 00C0      	    POON
 362               	
 363               	;----------------------------------------------------------------------
 364               	;
 365               	; ok ( w1 w2 -- w3 f ) 
 366               	;   unsigned plus 
 367               	;
 368 0a52 0000 0355 	HEADER "UM+", "UMPLUS", F_LEAP
 368      4D2B 
 369 0a58 0000      	    NOOP 
 370 0a5a 7991 6991 	    pspull nos_low, nos_high 
 371 0a5e 8894      	    clc 
 372 0a60 860F      	    add tos_low, nos_low 
 373 0a62 971F      	    adc tos_high, nos_high 
 374 0a64 8A93 9A93 	    pspush tos_low, tos_high
 375               	    ; preserve carry
 376               	1:
 377 0a68 9927      	    clr tos_high
 378 0a6a 8827      	    clr tos_low
 379               	2:    
 380 0a6c 00F4      	    brcc 3f
 381 0a6e 8395      	    inc tos_low
 382               	3:
 383 0a70 00C0      	    POON 
 384               	 
 385               	;----------------------------------------------------------------------
 386               	;
 387               	; ok ! to (w a -- ) 
 388               	; only in sram 
 389               	;
 390 0a72 0000 0121 	HEADER "!", "TO", F_LEAP
 391 0a76 0000      	    NOOP 
 392 0a78 FC01      	    movw  zpm_low, tos_low
 393 0a7a 9991 8991 	    pspull tos_low, tos_high 
 394 0a7e 8193      	    srsave tos_low 
 395 0a80 9193      	    srsave tos_high
 396 0a82 9991 8991 	    pspull tos_low, tos_high 
 397 0a86 00C0      	    POON 
 398               	 
 399               	;----------------------------------------------------------------------
 400               	;
 401               	; ok @ at ( a -- w ) 
 402               	; only in sram 
 403               	;
 404 0a88 0000 0140 	HEADER "@", "AT", F_LEAP
 405 0a8c 0000      	    NOOP 
 406 0a8e FC01      	    movw zpm_low, tos_low 
 407 0a90 8191      	    srload tos_low 
 408 0a92 9191      	    srload tos_high 
 409 0a94 00C0      	    POON
 410               	 
 411               	;----------------------------------------------------------------------
 412               	; 
 413               	; Note on return stack operations:
 414               	;
 415               	;   the values in ( >R R@ R> ) are onto/from second place in return stack.
 416               	;
 417               	;   this preserves the next return reference
 418               	;
 419               	;   that's a side effect of MITC, there is no IP keeped.
 420               	;
 421               	;----------------------------------------------------------------------
 422               	;
 423               	; ok ( w -- ) ( -- W) 
 424               	;
 425 0a96 0000 223E 	HEADER ">R", "TOR", F_COMPILE | F_LEAP
 425      5220 
 426 0a9c 0000      	    NOOP 
 427 0a9e 7D91 6D91 	    rspull nos_low, nos_high
 428 0aa2 8E93 9E93 	    rspush tos_low, tos_high 
 429 0aa6 6E93 7E93 	    rspush nos_low, nos_high
 430 0aaa 9991 8991 	    pspull tos_low, tos_high 
 431 0aae 00C0      	    POON 
 432               	 
 433               	;----------------------------------------------------------------------
 434               	;
 435               	; ok ( -- w ) ( w -- ) 
 436               	;
 437 0ab0 0000 2252 	HEADER "R>", "RTO", F_COMPILE | F_LEAP
 437      3E20 
 438 0ab6 0000      	    NOOP 
 439 0ab8 8A93 9A93 	    pspush tos_low, tos_high 
 440 0abc 7D91 6D91 	    rspull nos_low, nos_high
 441 0ac0 9D91 8D91 	    rspull tos_low, tos_high 
 442 0ac4 6E93 7E93 	    rspush nos_low, nos_high
 443 0ac8 00C0      	    POON 
 444               	 
 445               	;----------------------------------------------------------------------
 446               	;
 447               	; ok ( -- w ) ( w -- w ) 
 448               	;
 449 0aca 0000 2252 	HEADER "R@", "RAT", F_COMPILE | F_LEAP
 449      4020 
 450 0ad0 0000      	    NOOP 
 451 0ad2 8A93 9A93 	    pspush tos_low, tos_high 
 452 0ad6 7D91 6D91 	    rspull nos_low, nos_high
 453 0ada 9D91 8D91 	    rspull tos_low, tos_high 
 454 0ade 8E93 9E93 	    rspush tos_low, tos_high 
 455 0ae2 6E93 7E93 	    rspush nos_low, nos_high
 456 0ae6 00C0      	    POON 
 457               	 
 458               	;----------------------------------------------------------------------
 459               	;
 460               	; ok ( rsp -- w )  
 461               	;
 462 0ae8 0000 0352 	HEADER "RS!", "RSTO", F_LEAP
 462      5321 
 463 0aee 0000      	    NOOP 
 464 0af0 DC01      	    movw rsp_low, tos_low 
 465 0af2 9991 8991 	    pspull tos_low, tos_high 
 466 0af6 00C0      	    POON 
 467               	 
 468               	;----------------------------------------------------------------------
 469               	;
 470               	; ok ( psp -- w ) 
 471               	;
 472 0af8 0000 0350 	HEADER "PS!", "PSTO", F_LEAP
 472      5321 
 473 0afe 0000      	    NOOP 
 474 0b00 EC01      	    movw psp_low, tos_low 
 475 0b02 9991 8991 	    pspull tos_low, tos_high 
 476 0b06 00C0      	    POON 
 477               	 
 478               	;----------------------------------------------------------------------
 479               	;
 480               	; ok ( -- rsp) 
 481               	; put the address to top of return stack at tos
 482               	;
 483 0b08 0000 0352 	HEADER "RS@", "RSAT", F_LEAP
 483      5340 
 484 0b0e 0000      	    NOOP 
 485 0b10 8A93 9A93 	    pspush tos_low, tos_high 
 486 0b14 CD01      	    movw tos_low, rsp_low 
 487 0b16 00C0      	    POON 
 488               	 
 489               	;----------------------------------------------------------------------
 490               	;
 491               	; ok ( -- psp ) 
 492               	; put the address to top of parameter stack at tos
 493               	;
 494 0b18 0000 0350 	HEADER "PS@", "PSAT", F_LEAP
 494      5340 
 495 0b1e 0000      	    NOOP 
 496 0b20 8A93 9A93 	    pspush tos_low, tos_high 
 497 0b24 CE01      	    movw tos_low, psp_low 
 498 0b26 00C0      	    POON 
 499               	
 500               	;----------------------------------------------------------------------
 501               	;
 502               	; ok ( w -- ) 
 503               	;     
 504               	;
 505 0b28 0000 0444 	HEADER "DROP", "DROP", F_LEAP
 505      524F 5020 
 506 0b30 0000      	    NOOP
 507               	PULL: 
 508 0b32 9991 8991 	    pspull tos_low, tos_high 
 509 0b36 00C0      	    POON 
 510               	 
 511               	;----------------------------------------------------------------------
 512               	;
 513               	; ok ( w -- w w) 
 514               	;
 515 0b38 0000 0344 	HEADER "DUP", "DUP", F_LEAP
 515      5550 
 516 0b3e 0000      	    NOOP 
 517               	PUSH:
 518 0b40 8A93 9A93 	    pspush tos_low, tos_high 
 519 0b44 00C0      	    POON 
 520               	 
 521               	;----------------------------------------------------------------------
 522               	;
 523               	; ok ( w2 w1 -- w1 w2 ) 
 524               	;
 525 0b46 0000 0453 	HEADER "SWAP", "SWAP", F_LEAP
 525      5741 5020 
 526 0b4e 0000      	    NOOP 
 527 0b50 7991 6991 	    pspull nos_low, nos_high 
 528 0b54 8A93 9A93 	    pspush tos_low, tos_high 
 529 0b58 CB01      	    movw tos_low, nos_low
 530 0b5a 00C0      	    POON 
 531               	 
 532               	;----------------------------------------------------------------------
 533               	;
 534               	; ok ( w2 w1 -- w2 w1 w2 ) 
 535               	;
 536 0b5c 0000 044F 	HEADER "OVER", "OVER", F_LEAP
 536      5645 5220 
 537 0b64 0000      	    NOOP 
 538 0b66 7991 6991 	    pspull nos_low, nos_high 
 539 0b6a 6A93 7A93 	    pspush nos_low, nos_high 
 540 0b6e 8A93 9A93 	    pspush tos_low, tos_high 
 541 0b72 CB01      	    movw tos_low, nos_low
 542 0b74 00C0      	    POON 
 543               	 
 544               	;----------------------------------------------------------------------
 545               	;
 546               	; ok ( 0 | w -- 0 | w w ) 
 547               	; dup if tos not zero 
 548               	;
 549 0b76 0000 043F 	HEADER "?DUP", "ZDUP", F_LEAP
 549      4455 5020 
 550 0b7e 0000      	    NOOP 
 551 0b80 8917      	    cp tos_low, tos_high
 552 0b82 01F0      	    brbs BIT_ZERO, 1f 
 553 0b84 8A93 9A93 	    pspush tos_low, tos_high 
 554               	1: 
 555 0b88 00C0      	    POON 
 556               	
 557               	;----------------------------------------------------------------------
 558               	;
 559               	; ok ( w1 w2 -- 0 | -1 ) 
 560               	;
 561 0b8a 0000 013C 	HEADER "<", "LTHAN", F_LEAP
 562 0b8e 0000      	    NOOP 
 563 0b90 7991 6991 	    pspull nos_low, nos_high 
 564 0b94 8617      	    cp tos_low, nos_low 
 565 0b96 9707      	    cpc tos_high, nos_high 
 566 0b98 04F0      	    brlt 1f 
 567 0b9a 00C0      	    rjmp _iffalse
 568               	1:
 569 0b9c 00C0      	    rjmp _iftrue
 570 0b9e 00C0      	    POON
 571               	 
 572               	;----------------------------------------------------------------------
 573               	;
 574               	; ok ( w1 w2 -- w2 + w1 ) 
 575               	;   signed plus
 576               	;
 577 0ba0 0000 012B 	HEADER "+", "PLUS", F_LEAP
 578 0ba4 0000      	    NOOP 
 579 0ba6 7991 6991 	    pspull nos_low, nos_high 
 580 0baa 8894      	    clc 
 581 0bac 860F      	    add tos_low, nos_low 
 582 0bae 971F      	    adc tos_high, nos_high 
 583 0bb0 00C0      	    POON 
 584               	 
 585               	;----------------------------------------------------------------------
 586               	;
 587               	; ok ( w1 w2 -- w1 - w2 ) 
 588               	;   signed minus, 0 5 -- -5
 589               	;
 590 0bb2 0000 012D 	HEADER "-", "MINUS", F_LEAP
 591 0bb6 0000      	    NOOP 
 592 0bb8 7991 6991 	    pspull nos_low, nos_high 
 593 0bbc 8894      	    clc 
 594 0bbe 681B      	    sub nos_low, tos_low 
 595 0bc0 790B      	    sbc nos_high, tos_high 
 596 0bc2 CB01      	    movw tos_low, nos_low
 597 0bc4 00C0      	    POON 
 598               	 
 599               	;----------------------------------------------------------------------
 600               	;
 601               	; ok ( w1 w2 -- w2 NAND w1 ) 
 602               	;
 603 0bc6 0000 044E 	HEADER "NAND", "NAND", F_LEAP
 603      414E 4420 
 604 0bce 0000      	    NOOP 
 605 0bd0 7991 6991 	    pspull nos_low, nos_high 
 606 0bd4 8623      	    and tos_low, nos_low 
 607 0bd6 9723      	    and tos_high, nos_high 
 608 0bd8 6095      	    com nos_low 
 609 0bda 7095      	    com nos_high 
 610 0bdc 00C0      	    POON 
 611               	
 612               	;----------------------------------------------------------------------
 613               	;
 614               	; ok ( w1 w2 -- w2 AND w1 ) 
 615               	;
 616 0bde 0000 0341 	HEADER "AND", "AND", F_LEAP
 616      4E44 
 617 0be4 0000      	    NOOP 
 618 0be6 7991 6991 	    pspull nos_low, nos_high 
 619 0bea 8623      	    and  tos_low, nos_low 
 620 0bec 9723      	    and  tos_high, nos_high 
 621 0bee 00C0      	    POON 
 622               	 
 623               	;----------------------------------------------------------------------
 624               	;
 625               	; ok ( w1 w2 -- w2 OR w1 ) 
 626               	;
 627 0bf0 0000 024F 	HEADER "OR", "OR", F_LEAP
 627      5220 
 628 0bf6 0000      	    NOOP 
 629 0bf8 7991 6991 	    pspull nos_low, nos_high 
 630 0bfc 862B      	    or   tos_low, nos_low 
 631 0bfe 972B      	    or   tos_high, nos_high 
 632 0c00 00C0      	    POON 
 633               	 
 634               	;----------------------------------------------------------------------
 635               	;
 636               	; ok ( w1 w2 -- w2 XOR w1 ) 
 637               	;
 638 0c02 0000 0358 	HEADER "XOR", "XOR", F_LEAP
 638      4F52 
 639 0c08 0000      	    NOOP 
 640 0c0a 7991 6991 	    pspull nos_low, nos_high 
 641 0c0e 8627      	    eor  tos_low, nos_low 
 642 0c10 9727      	    eor  tos_high, nos_high 
 643 0c12 00C0      	    POON 
 644               	 
 645               	;----------------------------------------------------------------------
 646               	;
 647               	; ok INV 
 648               	;
 649 0c14 0000 0649 	HEADER "INVERT", "INVERT", F_LEAP
 649      4E56 4552 
 649      5420 
 650 0c1e 0000      	    NOOP 
 651               	_inv: 
 652 0c20 8095      	    com tos_low 
 653 0c22 9095      	    com tos_high 
 654 0c24 00C0      	    POON 
 655               	 
 656               	;----------------------------------------------------------------------
 657               	;
 658               	; ok NEG 
 659               	;
 660 0c26 0000 064E 	HEADER "NEGATE", "NEGATE", F_LEAP
 660      4547 4154 
 660      4520 
 661 0c30 0000      	    NOOP 
 662               	_neg: 
 663 0c32 8195      	    neg tos_low 
 664 0c34 9195      	    neg tos_high 
 665 0c36 00C0      	    POON 
 666               	 
 667               	;----------------------------------------------------------------------
 668               	;
 669               	; ok ( w -- w * 2 ) same as shift left << 1, unsigned 
 670               	;
 671 0c38 0000 0232 	HEADER "2*", "SHL", F_LEAP
 671      2A20 
 672 0c3e 0000      	    NOOP 
 673               	_shl: 
 674 0c40 8894      	    clc 
 675 0c42 880F      	    lsl   tos_low 
 676 0c44 991F      	    rol   tos_high 
 677 0c46 00C0      	    POON 
 678               	 
 679               	;----------------------------------------------------------------------
 680               	;
 681               	; ok ( w -- w / 2 ) same as shift right >> 1, unsigned 
 682               	;
 683 0c48 0000 0232 	HEADER "2/", "SHR", F_LEAP
 683      2F20 
 684 0c4e 0000      	    NOOP 
 685               	_shr: 
 686 0c50 8894      	    clc 
 687 0c52 8695      	    lsr tos_low 
 688 0c54 9795      	    ror tos_high 
 689 0c56 00C0      	    POON 
 690               	 
 691               	;----------------------------------------------------------------------
 692               	;
 693               	; ok ( nAnB -- nBnA ) swap bytes in a word 
 694               	;
 695 0c58 0000 023E 	HEADER "><", "ENDIAN", F_LEAP
 695      3C20 
 696 0c5e 0000      	    NOOP 
 697 0c60 482F      	    mov wrk_low, tos_low
 698 0c62 892F      	    mov tos_low, tos_high
 699 0c64 942F      	    mov tos_high, wrk_low
 700 0c66 00C0      	    POON 
 701               	 
 702               	;----------------------------------------------------------------------
 703               	;
 704               	; ok ( -- ) ( branch next reference ) 
 705               	;   no more offsets then no more branch
 706 0c68 0000 0642 	HEADER "BRANCH", "BRANCH", F_LEAP
 706      5241 4E43 
 706      4820 
 707 0c72 0000      	    NOOP 
 708               	_branch: 
 709 0c74 FD91 ED91 	    rspull zpm_low, zpm_high 
 710 0c78 EE0F FF1F 	    pmload nos_low, nos_high 
 710      6591 7591 
 710      F795 E795 
 711 0c84 6E93 7E93 	    rspush nos_low, nos_high 
 712 0c88 00C0      	    POON 
 713               	 
 714               	;----------------------------------------------------------------------
 715               	;
 716               	; ok ( u -- ) 
 717               	; if tos is not zero, skip next 
 718               	; 
 719 0c8a 0000 0730 	HEADER "0BRANCH", "ZBRANCH", F_LEAP
 719      4252 414E 
 719      4348 
 720 0c94 0000      	    NOOP 
 721 0c96 BC01      	    movw nos_low, tos_low
 722 0c98 9991 8991 	    pspull tos_low, tos_high
 723 0c9c 672B      	    or nos_low, nos_high
 724 0c9e 01F0      	    breq _branch 
 725               	    ; skips
 726 0ca0 FD91 ED91 	    rspull zpm_low, zpm_high 
 727 0ca4 3296      	    adiw zpm_low, 2 
 728 0ca6 EE93 FE93 	    rspush zpm_low, zpm_high 
 729 0caa 00C0      	    POON
 730               	 
 731               	;----------------------------------------------------------------------
 732               	;
 733               	;  ok LIT ( -- w ), 
 734               	;  push a value from flash to data stack 
 735               	;  
 736 0cac 0000 034C 	HEADER "LIT", "LIT", F_LEAP
 736      4954 
 737 0cb2 0000      	    NOOP 
 738 0cb4 8A93 9A93 	    pspush tos_low, tos_high
 739 0cb8 FD91 ED91 	    rspull zpm_low, zpm_high
 740 0cbc EE0F FF1F 	    pmload tos_low, tos_high 
 740      8591 9591 
 740      F795 E795 
 741 0cc8 EE93 FE93 	    rspush zpm_low, zpm_high
 742 0ccc 00C0      	    POON 
 743               	 
 744               	;----------------------------------------------------------------------
 745               	;
 746               	; ok ( w -- w ) 
 747               	;  data space pointer align to CELL, atmega is always 
 748               	 
 749               	;
 750 0cce 0000 0741 	HEADER "ALIGNED", "ALIGNED", F_LEAP
 750      4C49 474E 
 750      4544 
 751 0cd8 0000      	    NOOP 
 752 0cda 0196      	    adiw tos_low, 1 
 753 0cdc 8F7F      	    cbr tos_low, 0 
 754 0cde 00C0      	    POON 
 755               	 
 756               	;----------------------------------------------------------------------
 757               	;
 758               	; ok ( -- CELL ) 
 759               	; CELL is 2 ; size of a cell 
 760               	;
 761 0ce0 0000 0443 	HEADER "CELL", "CELL", F_LEAP
 761      454C 4C20 
 762 0ce8 0000      	    NOOP 
 763 0cea 8A93 9A93 	    pspush tos_low, tos_high
 764 0cee 82E0      	    ldi tos_low, CELL_SIZE 
 765 0cf0 9927      	    clr tos_high 
 766 0cf2 00C0      	    POON 
 767               	 
 768               	;----------------------------------------------------------------------
 769               	;
 770               	; ok C! ( c a -- ) 
 771               	; only works in sram
 772               	;
 773 0cf4 0000 0243 	HEADER "C!", "CTO", F_LEAP
 773      2120 
 774 0cfa 0000      	    NOOP 
 775 0cfc FC01      	    movw zpm_low, tos_low
 776 0cfe 9991 8991 	    pspull tos_low, tos_high
 777 0d02 8083      	    st Z, tos_low
 778 0d04 9991 8991 	    pspull tos_low, tos_high 
 779 0d08 00C0      	    POON 
 780               	 
 781               	;----------------------------------------------------------------------
 782               	;
 783               	; ok C@ ( a -- c ) 
 784               	; only works in sram
 785               	;
 786 0d0a 0000 0243 	HEADER "C@", "CAT", F_LEAP
 786      4020 
 787 0d10 0000      	    NOOP 
 788 0d12 FC01      	    movw zpm_low, tos_low
 789 0d14 8081      	    ld tos_low, Z
 790 0d16 9927      	    clr tos_high
 791 0d18 00C0      	    POON 
 792               	;----------------------------------------------------------------------
 793               	;
 794               	; ok ( -- 0 ) 
 795               	;
 796 0d1a 0000 0130 	HEADER "0", "ZERO", F_LEAP
 797 0d1e 0000      	    NOOP 
 798 0d20 8A93 9A93 	    pspush tos_low, tos_high 
 799 0d24 8827      	    clr tos_low 
 800 0d26 9927      	    clr tos_high 
 801 0d28 00C0      	    POON 
 802               	 
 803               	;----------------------------------------------------------------------
 804               	;
 805               	; ok ( -- 1 ) 
 806               	;
 807 0d2a 0000 0131 	HEADER "1", "ONE", F_LEAP
 808 0d2e 0000      	    NOOP 
 809 0d30 8A93 9A93 	    pspush tos_low, tos_high 
 810 0d34 9927      	    clr tos_high 
 811 0d36 81E0      	    ldi tos_low, 1
 812 0d38 00C0      	    POON 
 813               	
 814               	;----------------------------------------------------------------------
 815               	;
 816               	; ok ( -- 0 ) 
 817               	;
 818 0d3a 0000 0132 	HEADER "2", "TWO", F_LEAP
 819 0d3e 0000      	    NOOP 
 820 0d40 8A93 9A93 	    pspush tos_low, tos_high 
 821 0d44 9927      	    clr tos_high 
 822 0d46 82E0      	    ldi tos_low, 2
 823 0d48 00C0      	    POON 
 824               	 
 825               	;----------------------------------------------------------------------
 826               	 
 131               	
 132               	;----------------------------------------------------------------------
 133               	.p2align 1, 0x00
 134               	#include "flush.S"
   1               	
   2               	/*
   3               	 *  DISCLAIMER
   4               	 *
   5               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   6               	 *
   7               	 *  Permission is hereby granted, free of charge, to any person obtaining
   8               	 *  a copy of this software and associated documentation files (the
   9               	 *  "Software"), to deal in the Software without restriction, including
  10               	 *  without limitation the rights to use, copy, modify, merge, publish,
  11               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  12               	 *  permit persons to whom the Software is furnished to do so, subject to
  13               	 *  the following conditions:
  14               	 *
  15               	 *  The above copyright notice and this permission notice shall be
  16               	 *  included in all copies or substantial portions of the Software.
  17               	 *
  18               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  19               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  20               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  21               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  22               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  23               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  24               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  25               	 *
  26               	 */
  27               	
  28               	/*
  29               	
  30               	routines for flush flash memory
  31               	
  32               	*/
  33               	
  34               	;---------------------------------------------------------------------
  35               	;
  36               	;	for easy using spm from optiboot 
  37               	;
  38               	;	spm instruction uses r31:r30 for address and r1:r0 for data
  39               	;
  40               	;	when erase or write, r0:r1 is ignored, 
  41               	;
  42               	;   ATmega8L datasheet, pg 209
  43               	;
  44               	;   command passed in r24
  45               	;
  46               	;   in optiboot.c version 8.3 :
  47               	;
  48               	;    __boot_rww_enable_short();
  49               	;    7fd2:       87 bf           out     0x37, r24       ; 55
  50               	;    7fd4:       e8 95           spm
  51               	;    7fd6:       08 95           ret
  52               	;
  53               	;   do not expeculate, only one page to "flash flush"
  54               	;   minimal optiboot uses last 256 words at 7e00 ( 3F00 words) 
  55               	;   and the sequence: bf 87 95 e8 95 08
  56               	;
  57               	;   commands are: 
  58               	;	0x01 fill buffer, 
  59               	;	0x03 erase page, 
  60               	;	0x05 write page
  61               	;   set SPMCR and do a SPM whithin 4 cycles
  62               	;
  63               	;	about 3.5 to 4.5 ms to complete write !
  64               	;
  65               	;---------------------------------------------------------------------
  66               	
  67               	
  68               	; small trick, in macros.S
  69               	
  70               	; pagesize = (SPM_PAGE - 1)
  71               	
  72               	; pagemask = (~pagesize)
  73               	
  74               	;----------------------------------------------------------------------
  75               	;
  76               	;   load a flash memory page (fa sa -- )
  77               	;   copy one flash page from flash address fa to sram address sa
  78               	;
  79 0d4a 0000 0C28 	HEADER "(load_flash)", "LDFLASH"
  79      6C6F 6164 
  79      5F66 6C61 
  79      7368 2920 
  80 0d5a 0000      	    NOOP
  81               	
  82               	    ; origin in ps
  83               	
  84 0d5c F991 E991 	    pspull zpm_low, zpm_high
  85               	
  86               	    ; preserve parameter tack
  87               	
  88 0d60 CE93 DE93 	    rspush psp_low, psp_high
  89               	
  90               	    ; move destin from tos
  91               	
  92 0d64 EC01      	    movw psp_low, tos_low
  93               	
  94               	    ; adjust address for lpm
  95 0d66 E695      	    lsr zpm_low
  96 0d68 FF1F      	    rol zpm_high
  97               	
  98               	    ; how many bytes
  99 0d6a 4091 8000 	    lds wrk_low, SPM_SIZE
 100               	
 101               	1:
 102 0d6e 5591      	    lpm wrk_high, Z+
 103 0d70 5D93      	    st X+, wrk_high
 104 0d72 4A95      	    dec wrk_low
 105 0d74 01F4      	    brne 1b
 106               	
 107               	; clean house
 108               	
 109 0d76 DD91 CD91 	    rspull psp_low, psp_high
 110               	
 111 0d7a 9991 8991 	    pspull tos_low, tos_high
 112               	
 113 0d7e 00C0      	    POON
 114               	
 115               	;----------------------------------------------------------------------
 116               	;
 117               	;   save a flash memory page (sa fa -- )
 118               	;   copy one flash page from sram address sa to flash address fa
 119               	;   registers exposed are used for optiboot compiled with gcc
 120               	;
 121 0d80 0000 0C28 	HEADER "(save_flash)", "SVFLASH"
 121      7361 7665 
 121      5F66 6C61 
 121      7368 2920 
 122 0d90 0000      	    NOOP
 123               	
 124               	    ; destin
 125               	
 126 0d92 FC01      		movw zpm_low, tos_low ; tos is HERE
 127               	
 128               	    ; origin
 129               	
 130 0d94 7991 6991 	    pspull nos_low, nos_high ; nos is FIB0
 131               	
 132               	    ; save psp 
 133               	
 134 0d98 CE93 DE93 	    rspush psp_low, psp_high ; is X index
 135               	
 136               		; load for index
 137               	
 138 0d9c EB01      	    movw psp_low, nos_low
 139               	
 140               	    ; save address 
 141 0d9e EE93 FE93 	    rspush zpm_low, zpm_high
 142               	
 143               	;-----------------------------------------------------------------
 144               	
 145               	    ; erase page
 146               	    ; r0:r1 is ignored, ATmega8L datasheet, pg 209
 147 0da2 83E0      	    ldi r24, (1<<PGERS) | (1<<SPMEN)
 148 0da4 00D0      	    rcall _does_spm
 149               	
 150               	;-----------------------------------------------------------------
 151               	
 152               	    ; start buffer page address
 153               		
 154 0da6 EE27      	    clr zpm_low
 155 0da8 FF27      		clr zpm_high
 156               	
 157               	    ; how many bytes, less than 256!
 158 0daa 70E8      	    ldi r23, SPM_SIZE
 159               	
 160               	    ; copy page to buffer, word by word
 161               	2:
 162               	    ; fill page flash from sram
 163 0dac 0D90      	    ld r0, X+
 164 0dae 1D90      	    ld r1, X+
 165 0db0 81E0      	    ldi r24, (1<<SPMEN)
 166 0db2 00D0      	    rcall _does_spm
 167 0db4 3296      	    adiw zpm_low, 2
 168               	    ; count down
 169 0db6 7A95      	    dec r23
 170 0db8 7A95      	    dec r23
 171 0dba 01F4      	    brne 2b
 172               	
 173               	;-----------------------------------------------------------------
 174               	
 175               		; load flash page address
 176               	
 177 0dbc FD91 ED91 	    rspull zpm_low, zpm_high
 178               	
 179               	    ; write page
 180               	    ; r0:r1 is ignored, ATmega8L datasheet, pg 209
 181 0dc0 85E0      	    ldi r24, (1<<PGWRT) | (1<<SPMEN)
 182 0dc2 00D0      	    rcall _does_spm
 183               	
 184               	;-----------------------------------------------------------------
 185               	   ; enable
 186 0dc4 81E1      	    ldi r24, 0x11
 187 0dc6 00D0      	    rcall _does_spm
 188               	;-----------------------------------------------------------------
 189               	
 190               	    ; clean house
 191 0dc8 DD91 CD91 	    rspull psp_low, psp_high
 192 0dcc 9991 8991 		pspull tos_low, tos_high
 193 0dd0 00C0      	    POON
 194               	
 195               	;----------------------------------------------------------------------
 196               	;
 197               	; wrapper around optiboot code
 198               	;
 199               	 
 200               	; call spm in NWWM
 201               	_does_spm:
 202 0dd2 F894      	    cli
 203 0dd4 2FB6      	    in r2, __SREG__
 204               	
 205               	#ifdef atmega8
 206               	; for a atmega8 with optiboot 512b
 207               	#define OPTI_DO_SPM_SHORT 0x1fca    ; in bytes
 208               	    rcall OPTI_DO_SPM_SHORT
 209               	#endif
 210               	
 211               	#ifdef atmega328
 212               	; for a atmega328 with optiboot 512b
 213               	#define OPTI_DO_SPM_SHORT 0x7fd2    ; in bytes
 214 0dd6 FDD8      	    rcall OPTI_DO_SPM_SHORT
 215               	#endif
 216               	
 217 0dd8 2FBE      	    out __SREG__, r2
 218 0dda 7894      	    sei
 219               	; wait for complete
 220 0ddc 07B6      	1:  in      r0, 0x37        ; 55
 221 0dde 00FC      	    sbrc    r0, 0
 222 0de0 00C0      	    rjmp    1b
 223 0de2 0895      	    ret
 224               	 
 225               	;----------------------------------------------------------------------
 226               	/* from optiboot version 8.2 listing, extra comments added
 135               	
 136               	;----------------------------------------------------------------------
 137               	.p2align 1, 0x00
 138               	#include "forth-twigs.S"
   1               	
   2               	/*
   3               	 *  DISCLAIMER
   4               	 *
   5               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   6               	 *
   7               	 *  Permission is hereby granted, free of charge, to any person obtaining
   8               	 *  a copy of this software and associated documentation files (the
   9               	 *  "Software"), to deal in the Software without restriction, including
  10               	 *  without limitation the rights to use, copy, modify, merge, publish,
  11               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  12               	 *  permit persons to whom the Software is furnished to do so, subject to
  13               	 *  the following conditions:
  14               	 *
  15               	 *  The above copyright notice and this permission notice shall be
  16               	 *  included in all copies or substantial portions of the Software.
  17               	 *
  18               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  19               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  20               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  21               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  22               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  23               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  24               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  25               	 *
  26               	 */
  27               	
  28               	;---------------------------------------------------------------------
  29               	;
  30               	;    A small Forth for ATmega8 
  31               	;
  32               	;---------------------------------------------------------------------
  33               	; dictionary structure 
  34               	;
  35               	; cell size is a word of 16 bits 
  36               	;
  37               	; .word  link    link to previous 
  38               	; .byte  size    sizeof name OR flags 
  39               	; .ascii "name"  name, plus a pad byte with BL (0x32) if size is even 
  40               	; .word  param,  many references 
  41               	;
  42               	;----------------------------------------------------------------------
  43               	 
  44               	;
  45               	; classics 
  46               	;
  48               	.LIST 
  49               	 
  50               	;********************************************************************** 
  51               	; FORTH
  52               	;
  53               	;    the follow definitions of compound words 
  54               	;    are as already compiled into a list of references, 
  55               	;    that is a sequence of cells. 
  56               	;    No preorder because the assembler does translation 
  57               	;    of names to address (references) 
  58               	;
  59               	;    (some adapted from old fig-forth listings) 
  60               	;
  61               	;********************************************************************** 
  62               	
  63               	;----------------------------------------------------------------------
  64               	;
  65               	; ok ( w a -- ) 
  66               	; just write a word
  67 0de4 0000 0221 	HEADER "!E", "TOEE", F_LEAP
  67      4520 
  68 0dea 0000 0000 	    .word OVER, OVER, CTOE, ONE, PLUS, TOR, ENDIAN, RTO, CTOE, ENDS   
  68      0000 0000 
  68      0000 0000 
  68      0000 0000 
  68      0000 0000 
  69               	
  70               	;----------------------------------------------------------------------
  71               	;
  72               	; ok ( w -- u ) 
  73               	;   w1 = b1b2 w2=b3b4 ~ u = b1b3 ????
  74               	;   w1 0x00ff and, w2 0x00ff and, 
  75               	;   w1 = b100, w2 = b300, w2 endian, w2 = 00b3
  76               	;   w1 w2 or
  77               	;
  78 0dfe 0000 0240 	HEADER "@E", "ATEE", F_LEAP
  78      4520 
  79 0e04 0000 0000 	    .word DUP, CATE, SWAP, CATE
  79      0000 0000 
  80 0e0c 0000 FF00 	    .word LIT, 0x00FF, AND
  80      0000 
  81 0e12 0000 0000 	    .word ENDIAN, SWAP
  82 0e16 0000 FF00 	    .word LIT, 0x00FF, AND
  82      0000 
  83 0e1c 0000 0000 	    .word OR, ENDS
  84               	
  85               	;********************************************************************** 
  86               	;
  87               	;   stack words
  88               	;
  89               	;----------------------------------------------------------------------
  90               	;
  91               	; ok ( w2 w1 -- w1 ) 
  92               	;
  93 0e20 0000 034E 	HEADER "NIP", "NIP",
  93      4950 
  94 0e26 0000 0000 	    .word SWAP, DROP, ENDS 
  94      0000 
  95               	 
  96               	;----------------------------------------------------------------------
  97               	;
  98               	; ok ( w3 w2 w1 -- w2 w3 w1 ) 
  99               	;
 100 0e2c 0000 0453 	HEADER "SWIP", "SWIP",
 100      5749 5020 
 101 0e34 0000 0000 	    .word TOR, SWAP, RTO, ENDS 
 101      0000 0000 
 102               	 
 103               	;----------------------------------------------------------------------
 104               	;
 105               	; ok ( w2 w1 -- w2 w1 w2 ) 
 106               	; moved to primitives
 107               	;HEADER "OVER", "OVER",
 108               	;    .word TOR, DUP, RTO, SWAP, ENDS 
 109               	 
 110               	;----------------------------------------------------------------------
 111               	;
 112               	; ok ( w3 w2 w1 -- w2 w1 w3 ) 
 113               	;
 114 0e3c 0000 0352 	HEADER "ROT", "ROTU",
 114      4F54 
 115 0e42 0000 0000 	    .word SWIP, SWAP, ENDS 
 115      0000 
 116               	 
 117               	;----------------------------------------------------------------------
 118               	;
 119               	; ok ( w3 w2 w1 -- w1 w3 w2 ) 
 120               	;
 121 0e48 0000 042D 	HEADER "-ROT", "ROTD",
 121      524F 5420 
 122 0e50 0000 0000 	    .word SWAP, SWIP, ENDS 
 122      0000 
 123               	 
 124               	;----------------------------------------------------------------------
 125               	;
 126               	; ok ( w2 w1 --  w1 w2 w1 ) 
 127               	;
 128 0e56 0000 0454 	HEADER "TUCK", "TUCK",
 128      5543 4B20 
 129 0e5e 0000 0000 	    .word SWAP, OVER, ENDS 
 129      0000 
 130               	 
 131               	;----------------------------------------------------------------------
 132               	;
 133               	; ok ( w3 w2 w1 --  w1 w2 w3 ) 
 134               	;
 135 0e64 0000 0446 	HEADER "FLIP", "FLIP",
 135      4C49 5020 
 136 0e6c 0000 0000 	    .word SWAP, SWIP, SWAP, ENDS 
 136      0000 0000 
 137               	
 138               	;----------------------------------------------------------------------
 139               	;
 140               	; ok ( w1 w2 -- 0 | -1) 
 141               	;
 142 0e74 0000 013D 	HEADER "=", "EQUAL",
 143 0e78 0000 0000 	    .word MINUS, ZEQU, ENDS 
 143      0000 
 144               	 
 145               	;----------------------------------------------------------------------
 146               	;
 147               	; ok ( w1 w2 -- 0 | -1) 
 148               	;
 149 0e7e 0000 023C 	HEADER "<>", "NOTEQUAL",
 149      3E20 
 150 0e84 0000 0000 	    .word EQUAL, INVERT, ENDS 
 150      0000 
 151               	 
 152               	;----------------------------------------------------------------------
 153               	;
 154               	; ok ( w1 w2 -- 0 | -1 ) 
 155               	; w1 > w2
 156 0e8a 0000 013E 	HEADER ">", "GTHAN",
 157 0e8e 0000 0000 	    .word SWAP, LTHAN, ENDS 
 157      0000 
 158               	 
 159               	;----------------------------------------------------------------------
 160               	;  ok 0>  must be signed 
 161               	;
 162 0e94 0000 0230 	HEADER "0>", "ZEROGT",
 162      3E20 
 163 0e9a 0000 0000 	     .word ZERO, LTHAN, ENDS 
 163      0000 
 164               	 
 165               	;----------------------------------------------------------------------
 166               	;  ok 0< must be signed 
 167               	;
 168 0ea0 0000 0230 	HEADER "0<", "ZEROLT",
 168      3C20 
 169 0ea6 0000 0000 	    .word ZERO, SWAP, LTHAN, ENDS 
 169      0000 0000 
 170               	 
 171               	;----------------------------------------------------------------------
 172               	;
 173               	; ok ( w -- w * CELL  ) 
 174               	; CELL is 2, multiply by 2, easy way 
 175               	;
 176 0eae 0000 0543 	HEADER "CELLS", "CELLS",
 176      454C 4C53 
 177 0eb6 0000 0000 	    .word SHL, ENDS 
 178               	 
 179               	;----------------------------------------------------------------------
 180               	;
 181               	; ok ( w -- w + CELL ) 
 182               	;
 183 0eba 0000 0543 	HEADER "CELL+", "CELLPLUS",
 183      454C 4C2B 
 184 0ec2 0000 0000 	    .word CELL, PLUS, ENDS 
 184      0000 
 185               	 
 186               	;----------------------------------------------------------------------
 187               	;
 188               	; ok ( w -- w - CELL ) 
 189               	;
 190 0ec8 0000 0543 	HEADER "CELL-", "CELLMINUS",
 190      454C 4C2D 
 191 0ed0 0000 0000 	    .word CELL, MINUS, ENDS 
 191      0000 
 192               	 
 193               	;----------------------------------------------------------------------
 194               	;
 195               	; ok ( w -- w + 1 ) 
 196               	;
 197 0ed6 0000 0231 	HEADER "1+", "ONEPLUS",
 197      2B20 
 198 0edc 0000 0000 	     .word ONE, PLUS, ENDS 
 198      0000 
 199               	 
 200               	;----------------------------------------------------------------------
 201               	;
 202               	; ok ( w -- w - 1 ) 
 203               	;
 204 0ee2 0000 0231 	HEADER "1-", "ONEMINUS",
 204      2D20 
 205 0ee8 0000 0000 	     .word ONE, MINUS, ENDS 
 205      0000 
 206               	 
 207               	;----------------------------------------------------------------------
 208               	;
 209               	; ok ( w -- w + 2 ) 
 210               	;
 211 0eee 0000 0232 	HEADER "2+", "TWOPLUS",
 211      2B20 
 212 0ef4 0000 0000 	     .word TWO, PLUS, ENDS 
 212      0000 
 213               	 
 214               	;----------------------------------------------------------------------
 215               	;
 216               	; ok ( w -- w - 2 ) 
 217               	;
 218 0efa 0000 0232 	HEADER "2-", "TWOMINUS",
 218      2D20 
 219 0f00 0000 0000 	     .word TWO, MINUS, ENDS 
 219      0000 
 220               	 
 221               	;----------------------------------------------------------------------
 222               	;
 223               	; ok ( u w -- ) 
 224               	;
 225 0f06 0000 022B 	HEADER "+!", "PLUSTO",
 225      2120 
 226 0f0c 0000 0000 	    .word DUP, TOR, AT, PLUS, RTO, TO, ENDS 
 226      0000 0000 
 226      0000 0000 
 226      0000 
 227               	 
 228               	;********************************************************************** 
 229               	;
 230               	;    load variables 
 231               	;
 232               	;----------------------------------------------------------------------
 233               	;
 234               	; ok ( -- w) 
 235               	;
 236 0f1a 0000 0354 	HEADER "TIB", "TIB",
 236      4942 
 237 0f20 0000 0000 	    .word LIT, TIB0, ENDS
 237      0000 
 238 0f26 00C0      	    POON 
 239               	 
 240               	;----------------------------------------------------------------------
 241               	;
 242               	; ok ( -- w) 
 243               	;
 244 0f28 0000 064C 	HEADER "LATEST", "LATEST",
 244      4154 4553 
 244      5420 
 245 0f32 0000 0000 	    .word LIT, LAST, ENDS
 245      0000 
 246               	 
 247               	;----------------------------------------------------------------------
 248               	;
 249               	; ok ( -- w) 
 250               	;
 251 0f38 0000 0553 	HEADER "STATE", "STATE",
 251      5441 5445 
 252 0f40 0000 0000 	    .word LIT, STAT, ENDS 
 252      0000 
 253               	 
 254               	;----------------------------------------------------------------------
 255               	;
 256               	; ok ( -- w) 
 257               	;
 258 0f46 0000 0442 	HEADER "BASE", "BASE",
 258      4153 4520 
 259 0f4e 0000 0000 	    .word LIT, BASE, ENDS
 259      0000 
 260               	 
 261               	;----------------------------------------------------------------------
 262               	;
 263               	; ok ( -- w) 
 264               	;
 265 0f54 0000 0245 	HEADER "EP", "EPP",
 265      5020 
 266 0f5a 0000 0000 	    .word LIT, VEP, ENDS
 266      0000 
 267               	 
 268               	;----------------------------------------------------------------------
 269               	;
 270               	; ok ( -- w) 
 271               	;
 272 0f60 0000 0244 	HEADER "DP", "DPP",
 272      5020 
 273 0f66 0000 0000 	    .word LIT, VDP, ENDS
 273      0000 
 274               	 
 275               	;----------------------------------------------------------------------
 276               	;
 277               	; ok ( -- w) 
 278               	;
 279 0f6c 0000 0248 	HEADER "HP", "HPP",
 279      5020 
 280 0f72 0000 0000 	    .word LIT, VHP, ENDS
 280      0000 
 281               	 
 282               	;----------------------------------------------------------------------
 283               	;
 284               	; ok ( -- w) 
 285               	; stack for variables from end of stacks
 286               	;
 287 0f78 0000 0255 	HEADER "UP", "UPP",
 287      5020 
 288 0f7e 0000 0000 	    .word LIT, VUP, ENDS
 288      0000 
 289               	 
 290               	;----------------------------------------------------------------------
 291               	;
 292               	; ok ( -- w) 
 293               	;
 294               	;HEADER "RS$", "RSIS",
 295               	;    .word LIT, RS0, ENDS
 296               	 
 297               	;----------------------------------------------------------------------
 298               	;
 299               	; ok ( -- w) 
 300               	;
 301               	;HEADER "PS$", "PSIS",
 302               	;    .word LIT, PS0, ENDS
 303               	 
 304               	
 305               	;----------------------------------------------------------------------
 306               	;
 307               	; ok ( -- w) 
 308               	;
 309 0f84 0000 0544 	HEADER "DEPTH", "DEPTH",
 309      4550 5448 
 310 0f8c 0000 0000 	    .word PSAT, LIT, PS0, MINUS, ENDS
 310      0000 0000 
 310      0000 
 311               	 
 312               	;----------------------------------------------------------------------
 313               	;
 314               	; ok ( -- w) 
 315               	;
 316 0f96 0000 0652 	HEADER "RDEPTH", "RDEPTH",
 316      4445 5054 
 316      4820 
 317 0fa0 0000 0000 	    .word RSAT, LIT, RS0, MINUS, ENDS
 317      0000 0000 
 317      0000 
 318               	 
 319               	
 320               	;********************************************************************** 
 321               	; 
 322               	;   basic words
 323               	;
 324               	;********************************************************************** 
 325               	; 
 326               	;   basic words
 327               	;
 328               	;----------------------------------------------------------------------
 329               	;   strange changes ?
 330               	;   all compilation is done in sram, then need a trick
 331               	;
 332               	;   up is a pointer to next free cell in sram, from the end of TIB
 333               	;   dp is a pointer to next free cell in flash
 334               	;   hp is a pointer to next free cell in sram, syncronous with dp 
 335               	;
 336               	;   here return where dp is, used for absolute branch and zbranch,
 337               	;   uhere returns where hp is, used for place in sram,
 338               	;   comma writes in sram, and allot updates up and dp pointers
 339               	;   when done to write sram to flash
 340               	;
 341               	;----------------------------------------------------------------------
 342               	;
 343               	; ok HERE ( -- w ) 
 344               	;
 345 0faa 0000 0555 	HEADER "UHERE", "UHERE",
 345      4845 5245 
 346 0fb2 0000 0000 	    .word HPP, AT, ENDS 
 346      0000 
 347               	 
 348               	;----------------------------------------------------------------------
 349               	;
 350               	; ok HERE ( -- w ) 
 351               	;
 352 0fb8 0000 0448 	HEADER "HERE", "HERE",
 352      4552 4520 
 353 0fc0 0000 0000 	    .word DPP, AT, ENDS 
 353      0000 
 354               	 
 355               	;----------------------------------------------------------------------
 356               	;
 357               	; ok ALLOT ( u -- ) 
 358               	; not standart: updates DP and UP
 359               	 
 360 0fc6 0000 0541 	HEADER "ALLOT", "ALLOT",
 360      4C4C 4F54 
 361 0fce 0000      	    .word DUP
 362 0fd0 0000 0000 	    .word HPP, AT, PLUS, HPP, TO 
 362      0000 0000 
 362      0000 
 363 0fda 0000 0000 	    .word DPP, AT, PLUS, DPP, TO 
 363      0000 0000 
 363      0000 
 364 0fe4 0000      	    .word ENDS 
 365               	 
 366               	;----------------------------------------------------------------------
 367               	;
 368               	; is ALIGN 
 369               	; not standart: updates DP and UP
 370               	;
 371 0fe6 0000 0541 	HEADER "ALIGN", "ALIGN",
 371      4C49 474E 
 372 0fee 0000 0000 	    .word HPP, AT, ALIGNED, HPP, TO
 372      0000 0000 
 372      0000 
 373 0ff8 0000 0000 	    .word DPP, AT, ALIGNED, DPP, TO
 373      0000 0000 
 373      0000 
 374 1002 0000      	    .word ENDS 
 375               	 
 376               	;----------------------------------------------------------------------
 377               	;
 378               	; ok CCOMMA ( w -- ) 
 379               	;
 380 1004 0000 4243 	HEADER "C,", "CCOMMA", F_IMMEDIATE
 380      2C20 
 381 100a 0000 0000 	    .word UHERE, CTO, ONE, ALLOT, ENDS 
 381      0000 0000 
 381      0000 
 382               	 
 383               	;----------------------------------------------------------------------
 384               	;
 385               	; ok COMMMA ( w -- ) 
 386               	;
 387 1014 0000 412C 	HEADER ",", "COMMA", F_IMMEDIATE
 388 1018 0000 0000 	    .word UHERE, TO, CELL, ALLOT, ENDS 
 388      0000 0000 
 388      0000 
 389               	 
 390               	;----------------------------------------------------------------------
 391               	;
 392               	; ok TOMMA ( a2 a1 -- ) 
 393               	; not standart, no updates DP or UP, 
 394               	;   just do TO (a2 a1-a2+UP -- )
 395               	;
 396 1022 0000 423C 	HEADER "<,", "TOMMA", F_IMMEDIATE
 396      2C20 
 397 1028 0000 0000 	    .word OVER, MINUS, UHERE, PLUS, TO, ENDS 
 397      0000 0000 
 397      0000 0000 
 398               	 
 399               	;-------------------------------------'---------------------------------
 400               	;
 401               	; is DOVAR ( -- a ), place the address of next cell into stack, 
 402               	;   R> DUP 2+ >R
 403               	;
 404 1034 0000 0544 	HEADER "DOVAR", "DOVAR",
 404      4F56 4152 
 405 103c 0000 0000 	    .word RTO, DUP, TWOPLUS, TOR, ENDS 
 405      0000 0000 
 405      0000 
 406               	 
 407               	;-------------------------------------'---------------------------------
 408               	;
 409               	; is DOCON ( -- a ), place the contents of next cell into stack, 
 410               	;   R> DUP 2+ >R @
 411               	;
 412 1046 0000 0544 	HEADER "DOCON", "DOCON",
 412      4F43 4F4E 
 413 104e 0000 0000 	    .word DOVAR, AT, ENDS 
 413      0000 
 414               	
 415               	;----------------------------------------------------------------------
 416               	;
 417               	; is LITERAL ( w -- ) 
 418               	;
 419 1054 0000 074C 	HEADER "LITERAL", "LITERAL",
 419      4954 4552 
 419      414C 
 420 105e 0000 0000 	    .word LIT, LIT, COMMA, COMMA, ENDS 
 420      0000 0000 
 420      0000 
 421               	 
 422               	;----------------------------------------------------------------------
 423               	;
 424               	; ok this puts next cell into stack and compiles into HERE 
 425               	; used only in precompiled sources as forth-twigs
 426               	; zzzz
 427 1068 0000 4443 	HEADER "COMP", "COMP", F_IMMEDIATE
 427      4F4D 5020 
 428 1070 0000 0000 	    .word RTO, DUP, CELLPLUS, TOR, AT, COMMA, ENDS 
 428      0000 0000 
 428      0000 0000 
 428      0000 
 429               	 
 430               	;----------------------------------------------------------------------
 431               	;
 432               	; ok compile a eow 
 433               	;
 434 107e 0000 4445 	HEADER "EXIT", "EXIT", F_IMMEDIATE
 434      5849 5420 
 435 1086 0000 0000 	    .word COMP, ENDS, ENDS
 435      0000 
 436               	
 437               	;----------------------------------------------------------------------
 438               	;
 439               	; ok execute xt from tos
 440               	;
 441 108c 0000 4445 	HEADER "EXEC", "EXEC", F_IMMEDIATE
 441      5845 4320 
 442 1094 0000 0000 	    .word TOR, ENDS
 443               	
 444               	;----------------------------------------------------------------------
 445               	;
 446               	; ok make a word recursive 
 447               	; recursive return to last 
 448               	;
 449 1098 0000 0454 	HEADER "TAIL", "TAIL", 
 449      4149 4C20 
 450 10a0 0000 0000 	    .word RAT, CELL, MINUS, RTO, ENDS
 450      0000 0000 
 450      0000 
 451               	
 452               	;----------------------------------------------------------------------
 453               	;
 454               	; ok make a value ( w -- )
 455               	; header|lit|value|ends
 456               	; zzzz
 457 10aa 0000 0556 	HEADER "VALUE", "VALUE", 
 457      414C 5545 
 458 10b2 0000 0000 	    .word CREATE, DROP, LITERAL, ENDS
 458      0000 0000 
 459               	
 460               	;----------------------------------------------------------------------
 461               	;
 462               	; ok make a to value 
 463               	; change value 
 464 10ba 0000 4254 	HEADER "TO", "TOVALUE", F_IMMEDIATE
 464      4F20 
 465 10c0 0000 0000 	    .word FIND, ONEPLUS, TO, ENDS
 465      0000 0000 
 466               	
 467               	;----------------------------------------------------------------------
 468               	;
 469               	; ok make a defer
 470               	; zzzz no checks for 
 471 10c8 0000 0544 	HEADER "DEFER", "DEFER", 
 471      4546 4552 
 472 10d0 0000 0000 	    .word CREATE, LIT, ZZZZ, LIT, BRANCH, COMMA, COMMA, ENDS
 472      0000 0000 
 472      0000 0000 
 472      0000 0000 
 473               	
 474               	;----------------------------------------------------------------------
 475               	;
 476               	; ok make a is 
 477               	;
 478 10e0 0000 4249 	HEADER "IS", "ISDEFER", F_IMMEDIATE
 478      5320 
 479 10e6 0000 0000 	    .word FIND, ONEPLUS, SWAP, TO, ENDS
 479      0000 0000 
 479      0000 
 480               	
 481               	;----------------------------------------------------------------------
 482               	;
 483               	; Control words review. there is no more offset BRANCH.
 484               	;
 485               	;----------------------------------------------------------------------
 486               	 
 487               	;----------------------------------------------------------------------
 488               	;
 489               	; ok MARKTO 
 490               	; places a address of cell
 491               	; places to address to self in a holder, 
 492               	; and left address of holder at stack
 493               	;
 494 10f0 0000 664D 	HEADER "MARKTO", "MARKTO", F_IMMEDIATE | F_COMPILE,
 494      4152 4B54 
 494      4F20 
 495 10fa 0000 0000 	    .word HERE, DUP, COMMA, ENDS 
 495      0000 0000 
 496               	 
 497               	;----------------------------------------------------------------------
 498               	;
 499               	; ok TOMARK 
 500               	; places a address of cell 
 501               	; resolves a back reference to last holder 
 502               	; and places a address to self at holder 
 503 1102 0000 6654 	HEADER "TOMARK", "TOMARK", F_IMMEDIATE | F_COMPILE,
 503      4F4D 4152 
 503      4B20 
 504 110c 0000 0000 	    .word HERE, SWAP, TOMMA, ENDS 
 504      0000 0000 
 505               	 
 506               	;----------------------------------------------------------------------
 507               	;
 508               	; ok BEGIN 
 509               	;
 510 1114 0000 6542 	HEADER "BEGIN", "BEGIN", F_IMMEDIATE | F_COMPILE,
 510      4547 494E 
 511 111c 0000 0000 	    .word HERE, ENDS 
 512               	 
 513               	;----------------------------------------------------------------------
 514               	;
 515               	; ok AGAIN resolves a unconditional branch 
 516               	;
 517 1120 0000 6541 	HEADER "AGAIN", "AGAIN", F_IMMEDIATE | F_COMPILE,
 517      4741 494E 
 518 1128 0000 0000 	    .word COMP, BRANCH, COMMA, ENDS 
 518      0000 0000 
 519               	 
 520               	;----------------------------------------------------------------------
 521               	;
 522               	; ok UNTIL resolves a conditional branch, as C do { ... } while (0) 
 523               	;
 524 1130 0000 6555 	HEADER "UNTIL", "UNTIL", F_IMMEDIATE | F_COMPILE,
 524      4E54 494C 
 525 1138 0000 0000 	    .word COMP, ZBRANCH, COMMA, ENDS 
 525      0000 0000 
 526               	 
 527               	;----------------------------------------------------------------------
 528               	;
 529               	; ok UNLESS 
 530               	;
 531 1140 0000 6655 	HEADER "UNLESS", "UNLESS", F_IMMEDIATE | F_COMPILE, 
 531      4E4C 4553 
 531      5320 
 532 114a 0000 0000 	    .word ZEQU, UNTIL, ENDS 
 532      0000 
 533               	 
 534               	;----------------------------------------------------------------------
 535               	;
 536               	; ok IF (executed if tos is not zero)
 537               	;
 538 1150 0000 6249 	HEADER "IF", "IF", F_IMMEDIATE | F_COMPILE,
 538      4620 
 539 1156 0000 0000 	    .word COMP, ZBRANCH, MARKTO, ENDS 
 539      0000 0000 
 540               	 
 541               	;----------------------------------------------------------------------
 542               	;
 543               	; ok GO (executed ever)
 544               	;
 545 115e 0000 6247 	HEADER "GO", "GO", F_IMMEDIATE | F_COMPILE,
 545      4F20 
 546 1164 0000 0000 	    .word COMP, BRANCH, MARKTO, ENDS 
 546      0000 0000 
 547               	 
 548               	;----------------------------------------------------------------------
 549               	;
 550               	; ok THEN 
 551               	;
 552 116c 0000 6454 	HEADER "THEN", "THEN", F_IMMEDIATE | F_COMPILE,
 552      4845 4E20 
 553 1174 0000 0000 	    .word ENDIF, ENDS 
 554               	 
 555               	;----------------------------------------------------------------------
 556               	;
 557               	; ok ENDIF resolves a forward branch 
 558               	;
 559 1178 0000 6545 	HEADER "ENDIF", "ENDIF", F_IMMEDIATE | F_COMPILE,
 559      4E44 4946 
 560 1180 0000 0000 	    .word TOMARK, ENDS 
 561               	 
 562               	;----------------------------------------------------------------------
 563               	;
 564               	; ok ELSE (executed if tos is zero)
 565               	;
 566 1184 0000 6445 	HEADER "ELSE", "ELSE", F_IMMEDIATE | F_COMPILE,
 566      4C53 4520 
 567 118c 0000 0000 	    .word GO, SWAP, TOMARK, ENDS 
 567      0000 0000 
 568               	 
 569               	;----------------------------------------------------------------------
 570               	;
 571               	; ok WHILE 
 572               	;
 573 1194 0000 6557 	HEADER "WHILE", "WHILE", F_IMMEDIATE | F_COMPILE,
 573      4849 4C45 
 574 119c 0000 0000 	    .word IF, SWAP, ENDS 
 574      0000 
 575               	 
 576               	;----------------------------------------------------------------------
 577               	;
 578               	; ok REPEAT 
 579               	;
 580 11a2 0000 6652 	HEADER "REPEAT", "REPEAT", F_IMMEDIATE | F_COMPILE,
 580      4550 4541 
 580      5420 
 581 11ac 0000 0000 	    .word AGAIN, TOMARK, ENDS 
 581      0000 
 582               	 
 583               	 
 584               	;----------------------------------------------------------------------
 585               	; @eforth
 586               	; is AHEAD (a forward goto)
 587               	;
 588 11b2 0000 6541 	HEADER "AHEAD", "AHEAD", F_IMMEDIATE | F_COMPILE,
 588      4845 4144 
 589 11ba 0000 0000 	    .word GO, ENDS 
 590               	 
 591               	;----------------------------------------------------------------------
 592               	; @eforth
 593               	; is AFT 
 594               	;
 595 11be 0000 6341 	HEADER "AFT", "AFT", F_IMMEDIATE | F_COMPILE,
 595      4654 
 596 11c4 0000 0000 	    .word DROP, GO, HERE, SWAP, ENDS 
 596      0000 0000 
 596      0000 
 597               	 
 598               	;----------------------------------------------------------------------
 599               	;
 600               	; is HOOK 
 601               	;
 602 11ce 0000 6448 	HEADER "HOOK", "HOOK", F_IMMEDIATE | F_COMPILE,
 602      4F4F 4B20 
 603 11d6 0000 0000 	    .word BEGIN, TOR, ENDS 
 603      0000 
 604               	 
 605               	;----------------------------------------------------------------------
 606               	;
 607               	; is BACK 
 608               	;
 609 11dc 0000 6442 	HEADER "BACK", "BACK", F_IMMEDIATE | F_COMPILE,
 609      4143 4B20 
 610 11e4 0000 0000 	    .word RTO, AGAIN, ENDS 
 610      0000 
 611               	 
 612               	;----------------------------------------------------------------------
 613               	;
 614               	; is FOR ( u -- ) R:( -- h u )
 615               	; count down, from +32767
 616 11ea 0000 4346 	HEADER "FOR", "FOR", F_IMMEDIATE
 616      4F52 
 617 11f0 0000 0000 	    .word COMP, TOR, BEGIN, ENDS 
 617      0000 0000 
 618               	 
 619               	;----------------------------------------------------------------------
 620               	;
 621               	; is TXEN ( -- ) R:( -- h u ) 
 622               	;
 623 11f8 0000 0454 	HEADER "TXEN", "TXEN", 
 623      5845 4E20 
 624 1200 0000 0000 	    .word RTO, ONEMINUS
 625 1204 0000 0000 	    .word DUP, ZBRANCH, 1f  
 625      0000 
 626 120a 0000 0000 	    .word DUP, TOR 
 627               	1:
 628 120e 0000      	    .word ENDS
 629               	
 630               	;----------------------------------------------------------------------
 631               	;
 632               	; is NEXT ( -- ) R:( -- h u ) 
 633               	;
 634 1210 0000 444E 	HEADER "NEXT", "NEXT", F_IMMEDIATE
 634      4558 5420 
 635 1218 0000 0000 	    .word COMP, TXEN, UNLESS, ENDS
 635      0000 0000 
 636               	
 637               	;----------------------------------------------------------------------
 638               	; rever zzzz
 639               	/*
 640               	\ CASE's implementation imported from Gforth.
 641               	\
 642               	\ Usage
 643               	\ ( n )
 644               	\ CASE
 645               	\    1 OF .... ENDOF
 646               	\    2 OF .... ENDOF
 647               	\    OTHERWISE
 648               	\ END-CASE
 649               	\
 650               	\ Remember not to consume the element in the OTHERWISE case.
 651               	*/
 652               	;----------------------------------------------------------------------
 653               	;
 654               	; is CASE ( a -- )
 655               	;
 656 1220 0000 4443 	HEADER "CASE", "CASE", F_IMMEDIATE
 656      4153 4520 
 657 1228 0000 0000 	    .word LIT, 0x00, ENDS
 657      0000 
 658               	
 659               	;----------------------------------------------------------------------
 660               	;
 661               	; is OF ( -- )
 662               	;
 663 122e 0000 424F 	HEADER "OF", "OF", F_IMMEDIATE
 663      4620 
 664 1234 0000 0000 	    .word ONEPLUS, TOR, COMP, OVER, COMP, EQUAL, COMP, IF, COMP, DROP, RTO, ENDS
 664      0000 0000 
 664      0000 0000 
 664      0000 0000 
 664      0000 0000 
 665               	
 666               	;----------------------------------------------------------------------
 667               	;
 668               	; is ENDOF ( -- )
 669               	;
 670 124c 0000 4545 	HEADER "ENDOF", "ENDOF", F_IMMEDIATE
 670      4E44 4F46 
 671 1254 0000 0000 	    .word TOR, COMP, ELSE, RTO, ENDS
 671      0000 0000 
 671      0000 
 672               	
 673               	;----------------------------------------------------------------------
 674               	;
 675               	; is ENDCASE ( a -- ) 
 676               	;
 677 125e 0000 4745 	HEADER "ENDCASE", "ENDCASE", F_IMMEDIATE
 677      4E44 4341 
 677      5345 
 678 1268 0000 0000 	    .word COMP, DROP 
 679 126c 0000 0000 	    .word FOR, COMP, THEN, NEXT, ENDS
 679      0000 0000 
 679      0000 
 680               	
 681               	;----------------------------------------------------------------------
 682               	;
 683               	; is  ( a u -- )
 684               	;
 685 1276 0000 0243 	HEADER "CR", "CR",
 685      5220 
 686 127c 0000 0D00 	    .word LIT, 0x0D, EMIT, ENDS
 686      0000 0000 
 687               	
 688               	;----------------------------------------------------------------------
 689               	;
 690               	; is  ( a u -- )
 691               	;
 692 1284 0000 024C 	HEADER "LF", "LF",
 692      4620 
 693 128a 0000 0A00 	    .word LIT, 0x0A, EMIT, ENDS
 693      0000 0000 
 694               	
 695               	;----------------------------------------------------------------------
 696               	;
 697               	; is  ( a u -- )
 698               	;
 699 1292 0000 0242 	HEADER "BL", "BL",
 699      4C20 
 700 1298 0000 2000 	    .word LIT, 0x20, EMIT, ENDS
 700      0000 0000 
 701               	
 702               	;----------------------------------------------------------------------
 703               	;
 704               	; is  ( a u -- )
 705               	;   
 706 12a0 0000 0344 	HEADER "DOT", "DOT",
 706      4F54 
 707 12a6 0000 0000 	    .word ZZZZ, EMIT, ENDS
 707      0000 
 708               	
 709               	;----------------------------------------------------------------------
 710               	;
 711               	; is  ( a u -- )
 712               	;
 713 12ac 0000 0454 	HEADER "TYPE", "TYPE",
 713      5950 4520 
 714               	1:
 715 12b4 0000 0000 	    .word DUP, ZBRANCH, 2f
 715      0000 
 716 12ba 0000 0000 	    .word ONEMINUS, TOR, DUP, AT, EMIT, ONEPLUS, RTO
 716      0000 0000 
 716      0000 0000 
 716      0000 
 717 12c8 0000 0000 	    .word BRANCH, 1b
 718               	2:
 719 12cc 0000 0000 	    .word DROP, DROP, ENDS 
 719      0000 
 720               	  
 721               	;----------------------------------------------------------------------
 722               	;   is <#
 723               	;
 724 12d2 0000 023C 	HEADER "<#", "LTSNUM",
 724      2320 
 725 12d8 0000 0000 	    .word PAD, LIT, HLD, TO, ENDS
 725      0000 0000 
 725      0000 
 726               	
 727               	;----------------------------------------------------------------------
 728               	;   is #>
 729               	;
 730 12e2 0000 0223 	HEADER "#>", "SNUMGT",
 730      3E20 
 731 12e8 0000 0000 	    .word TWODROP, HLD, AT, PAD, OVER, MINUS, ENDS
 731      0000 0000 
 731      0000 0000 
 731      0000 
 732               	
 733               	;----------------------------------------------------------------------
 734               	;   is #
 735               	;   : # 0 BASE @ UM/MOD >R BASE @ UM/MOD SWAP DIGIT HOLD R> ; 
 736               	;
 737 12f6 0000 0123 	HEADER "#", "SNUM",
 738 12fa 0000 0000 	    .word ZERO, BASE, AT, UMBYMOD, TOR, BASE, AT, UMBYMOD
 738      0000 0000 
 738      0000 0000 
 738      0000 0000 
 739 130a 0000 0000 	    .word SWAP, DIGIT, HOLD, RTO, ENDS
 739      0000 0000 
 739      0000 
 740               	
 741               	;----------------------------------------------------------------------
 742               	;   is #S
 743               	;   : #S BEGIN # 2DUP OR 0= UNTIL ; 
 744               	;
 745 1314 0000 0223 	HEADER "#S", "SNUMS",
 745      5320 
 746 131a 0000 0000 	    .word SNUM, TWODUP, OR, ZEQU, ZBRANCH, SNUMS
 746      0000 0000 
 746      0000 0000 
 747               	
 748               	;----------------------------------------------------------------------
 749               	;   is HOLD
 750               	;   : HOLD HLD @ CHAR- DUP HLD ! C! ; 
 751               	;
 752 1326 0000 0448 	HEADER "HOLD", "HOLD",
 752      4F4C 4420 
 753 132e 0000 0000 	    .word HLD, AT, CHARMINUS, DUP, HLD, TO, CTO, ENDS
 753      0000 0000 
 753      0000 0000 
 753      0000 0000 
 754               	
 755               	;----------------------------------------------------------------------
 756               	;   is SIGN
 757               	;   : SIGN 0< IF [CHAR] - HOLD THEN ; 
 758               	;
 759 133e 0000 0453 	HEADER "SIGN", "SIGN",
 759      4947 4E20 
 760 1346 0000 0000 	    .word ZEROLESS, ZBRANCH, 2f
 760      0000 
 761 134c 0000 0000 	    .word [CHAR], MINUS, HOLD
 761      0000 
 762 1352 0000      	2:  .word ENDS
 763               	
 764               	;----------------------------------------------------------------------
 765               	;
 766               	; is  ( u1 u2 -- u3 )
 767               	;
 768 1354 0000 0355 	HEADER "UM-", "UMMINUS",
 768      4D2D 
 769               	1:
 770 135a 0000 0000 	    .word NEGATE, UMPLUS, ENDS
 770      0000 
 771               	;----------------------------------------------------------------------
 772               	;
 773               	; is  ( -- )
 774               	;   no checks
 775               	;
 776 1360 0000 0255 	HEADER "U-", "ULESS",
 776      2D20 
 777 1366 0000 0000 	    .word UPP, AT, CELL, MINUS, DUP, UPP, TO, ENDS
 777      0000 0000 
 777      0000 0000 
 777      0000 0000 
 778               	
 779               	;----------------------------------------------------------------------
 780               	;   User Stack from end sram
 781               	;
 782               	;----------------------------------------------------------------------
 783               	;
 784               	; is  ( -- )
 785               	;   no checks
 786               	;
 787 1376 0000 0255 	HEADER "U+", "UMORE",
 787      2B20 
 788 137c 0000 0000 	    .word UPP, AT, CELL, PLUS, DUP, UPP, TO, ENDS
 788      0000 0000 
 788      0000 0000 
 788      0000 0000 
 789               	
 790               	;----------------------------------------------------------------------
 791               	;
 792               	; is  ( u -- )
 793               	;
 794 138c 0000 0255 	HEADER "U@", "UAT",
 794      4020 
 795               	1:
 796 1392 0000 0000 	    .word UPP, AT, ENDS
 796      0000 
 797               	
 798               	;----------------------------------------------------------------------
 799               	;
 800               	; is  ( u -- )
 801               	;
 802 1398 0000 0255 	HEADER "U!", "UTO",
 802      2120 
 803               	1:
 804 139e 0000 0000 	    .word UPP, TO, ENDS
 804      0000 
 805               	
 806               	;----------------------------------------------------------------------
 807               	;
 808               	; is  ( u -- )
 809               	;
 810 13a4 0000 023E 	HEADER ">U", "USV",
 810      5520 
 811               	1:
 812 13aa 0000 0000 	    .word UPP, AT, TO, ENDS
 812      0000 0000 
 813               	
 814               	;----------------------------------------------------------------------
 815               	;
 816               	; is  ( -- u )
 817               	;
 818 13b2 0000 0255 	HEADER "U>", "ULD",
 818      3E20 
 819               	1:
 820 13b8 0000 0000 	    .word UPP, AT, AT, ENDS
 820      0000 0000 
 821               	
 822               	;----------------------------------------------------------------------
 823               	;
 824 13c0 0000 0543 	HEADER "COLD0", "COLDZERO", F_LEAP
 824      4F4C 4430 
 825               	    
 826 13c8 0000 0000 	    .word LIT, 0x0000, LIT, VOID, TO 
 826      0000 0000 
 826      0000 
 827 13d2 0000 0000 	    .word LIT, 0x0000, LIT, LIVE, TO 
 827      0000 0000 
 827      0000 
 828 13dc 0000 0000 	    .word LIT, 0x0000, LIT, TURN, TO 
 828      0000 0000 
 828      0000 
 829 13e6 0000 0000 	    .word LIT, 0x0000, LIT, REST, TO 
 829      0000 0000 
 829      0000 
 830               	
 831 13f0 0000 0000 	    .word LIT, ZZZZ, LIT, LAST, TO 
 831      0000 0000 
 831      0000 
 832 13fa 0000 0000 	    .word LIT, free_flash, LIT, VDP, TO
 832      0000 0000 
 832      0000 
 833 1404 0000 0000 	    .word LIT, EP0, LIT, VEP, TO
 833      0000 0000 
 833      0000 
 834               	
 835 140e 0000 0000 	    .word LIT, UH0, LIT, VHP, TO
 835      0000 0000 
 835      0000 
 836 1418 0000 FF08 	    .word LIT, US0, LIT, VUP, TO
 836      0000 0000 
 836      0000 
 837 1422 0000      	    .word ENDS
 838               	
 839               	;----------------------------------------------------------------------
 840               	;
 841 1424 0000 0645 	HEADER "EELOAD", "EELOAD", F_LEAP
 841      454C 4F41 
 841      4420 
 842 142e 0000 0000 	    .word ZERO, DUP, ATEE, LIT, VOID, TO 
 842      0000 0000 
 842      0000 0000 
 843 143a 0000 0000 	    .word TWO, PLUS, DUP, ATEE, LIT, LIVE, TO 
 843      0000 0000 
 843      0000 0000 
 843      0000 
 844 1448 0000 0000 	    .word TWO, PLUS, DUP, ATEE, LIT, TURN, TO 
 844      0000 0000 
 844      0000 0000 
 844      0000 
 845 1456 0000 0000 	    .word TWO, PLUS, DUP, ATEE, LIT, REST, TO 
 845      0000 0000 
 845      0000 0000 
 845      0000 
 846               	
 847 1464 0000 0000 	    .word TWO, PLUS, DUP, ATEE, LIT, LAST, TO 
 847      0000 0000 
 847      0000 0000 
 847      0000 
 848 1472 0000 0000 	    .word TWO, PLUS, DUP, ATEE, LIT, VDP, TO 
 848      0000 0000 
 848      0000 0000 
 848      0000 
 849 1480 0000 0000 	    .word TWO, PLUS, DUP, ATEE, LIT, VEP, TO 
 849      0000 0000 
 849      0000 0000 
 849      0000 
 850 148e 0000 0000 	    .word TWO, PLUS, DUP, ATEE, LIT, VUP, TO 
 850      0000 0000 
 850      0000 0000 
 850      0000 
 851 149c 0000      	    .word ENDS
 852               	
 853               	;----------------------------------------------------------------------
 854               	;
 855 149e 0000 0645 	HEADER "EESAVE", "EESAVE", F_LEAP
 855      4553 4156 
 855      4520 
 856 14a8 0000 0000 	    .word ZERO, DUP, LIT, VOID, AT, SWAP, TOEE 
 856      0000 0000 
 856      0000 0000 
 856      0000 
 857 14b6 0000 0000 	    .word TWO, PLUS, DUP, LIT, LIVE, AT, SWAP, TOEE 
 857      0000 0000 
 857      0000 0000 
 857      0000 0000 
 858 14c6 0000 0000 	    .word TWO, PLUS, DUP, LIT, TURN, AT, SWAP, TOEE 
 858      0000 0000 
 858      0000 0000 
 858      0000 0000 
 859 14d6 0000 0000 	    .word TWO, PLUS, DUP, LIT, REST, AT, SWAP, TOEE 
 859      0000 0000 
 859      0000 0000 
 859      0000 0000 
 860               	
 861 14e6 0000 0000 	    .word TWO, PLUS, DUP, LIT, LAST, AT, SWAP, TOEE 
 861      0000 0000 
 861      0000 0000 
 861      0000 0000 
 862 14f6 0000 0000 	    .word TWO, PLUS, DUP, LIT, VDP, AT, SWAP, TOEE 
 862      0000 0000 
 862      0000 0000 
 862      0000 0000 
 863 1506 0000 0000 	    .word TWO, PLUS, DUP, LIT, VEP, AT, SWAP, TOEE 
 863      0000 0000 
 863      0000 0000 
 863      0000 0000 
 864 1516 0000 0000 	    .word TWO, PLUS, DUP, LIT, VUP, AT, SWAP, TOEE 
 864      0000 0000 
 864      0000 0000 
 864      0000 0000 
 865 1526 0000      	    .word ENDS
 866               	
 867               	;----------------------------------------------------------------------
 868               	;
 869 1528 0000 0443 	HEADER "COLD", "COLD", F_LEAP
 869      4F4C 4420 
 870 1530 0000      	    .word EELOAD
 871 1532 0000 0000 	    .word LIT, LIVE, ZEQU, ZBRANCH, _safe
 871      0000 0000 
 871      0000 
 872 153c 0000 0000 	    .word COLDZERO, EESAVE  
 873               	_safe:    
 874 1540 0000 0000 	    .word LIT, RS0, RSTO
 874      0000 
 875 1546 0000 0000 	    .word LIT, PS0, PSTO
 875      0000 
 876 154c 0000 0000 	    .word LIT, 0x00, STATE, TO
 876      0000 0000 
 877 1554 0000 1000 	    .word LIT, 0x10, BASE, TO
 877      0000 0000 
 878 155c 0000 0000 	    .word LIT, WARM, RTO
 878      0000 
 879 1562 0000 0000 	    .word LIT, LIVE, DUP, AT, ONE, PLUS, SWAP, TO 
 879      0000 0000 
 879      0000 0000 
 879      0000 0000 
 880 1572 0000      	    .word ENDS 
 881               	 
 882               	;----------------------------------------------------------------------
 883               	;
 884 1574 0000 0457 	HEADER "WARM", "WARM", F_LEAP
 884      4152 4D20 
 885               	    ; verify error code 
 886               	    ; resets etc 
 887 157c 0000 0000 	    .word TURN, AT, EXEC, QUIT, ENDS 
 887      0000 0000 
 887      0000 
 888               	 
 889               	;----------------------------------------------------------------------
 890               	; does reset 
 891               	;
 892 1586 0000 0342 	HEADER "BYE", "BYE", F_LEAP
 892      5945 
 893 158c 0000      	    .word EESAVE
 894 158e 0000 0000 	    .word REST, AT, EXEC, RESET, ENDS 
 894      0000 0000 
 894      0000 
 895               	
 139               	
 140               	;----------------------------------------------------------------------
 141               	.p2align 1, 0x00
 142               	#include "doubles.S"
   1               	
   2               	
   3               	/*
   4               	 *  DISCLAIMER
   5               	 *
   6               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   7               	 *
   8               	 *  Permission is hereby granted, free of charge, to any person obtaining
   9               	 *  a copy of this software and associated documentation files (the
  10               	 *  "Software"), to deal in the Software without restriction, including
  11               	 *  without limitation the rights to use, copy, modify, merge, publish,
  12               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  13               	 *  permit persons to whom the Software is furnished to do so, subject to
  14               	 *  the following conditions:
  15               	 *
  16               	 *  The above copyright notice and this permission notice shall be
  17               	 *  included in all copies or substantial portions of the Software.
  18               	 *
  19               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  20               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  21               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  22               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  23               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  24               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  25               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  26               	 *
  27               	 */
  28               	
  29               	;----------------------------------------------------------------------
  30               	;
  31               	; ok ( w -- w + 4 ) 
  32               	;
  33 1598 0000 0234 	HEADER "4+", "FOURPLUS",
  33      2B20 
  34 159e 0000 0400 	     .word LIT, 4, PLUS, ENDS 
  34      0000 0000 
  35               	 
  36               	;----------------------------------------------------------------------
  37               	;
  38               	; ok ( w -- w - 4 ) 
  39               	;
  40 15a6 0000 0234 	HEADER "4-", "FOURMINUS",
  40      2D20 
  41 15ac 0000 0400 	     .word LIT, 4, MINUS, ENDS 
  41      0000 0000 
  42               	 
  43               	
  44               	;---------------------------------------------------------------------- 
  45               	; 
  46               	; ok 2@ ( a1 a2 -- w1 w2 ) 
  47               	; 
  48 15b4 0000 0232 	HEADER "2!", "TWOTO", 
  48      2120 
  49 15ba 0000 0000 	    .word SWAP, OVER, TO, CELLPLUS, TO, ENDS 
  49      0000 0000 
  49      0000 0000 
  50               	;---------------------------------------------------------------------- 
  51               	; 
  52               	; ok 2@ ( a1 a2 -- w1 w2 ) 
  53               	; 
  54 15c6 0000 0232 	HEADER "2@", "TWOAT", 
  54      4020 
  55 15cc 0000 0000 	    .word DUP, CELLPLUS, AT, SWAP, AT, ENDS 
  55      0000 0000 
  55      0000 0000 
  56               	 
  57               	;----------------------------------------------------------------------
  58               	;
  59               	; ok ( w1 w2 -- ) 
  60               	;
  61 15d8 0000 0332 	HEADER "2>R", "TWOTOR",
  61      3E52 
  62 15de 0000 0000 	     .word SWAP, RTO, RTO, ENDS 
  62      0000 0000 
  63               	 
  64               	;----------------------------------------------------------------------
  65               	;
  66               	; ok ( w1 w2 -- ) 
  67               	;
  68 15e6 0000 0332 	HEADER "2R>", "TWORTO",
  68      523E 
  69 15ec 0000 0000 	     .word RTO, RTO, SWAP, ENDS 
  69      0000 0000 
  70               	 
  71               	;----------------------------------------------------------------------
  72               	;
  73               	; ok ( w1 w2 -- ) 
  74               	;
  75 15f4 0000 0332 	HEADER "2R@", "TWORAT",
  75      5240 
  76 15fa 0000 0000 	     .word RTO, RTO, TWODUP, TOR, TOR, SWAP, ENDS
  76      0000 0000 
  76      0000 0000 
  76      0000 
  77               	 
  78               	;----------------------------------------------------------------------
  79               	;
  80               	; ok ( w1 w2 -- w1 w2 w1 w2 ) 
  81               	;
  82 1608 0000 0532 	HEADER "2DROP", "TWODROP",
  82      4452 4F50 
  83 1610 0000 0000 	     .word DROP, DROP, ENDS 
  83      0000 
  84               	 
  85               	;----------------------------------------------------------------------
  86               	;
  87               	; ok ( w1 w2 -- w1 w2 w1 w2 ) 
  88               	;
  89 1616 0000 0432 	HEADER "2DUP", "TWODUP",
  89      4455 5020 
  90 161e 0000 0000 	     .word OVER, OVER, ENDS 
  90      0000 
  91               	 
  92               	;----------------------------------------------------------------------
  93               	;
  94               	; ok ( w1 w2 w3 w4 -- w3 w4 w1 w2 ) 
  95               	;
  96 1624 0000 0532 	HEADER "2SWAP", "TWOSWAP",
  96      5357 4150 
  97 162c 0000 0000 	     .word ROTU, TOR, ROTU, TOR, ENDS 
  97      0000 0000 
  97      0000 
  98               	     
  99               	;----------------------------------------------------------------------
 100               	;
 101               	; ok ( w1 w2 w3 w4 -- w3 w4 + w1 w2 ) 
 102               	;
 103 1636 0000 0244 	HEADER "D+", "DPLUS",
 103      2B20 
 104 163c 0000 0000 	     .word TOR, SWAP, TOR, UMPLUS, RTO, RTO, UMPLUS, UMPLUS, ENDS 
 104      0000 0000 
 104      0000 0000 
 104      0000 0000 
 104      0000 
 105               	     
 106               	;----------------------------------------------------------------------
 107               	;
 108               	; ok ( w1 w2 w3 w4 -- w3 w4 - w1 w2 ) 
 109               	;
 110 164e 0000 0244 	HEADER "D-", "DMINUS",
 110      2D20 
 111 1654 0000 0000 	     .word TOR, SWAP, TOR, UMMINUS, RTO, RTO, UMMINUS, UMMINUS, ENDS 
 111      0000 0000 
 111      0000 0000 
 111      0000 0000 
 111      0000 
 112               	     
 143               	
 144               	;----------------------------------------------------------------------
 145               	.p2align 1, 0x00
 146               	#include "math.S"
   1               	
   2               	
   3               	/*
   4               	 *  DISCLAIMER
   5               	 *
   6               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   7               	 *
   8               	 *  Permission is hereby granted, free of charge, to any person obtaining
   9               	 *  a copy of this software and associated documentation files (the
  10               	 *  "Software"), to deal in the Software without restriction, including
  11               	 *  without limitation the rights to use, copy, modify, merge, publish,
  12               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  13               	 *  permit persons to whom the Software is furnished to do so, subject to
  14               	 *  the following conditions:
  15               	 *
  16               	 *  The above copyright notice and this permission notice shall be
  17               	 *  included in all copies or substantial portions of the Software.
  18               	 *
  19               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  20               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  21               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  22               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  23               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  24               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  25               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  26               	 *
  27               	 */
  28               	
  29               	;----------------------------------------------------------------------
  30               	;
  31               	; great DJB hash, adapted for 16bits
  32               	;
  33               	; hash = (hash << 5) + str[i]
  34               	; for ascii chars in sram, in bytes not cells
  35               	; ( a u -- h ) djb hash
  36               	;
  37               	.equ djbHASH, 5381
  38 1666 0000 0448 	HEADER "HASH", "HASH", F_LEAP
  38      4153 4820 
  39 166e 0000      	    NOOP
  40 1670 6624      	    clr _zero_
  41 1672 65E0      	    ldi nos_low, lo8(djbHASH)
  42 1674 75E1      	    ldi nos_high, hi8(djbHASH)
  43 1676 F991 E991 	    pspull zpm_low, zpm_high
  44               	
  45               	    ; get a char
  46               	1:    
  47               	    
  48 167a 9817      	    cp tos_high, tos_low
  49 167c 01F0      	    brbs BIT_ZERO, 2f
  50               	
  51 167e 7190      	    ld _work_, Z+
  52 1680 670D      	    add nos_low, _work_
  53 1682 761D      	    adc nos_high, _zero_
  54               	
  55 1684 660F      	    lsl nos_low
  56 1686 771F      	    rol nos_high
  57 1688 660F      	    lsl nos_low
  58 168a 771F      	    rol nos_high
  59 168c 660F      	    lsl nos_low
  60 168e 771F      	    rol nos_high
  61 1690 660F      	    lsl nos_low
  62 1692 771F      	    rol nos_high
  63 1694 660F      	    lsl nos_low
  64 1696 771F      	    rol nos_high
  65               	
  66 1698 0197      	    sbiw tos_low, 1
  67 169a 00C0      	    rjmp 1b
  68               	    
  69               	2:
  70 169c CB01      	    movw tos_low, nos_low
  71 169e 00C0      	    POON
  72               	
  73               	;----------------------------------------------------------------------
  74               	;
  75               	;   ok  ( -- w)
  76               	;
  77               	;     ©2000-2021 by Gerhard Schmidt,
  78               	;      http://www.avr-asm-tutorial.net/avr_en/apps/random_tn13/random_calc_tn13.html
  79               	;
  80               	;    seed ~ 0x02A8
  81               	;
  82               	;     also good seeds
  83               	;
  84               	;    B167 4A3C 9879 B61E 7B26 
  85               	;    A858 1F88 50D5 419D 5537
  86               	;    0224 0527 5EB6 1E6D BCDC
  87               	;    92FF C206 0ECD 9361 2823
  88               	;    BE0B B303 6462 0E4C 3D24
  89               	;
  90 16a0 0000 0652 	HEADER "RANDOM", "RANDOM", F_LEAP
  90      414E 444F 
  90      4D20 
  91 16aa 0000      	    NOOP
  92               	;    load seed
  93 16ac 4091 0000 	    lds wrk_low, SEED
  94 16b0 5091 0000 	    lds wrk_high, SEED
  95               	;    run magics
  96 16b4 4527      	    eor wrk_low, wrk_high
  97 16b6 4295      	    swap wrk_low
  98 16b8 540F      	    add wrk_high, wrk_low
  99 16ba CA01      	    movw tos_low, wrk_low
 100 16bc 00C0      	    rjmp _seed
 101               	
 102               	;----------------------------------------------------------------------
 103               	;
 104               	;   ok ( w -- ) 
 105               	;   sets seed for rand
 106               	;
 107 16be 0000 0452 	HEADER "RAND", "RAND", F_LEAP
 107      414E 4420 
 108 16c6 0000      	    NOOP
 109 16c8 AC01      	    movw wrk_low, tos_low
 110 16ca 9991 8991 	    pspull tos_low, tos_high
 111               	_seed:
 112 16ce 4093 0000 	    sts SEED, wrk_low
 113 16d2 5093 0000 	    sts SEED + 1, wrk_high
 114 16d6 00C0      	    POON
 115               	    
 116               	;----------------------------------------------------------------------
 117               	;
 118               	;   ok ( w -- u) 
 119               	;
 120 16d8 0000 0341 	HEADER "ABS", "ABS", F_LEAP 
 120      4253 
 121 16de 0000 0000 	    .word DUP, LIT, 0x8000, AND, ZBRANCH, 2f
 121      0080 0000 
 121      0000 0000 
 122 16ea 0000      	    .word NEGATE
 123 16ec 0000      	2:  .word ENDS
 124               	
 125               	;----------------------------------------------------------------------
 126               	;
 127               	;   is ( w1 w2 -- w) 
 128               	;
 129 16ee 0000 034D 	HEADER "MAX", "MAX", F_LEAP
 129      4158 
 130 16f4 0000 0000 	    .word TWODUP, LTHAN, IF, SWAP, THEN, DROP, ENDS
 130      0000 0000 
 130      0000 0000 
 130      0000 
 131               	
 132               	;----------------------------------------------------------------------
 133               	;
 134               	;   is ( w1 w2 -- w) 
 135               	;
 136 1702 0000 034D 	HEADER "MIN", "MIN", F_LEAP
 136      494E 
 137 1708 0000 0000 	    .word SWAP, MAX, ENDS
 137      0000 
 138               	
 139               	;----------------------------------------------------------------------
 140               	;
 141               	;   is ( w1 w2 w3 -- f ) 
 142               	;
 143 170e 0000 0657 	HEADER "WITHIN", "WITHIN", F_LEAP
 143      4954 4849 
 143      4E20 
 144 1718 0000 0000 	    .word OVER, MINUS, TOR, MINUS, RTO, UMLESS, ENDS
 144      0000 0000 
 144      0000 0000 
 144      0000 
 145               	
 146               	;----------------------------------------------------------------------
 147               	; a 64 bit half number, 7FFF FFFF FFFF FFFF is 9.223.372.036.854.775.807
 148               	;----------------------------------------------------------------------
 149               	
 150               	
 151               	
 152               	;----------------------------------------------------------------------
 153               	; adapted from AVR-200 
 154               	; "mpy16u" "- 16x16 Bit Unsigned Multiplication
 155               	;
 156               	; ok UM*
 157 1726 0000 0355 	HEADER "UM*", "UMUL", F_LEAP
 157      4D2A 
 158 172c 0000      	    NOOP
 159               	;
 160               	;    move operanos
 161               	;
 162               	    ; pspull tos_low, tos_high    ; pull multiplicand
 163 172e 7991 6991 	    pspull nos_low, nos_high    ; pull multiplier
 164               	;
 165               	;***** Code
 166               	;
 167               	mul16u: 
 168 1732 40E1      	    ldi wrk_low, 16
 169 1734 742E      	    mov _work_, wrk_low       ;init loop counter
 170 1736 4427      	    clr wrk_low               ;clear high result Low byte
 171 1738 5527      	    clr wrk_high              ;clear high result High byte and carry
 172               	
 173               	    ; multiplier shift rigth
 174 173a 7695      	    lsr nos_high
 175 173c 6795      	    ror nos_low
 176               	
 177               	m16u_1: 
 178 173e 00F4      	    brcc noad8                 ;if carry, bit 0, of multiplier set
 179 1740 480F      	    add wrk_low, tos_low       ;add multiplicand Low to byte 2 of res
 180 1742 591F      	    adc wrk_high, tos_high     ;add multiplicand high to byte 3 of res
 181               	
 182               	noad8: 
 183 1744 5795      	    ror wrk_high               ;shift right result byte 3
 184 1746 4795      	    ror wrk_low                ;rotate right result byte 2
 185 1748 7795      	    ror nos_high               ;rotate result byte 1 and multiplier High
 186 174a 6795      	    ror nos_low                ;rotate result byte 0 and multiplier Low
 187 174c 7A94      	    dec _work_                 ;decrement loop counter
 188 174e 01F4      	    brne m16u_1                ;if not done, loop more
 189               	
 190               	m16ures: 
 191               	m16result:    
 192 1750 4A93 5A93 	    pspush wrk_low, wrk_high    ; high bytes
 193 1754 6A93 7A93 	    pspush nos_low, nos_high    ; low bytes
 194 1758 00C0      	    POON
 195               	
 196               	;----------------------------------------------------------------------
 197               	;
 198               	;     adapted from AVR-200 
 199               	;   "div16u" "- 16/16 Bit Unsigned Division
 200               	;
 201               	; ok UM/MOD
 202 175a 0000 0655 	HEADER "UM/MOD", "UMBYMOD", F_LEAP
 202      4D2F 4D4F 
 202      4420 
 203 1764 0000      	    NOOP
 204               	;
 205               	;    move operanos
 206               	;
 207               	    ; pspull tos_low, tos_high    ; pull divisor
 208 1766 7991 6991 	    pspull nos_low, nos_high    ; pull dividend
 209               	;
 210               	;***** Code
 211               	
 212               	div16u: 
 213 176a 41E1      	    ldi wrk_low, 17
 214 176c 742E      	    mov _work_, wrk_low     ;init loop counter
 215 176e 4427      	    clr wrk_low             ;clear remainder Low byte
 216 1770 5527      	    clr wrk_high            ;clear remainder High byte and carry
 217               	
 218               	d16u_1: 
 219 1772 661F      	    rol nos_low              ;shift left dividend
 220 1774 771F      	    rol nos_high
 221 1776 7A94      	    dec _work_               ;decrement counter
 222 1778 01F0      	    breq d16ures             ;if done
 223               	
 224               	d16u_2: 
 225 177a 441F      	    rol wrk_low              ;shift dividend into remainder
 226 177c 551F      	    rol wrk_high
 227 177e 481B      	    sub wrk_low, tos_low     ;remainder = remainder - divisor
 228 1780 590B      	    sbc wrk_high, tos_high   
 229               	
 230 1782 00F4      	    brcc d16u_3              ;if result negative
 231 1784 480F      	    add wrk_low, tos_low     ; restore remainder
 232 1786 591F      	    adc wrk_high, tos_high
 233 1788 8894      	    clc                      ; clear carry to be shifted into result
 234 178a 00C0      	    rjmp d16u_1              ;else
 235               	
 236               	d16u_3: 
 237 178c 0894      	    sec                      ; set carry to be shifted into result
 238 178e 00C0      	    rjmp d16u_1
 239               	
 240               	d16ures:
 241 1790 00C0      	    rjmp m16result
 242               	
 243               	;----------------------------------------------------------------------
 244               	;
 245               	;     adapted from AVR-200 
 246               	;     "mpy16s" "- 16x16 Bit Signed Multiplication
 247               	; ok *
 248 1792 0000 012A 	HEADER "*", "SMUL", F_LEAP
 249 1796 0000      	    NOOP
 250               	;
 251               	;***** Code
 252               	;
 253               	;    move operanos
 254               	;
 255               	    ; pspull tos_low, tos_high        ; pull multiplicand
 256 1798 7991 6991 	    pspull nos_low, nos_high        ; pull multiplier
 257               	;
 258               	;***** Code
 259               	mpy16s: 
 260 179c 40E1      	    ldi wrk_low, 16
 261 179e 742E      	    mov _work_, wrk_low     ;init loop counter
 262 17a0 441B      	    sub wrk_low, wrk_low    ;clear high result Low byte
 263 17a2 551B      	    sub wrk_high, wrk_high  ;clear high result High byte and carry
 264               	
 265               	m16s_1: 
 266 17a4 00F4      	    brcc m16s_2             ;if carry (previous bit) set
 267 17a6 480F      	    add  wrk_low, tos_low   ;    add multiplicand Low to result byte 2
 268 17a8 591F      	    adc  wrk_high, tos_high ;    add multiplicand High to result byte 3
 269               	m16s_2: 
 270 17aa 60FD      	    sbrc nos_low, 0         ;if current bit set
 271 17ac 481B      	    sub  wrk_low, tos_low   ;    sub multiplicand Low from result byte 2
 272 17ae 60FD      	    sbrc nos_low, 0         ;if current bit set
 273 17b0 590B      	    sbc  wrk_high, tos_high ;    sub multiplicand High from result byte 3
 274 17b2 5595      	    asr  wrk_high           ;shift right result and multiplier
 275 17b4 4795      	    ror  wrk_low
 276 17b6 7795      	    ror  nos_high
 277 17b8 6795      	    ror  nos_low
 278 17ba 7A94      	    dec  _work_             ;decrement counter
 279 17bc 01F4      	    brne m16s_1             ;if not done, loop more
 280               	
 281               	m16sres:
 282 17be 00C0      	    rjmp m16result
 283               	
 284               	;----------------------------------------------------------------------
 285               	;
 286               	;     adapted from AVR-200 
 287               	;   "div16s" "- 16/16 Bit Signed Division
 288               	;
 289               	; ok /
 290 17c0 0000 012F 	HEADER "/", "SDIV", F_LEAP
 291 17c4 0000      	    NOOP
 292               	;
 293               	;***** Subroutine Register Variables
 294               	;
 295               	;    move operanos
 296               	;
 297               	    ; pspull tos_low, tos_high        ; pull divisor
 298 17c6 7991 6991 	    pspull nos_low, nos_high        ; pull dividend
 299               	;
 300               	;***** Code
 301               	;
 302               	div16s: 
 303 17ca 772E      	    mov    _work_, nos_high   ;move dividend High to sign register
 304 17cc 7926      	    eor    _work_, tos_high   ;xor divisor High with sign register
 305 17ce 77FA      	    bst _work_, 7                ;save it, but could be BST
 306               	
 307               	d16s_0:
 308 17d0 77FF      	    sbrs   nos_high, 7          ;if MSB in dividend set
 309 17d2 00C0      	    rjmp   d16s_1
 310               	    
 311 17d4 7095      	    com    nos_high            ;    change sign of dividend
 312 17d6 6095      	    com    nos_low
 313 17d8 6F5F      	    subi   nos_low, lo8(-1)
 314 17da 6F4F      	    sbci   nos_low, hi8(-1)
 315               	
 316               	d16s_1: 
 317 17dc 97FF      	    sbrs   tos_high, 7    ;if MSB in divisor set
 318 17de 00C0      	    rjmp   d16s_2
 319               	    
 320 17e0 9095      	    com    tos_high    ;    change sign of divisor
 321 17e2 8095      	    com    tos_low
 322 17e4 8F5F      	    subi   tos_low, lo8(-1)
 323 17e6 8F4F      	    sbci   tos_low, hi8(-1)
 324               	
 325               	d16s_2: 
 326               	
 327 17e8 41E1      	    ldi wrk_low, 17
 328 17ea 742E      	    mov _work_, wrk_low     ;init loop counter
 329 17ec 441B      	    sub wrk_low, wrk_low    ;clear high remainder Low byte
 330 17ee 551B      	    sub wrk_high, wrk_high  ;clear high remainder High byte and carry
 331               	
 332               	d16s_3: 
 333 17f0 661F      	    rol    nos_low    ;shift left dividend
 334 17f2 771F      	    rol    nos_high
 335 17f4 7A94      	    dec    _work_     ;decrement counter
 336 17f6 01F4      	    brne    d16s_5    ;if done
 337               	
 338 17f8 77F8      	    bld _work_, 7           ;save it, but could be BST
 339 17fa 77FE      	    sbrs    _work_, 7    ;    if MSB in sign register set
 340 17fc 00C0      	    rjmp    d16sres
 341 17fe 7095      	    com    nos_high      ;    change sign of result
 342 1800 6095      	    com    nos_low
 343 1802 6F5F      	    subi   nos_low,lo8(-1)
 344 1804 7F4F      	    sbci   nos_high,hi8(-1)
 345               	
 346               	d16sres:
 347 1806 00C0      	    rjmp m16result
 348               	
 349               	d16s_5: 
 350 1808 441F      	    rol    wrk_low              ;shift dividend into remainder
 351 180a 551F      	    rol    wrk_high
 352 180c 481B      	    sub    wrk_low, tos_low     ;remainder = remainder - divisor
 353 180e 590B      	    sbc    wrk_high, tos_high   ;
 354 1810 00F4      	    brcc    d16s_6              ;if result negative
 355               	
 356 1812 480F      	    add    wrk_low, tos_low     ;    restore remainder
 357 1814 591F      	    adc    wrk_high, tos_high
 358 1816 8894      	    clc                         ;    clear carry to be shifted into result
 359 1818 00C0      	    rjmp    d16s_3    ;else
 360               	d16s_6: 
 361 181a 0894      	    sec                         ;    set carry to be shifted into result
 362 181c 00C0      	    rjmp    d16s_3
 363               	
 364               	;----------------------------------------------------------------------
 365               	; 
 366               	;   by Peter Dannegger 
 367               	;     https://www.avrfreaks.net/forum/smallest-and-fastest-binary-bcd-conversion?page=all
 368               	;     to base 10
 369               	;
 370               	; input 16 bit value 0 ... 65535
 371               	; output  5 digits (ASCII)
 372               	;
 373               	; zzzz ( a -- w )
 374 181e 0000 0475 	HEADER "utoa", "utoa", F_LEAP 
 374      746F 6120 
 375 1826 0000      	    NOOP
 376               	
 377 1828 BC01      	    movw nos_low, tos_low
 378 182a 5991 4991 	    pspull wrk_low, wrk_high
 379               	    
 380               	itoa:
 381               	
 382 182e 8FE2      	    ldi tos_low, -1 + '0'
 383 1830 8395      	1:  inc tos_low
 384 1832 4051      	    subi wrk_low, lo8(10000)    
 385 1834 5742      	    sbci wrk_high, hi8(10000)
 386 1836 00F4      	    brcc 1b
 387 1838 4193      	    st    Z+, wrk_low
 388               	
 389 183a 8AE3      	    ldi tos_low, 10 + '0'
 390 183c 8A95      	2:  dec tos_low
 391 183e 4851      	    subi wrk_low, lo8(-1000)  
 392 1840 5C4F      	    sbci wrk_high, hi8(-1000)
 393 1842 00F0      	    brcs 2b
 394 1844 4193      	    st Z+, wrk_low
 395               	
 396 1846 8FE2      	    ldi tos_low, -1 + '0'
 397 1848 8395      	3:  inc tos_low
 398 184a 4456      	    subi wrk_low, lo8(100)   
 399 184c 5040      	    sbci wrk_high, hi8(100)
 400 184e 00F4      	    brcc 3b
 401 1850 4193      	    st Z+, wrk_low
 402               	
 403 1852 5AE3      	    ldi wrk_high, 10 + '0'
 404 1854 5A95      	4:  dec wrk_high
 405 1856 465F      	    subi wrk_low, -10     
 406 1858 00F0      	    brcs 4b
 407               	
 408 185a 405D      	    subi wrk_low, -'0'
 409 185c 4193      	    st Z+, wrk_low
 410               	
 411               	; append \0
 412 185e 4427      	    clr wrk_low
 413 1860 4193      	    st Z+, wrk_low
 414               	
 415 1862 6A93 7A93 	    pspush nos_low, nos_high
 416 1866 00C0      	    POON
 417               	
 147               	
 148               	;----------------------------------------------------------------------
 149               	.p2align 1, 0x00
 150               	#include "interpreter.S"
   1               	 
   2               	/* 
   3               	 *  DISCLAIMER" 
   4               	 * 
   5               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos, 
   6               	 * 
   7               	 *  Permission is hereby granted, free of charge, to any person obtaining 
   8               	 *  a copy of this software and associated documentation files (the 
   9               	 *  "Software"), to deal in the Software without restriction, including 
  10               	 *  without limitation the rights to use, copy, modify, merge, publish, 
  11               	 *  distribute, sublicense, and/or sell copies of the Software, and to 
  12               	 *  permit persons to whom the Software is furnished to do so, subject to 
  13               	 *  the following conditions" 
  14               	 * 
  15               	 *  The above copyright notice and this permission notice shall be 
  16               	 *  included in all copies or substantial portions of the Software. 
  17               	 * 
  18               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
  19               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
  20               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
  21               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE 
  22               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION 
  23               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION 
  24               	 * 
  25               	 */ 
  26               	 
  27               	;---------------------------------------------------------------------- 
  28               	; 
  29               	; minimal interpreter, aka sector forth 
  30               	; inside routines, not for user 
  31               	; 
  32               	;---------------------------------------------------------------------- 
  33               	 
  34               	/* 
  35               	;---------------------------------------------------------------------- 
  36               	; 
  37               	; ok ( a1 c --- a2 | 0 ) internal 
  38               	;   skips chars in address while not equal to c or 0x0 
  39               	;   not standart, 0x0 ends buffer, works only in sram 
  40               	; 
  41               	HEADER "(skip)", "skip" 
  42               	    NOOP 
  43               	    clr tos_high 
  44               	    pspull zpm_low, zpm_high 
  45               	1: 
  46               	    ld nos_low, Z 
  47               	    ; if \0 
  48               	    cp tos_high, nos_low 
  49               	    breq 2f 
  50               	    ; if c 
  51               	    cp tos_low, nos_low 
  52               	    breq 3f 
  53               	    adiw zpm_low, 1 
  54               	    rjmp 1b 
  55               	2: 
  56               	    clr zpm_low 
  57               	    clr zpm_high 
  58               	3: 
  59               	    movw tos_low, zpm_low 
  60               	    POON 
  61               	 
  62               	;---------------------------------------------------------------------- 
  63               	; 
  64               	; ok ( a1 c --- a2 | 0 ) internal 
  65               	;   scan chars in address while equal to c or 0x0 
  66               	;   not standart, 0x0 ends buffer 
  67               	;   works only in sram 
  68               	; 
  69               	HEADER "(scan)", "scan" 
  70               	    NOOP 
  71               	    clr tos_high 
  72               	    pspull zpm_low, zpm_high 
  73               	1: 
  74               	    ld nos_low, Z 
  75               	    ; if \0 
  76               	    cp tos_high, nos_low 
  77               	    breq 2f 
  78               	    ; if c 
  79               	    cp tos_low, nos_low 
  80               	    brne 3f 
  81               	    adiw zpm_low, 1 
  82               	    rjmp 1b 
  83               	2: 
  84               	    clr zpm_low 
  85               	    clr zpm_high 
  86               	3: 
  87               	    movw tos_low, zpm_low 
  88               	    POON 
  89               	 
  90               	;---------------------------------------------------------------------- 
  91               	; 
  92               	; ok ( a1 a2 u --- ) internal 
  93               	;   compare u chars from a1 to a2, 
  94               	;   not standart, max 255, no check for overlaps, works only in sram 
  95               	; 
  96               	HEADER "(same)", "same" 
  97               	    NOOP 
  98               	    clr tos_high 
  99               	    pspull nos_low, nos_high 
 100               	    pspull zpm_low, zpm_high 
 101               	 
 102               	    rspush psp_low, psp_high 
 103               	    movw psp_low, nos_low 
 104               	10: 
 105               	    or tos_low, tos_low 
 106               	    breq 20f 
 107               	    dec tos_low 
 108               	 
 109               	    ld wrk_low, Z+ 
 110               	    ld wrk_high, Y+ 
 111               	    cp wrk_low, wrk_high 
 112               	    breq 10b 
 113               	 
 114               	    clr tos_low 
 115               	    rjmp 30f 
 116               	20: 
 117               	    ser tos_low 
 118               	    ser tos_high 
 119               	30: 
 120               	    POON 
 121               	 
 122               	*/ 
 123               	 
 124               	;---------------------------------------------------------------------- 
 125               	; 
 126               	; ok ( a1 a2 u --- a3 ) internal 
 127               	;   copy u chars from a1 into a2, forward copy, a3 = a1+u+1 
 128               	;   not standart, max 255, no check for overlaps, works only in sram 
 129               	; 
 130 1868 0000 0628 	HEADER "(copy)", "copy" 
 130      636F 7079 
 130      2920 
 131 1872 0000      	    NOOP 
 132 1874 9927      	    clr tos_high 
 133 1876 7991 6991 	    pspull nos_low, nos_high 
 134 187a F991 E991 	    pspull zpm_low, zpm_high 
 135               	 
 136 187e CE93 DE93 	    rspush psp_low, psp_high 
 137 1882 EB01      	    movw psp_low, nos_low 
 138               	10: 
 139 1884 8817      	    cp tos_low, tos_low 
 140 1886 01F0      	    brbs BIT_ZERO, 20f 
 141               	 
 142 1888 6191      	    ld nos_low, Z+ 
 143 188a 6993      	    st Y+, nos_low 
 144 188c 8A95      	    dec tos_low 
 145 188e 00C0      	    rjmp 10b 
 146               	20: 
 147 1890 DD91 CD91 	    rspull psp_low, psp_high 
 148 1894 CF01      	    movw tos_low, zpm_low 
 149 1896 00C0      	    POON 
 150               	 
 151               	;---------------------------------------------------------------------- 
 152               	; 
 153               	; ok ( a u --- u ) 
 154               	; 
 155               	;   refills address till u chars read, u < 256 
 156               	;     not standart: 
 157               	;     always read from USART 
 158               	;     only \n \r \b, all other control turns into space 
 159               	;     appends a bl at init and a bl at end 
 160               	; 
 161 1898 0000 0828 	HEADER "(refill)", "refill" 
 161      7265 6669 
 161      6C6C 2920 
 162 18a4 0000      	    NOOP 
 163               	10: 
 164               	    ; get buffer pointer 
 165 18a6 F991 E991 	    pspull zpm_low, zpm_high 
 166               	 
 167               	    ; keep a spc at start, so every word starts with spc, 
 168               	    ; used later to make a counted string 
 169               	 
 170               	    ; save for BL at end 
 171 18aa 8A95      	    dec tos_low 
 172               	 
 173               	    ; save for BL at init 
 174 18ac 8A95      	    dec tos_low 
 175               	 
 176               	    ; place a BL at init 
 177 18ae 40E2      	    ldi wrk_low, 32 
 178 18b0 4193      	    srsave wrk_low 
 179               	 
 180               	    ; clear count 
 181 18b2 9927      	    clr tos_high 
 182               	 
 183               	    ; clear last char 
 184 18b4 5527      	    clr wrk_high 
 185               	 
 186               	;   loop counts from 0 to u 
 187               	20: 
 188               	    ; end of buffer ? 
 189 18b6 8917      	    cp tos_low, tos_high 
 190 18b8 01F0      	    brbs BIT_ZERO, 70f 
 191               	 
 192               	;   getch 
 193               	30: 
 194               	1: 
 195               	    ; waits to receive 
 196 18ba 5F9B      	    sbis 0xb, 7 
 197 18bc 00C0      	    rjmp 1b 
 198               	 
 199               	    ; receive a char 
 200 18be 4CB1      	    in wrk_low, 0xc 
 201               	 
 202               	    ; no 8bits 
 203 18c0 4038      	    cpi wrk_low, 128 
 204 18c2 04F4      	    brge 1b 
 205               	 
 206               	    ; need echo ? 
 207               	2: 
 208               	    ; wait to send 
 209 18c4 5D9B      	    sbis 0x0b, 5 
 210 18c6 00C0      	    rjmp 2b 
 211               	 
 212               	    ; send a char 
 213 18c8 4CB9      	    out 0x0c, wrk_low 
 214               	 
 215               	; process allowed control 
 216               	 
 217               	    ; not a control 
 218 18ca 4E31      	    cpi wrk_low, 30 
 219 18cc 04F4      	    brge 60f 
 220               	 
 221               	40: 
 222               	    ; verify CR \r 
 223 18ce 4D30      	    cpi wrk_low, 13 ; CR 
 224 18d0 01F0      	    breq 70f 
 225               	 
 226               	    ; verify LF \n 
 227 18d2 4A30      	    cpi wrk_low, 10 ; LF 
 228 18d4 01F0      	    breq 70f 
 229               	 
 230               	44: 
 231               	    ; verify BS \b 
 232 18d6 4830      	    cpi wrk_low, 8 ; BS 
 233 18d8 01F4      	    brne 50f 
 234               	 
 235               	    ; process BS 
 236               	    ; no char ? 
 237 18da 9917      	    cp tos_high, tos_high 
 238 18dc 01F0      	    brbs BIT_ZERO, 30b 
 239               	 
 240               	    ; back one 
 241 18de 9A95      	    dec tos_high 
 242 18e0 3197      	    sbiw zpm_low, 1 
 243 18e2 00C0      	    rjmp 30b 
 244               	 
 245               	50: 
 246               	    ; not allow more controls 
 247               	    ; magic to 32 
 248 18e4 40E2      	    ldi wrk_low, 32 
 249               	 
 250               	; process ASCII chars 
 251               	60: 
 252               	    ; is a spc ? 
 253 18e6 4032      	    cpi wrk_low, 32 
 254 18e8 01F4      	    brne 62f 
 255               	 
 256               	    ; highlander it ! 
 257               	    ; ( collapse spaces ) 
 258 18ea 4517      	    cp wrk_low, wrk_high 
 259 18ec 01F0      	    breq 30b 
 260               	 
 261               	62: 
 262               	.ifdef UPPERCASE 
 263               	    ; to uppercase 
 264               	    cpi wrk_low, 61 
 265               	    brge 64f 
 266               	    cpi wrk_low, 123 
 267               	    brge 64f 
 268               	    subi wrk_low, 32 
 269               	.endif 
 270               	 
 271               	64: 
 272               	    ; save char to buffer 
 273 18ee 9395      	    inc tos_high 
 274 18f0 4193      	    srsave wrk_low 
 275 18f2 542F      	    mov wrk_high, wrk_low 
 276 18f4 00C0      	    rjmp 20b 
 277               	 
 278               	70: 
 279               	    ; push counter 
 280               	    ; place a BL at end 
 281 18f6 40E2      	    ldi wrk_low, 32 
 282 18f8 4193      	    srsave wrk_low 
 283               	 
 284               	    ; save counter 
 285 18fa 892F      	    mov tos_low, tos_high 
 286 18fc 9927      	    clr tos_high 
 287 18fe 00C0      	    POON 
 288               	 
 289               	;---------------------------------------------------------------------- 
 290               	; 
 291               	; ok ( a c --- a u | 0 ) 
 292               	;    find a for c 
 293               	;    returns address and u lenght or zero if no c or \0 
 294               	;    max lenght is 255 bytes 
 295               	; 
 296 1900 0000 0728 	HEADER "(parse)", "parse" 
 296      7061 7273 
 296      6529 
 297 190a 0000      	    NOOP 
 298               	    ; start at 
 299 190c F991 E991 	    pspull zpm_low, zpm_high 
 300               	    ; for \0 check 
 301 1910 9927      	    clr tos_high 
 302 1912 00C0      	    rjmp _tows; 
 303               	 
 304               	;---------------------------------------------------------------------- 
 305               	; 
 306               	; ok ( a c --- a u | 0 ) 
 307               	;    find a word delimited by c 
 308               	;    returns address and u lenght or zero if no c or \0 
 309               	;    max lenght is 255 bytes 
 310               	; 
 311 1914 0000 0628 	HEADER "(word)", "word" 
 311      776F 7264 
 311      2920 
 312 191e 0000      	    NOOP 
 313               	    ; start at 
 314 1920 F991 E991 	    pspull zpm_low, zpm_high 
 315               	    ; for \0 check 
 316 1924 9927      	    clr tos_high 
 317 1926 00C0      	    rjmp _wsto 
 318               	 
 319               	;---------------------------------------------------------------------- 
 320               	; 
 321               	;   pass trhu 
 322               	; 
 323               	_wsto: 
 324               	1: 
 325               	    ; skips while equal delimiter 
 326 1928 6081      	    ld nos_low, Z 
 327               	    ; if \0 
 328 192a 9617      	    cp tos_high, nos_low 
 329 192c 01F0      	    breq 10f 
 330 192e 8617      	    cp tos_low, nos_low 
 331 1930 01F4      	    brne 2f 
 332 1932 3196      	    adiw zpm_low, 1 
 333 1934 00C0      	    rjmp 1b 
 334               	 
 335               	_tows: 
 336               	2: 
 337               	    ; keep address 
 338 1936 AF01      	    movw wrk_low, zpm_low 
 339               	 
 340               	3: 
 341               	    ; scans while not equal delimiter 
 342 1938 6081      	    ld nos_low, Z 
 343               	    ; if \0 
 344 193a 9617      	    cp tos_high, nos_low 
 345 193c 01F0      	    breq 10f 
 346 193e 8617      	    cp tos_low, nos_low 
 347 1940 01F0      	    breq 4f 
 348 1942 3196      	    adiw zpm_low, 1 
 349 1944 00C0      	    rjmp 3b 
 350               	 
 351               	_wsat: 
 352               	4: 
 353               	    ; found 
 354 1946 E41B      	    sub zpm_low, wrk_low 
 355 1948 F50B      	    sbc zpm_high, wrk_high 
 356 194a 4A93 5A93 	    pspush wrk_low, wrk_high 
 357 194e CF01      	    movw tos_low, zpm_low 
 358 1950 00C0      	    rjmp 20f 
 359               	15: 
 360               	    ; end of buffer 
 361 1952 8827      	    clr tos_low 
 362 1954 9927      	    clr tos_high 
 363               	20: 
 364 1956 00C0      	    POON 
 365               	 
 366               	;---------------------------------------------------------------------- 
 367               	; 
 368               	;   not official ! (ud1 c-addr1 u1 -- ud2 c-addr2 u2) 
 369               	; 
 370               	;    ok ( a n -- u2 true | false ) 
 371               	;    assumes address n chars 
 372               	;    f flag is (Out-of-Range, Not-a-Number, Invalid-Number,) FALSE or TRUE 
 373               	;    uses all but X, Y 
 374               	;    tos, nos, wrk, Z, _zero_, _work_, r0, r1 
 375               	; 
 376 1958 0000 0828 	HEADER "(number)", "number" 
 376      6E75 6D62 
 376      6572 2920 
 377 1964 0000      	    NOOP 
 378               	 
 379               	    ; tst for c < 1 
 380               	 
 381 1966 9927      	    clr tos_high 
 382 1968 9817      	    cp tos_high, tos_low 
 383 196a 04F0      	    brlt 10f 
 384               	 
 385               	    ; not valid size c < 1 
 386 196c 8A93 9A93 	    pspush tos_low, tos_high 
 387 1970 00C0      	    rjmp 70f 
 388               	 
 389               	10: 
 390               	    ; pull address from 
 391 1972 F991 E991 	    pspull zpm_low, zpm_high 
 392               	 
 393               	    ; keep counter 
 394 1976 BC01      	    movw nos_low, tos_low 
 395               	 
 396               	    ; clear result 
 397 1978 8827      	    clr tos_low 
 398 197a 9927      	    clr tos_high 
 399               	 
 400               	    ; get actual base 
 401 197c 7090 0000 	    lds _work_, BASE+0 
 402               	 
 403               	20: 
 404               	    ; test end of loop 
 405 1980 6717      	    cp nos_low, nos_high 
 406 1982 01F4      	    brne 30f 
 407 1984 00C0      	    rjmp 80f 
 408               	 
 409               	30: 
 410               	    ; load a char 
 411 1986 4191      	    srload wrk_low 
 412               	 
 413               	    ; allow first char change base 
 414 1988 7723      	    tst nos_high 
 415 198a 01F4      	    brne 40f 
 416               	 
 417               	    ; goes hexadecimal 
 418 198c 4432      	    cpi wrk_low, '$' 
 419 198e 01F4      	    brne 32f 
 420 1990 40E1      	    ldi wrk_low, 16 
 421 1992 742E      	    mov _work_, wrk_low 
 422 1994 00C0      	    rjmp 20b 
 423               	 
 424               	32: 
 425               	    ; goes decimal 
 426 1996 4332      	    cpi wrk_low, '#' 
 427 1998 01F4      	    brne 34f 
 428 199a 4AE0      	    ldi wrk_low, 10 
 429 199c 742E      	    mov _work_, wrk_low 
 430 199e 00C0      	    rjmp 20b 
 431               	 
 432               	34: 
 433               	    ; goes binary 
 434 19a0 4532      	    cpi wrk_low, '%' 
 435 19a2 01F4      	    brne 36f 
 436 19a4 42E0      	    ldi wrk_low, 2 
 437 19a6 742E      	    mov _work_, wrk_low 
 438 19a8 00C0      	    rjmp 20b 
 439               	 
 440               	36: 
 441               	    ; how do negative ? just two-complement at end 
 442 19aa 4D32      	    cpi wrk_low, '-' 
 443 19ac 01F4      	    brne 38f 
 444 19ae 51E0      	    ldi wrk_high, 1 
 445 19b0 7A95      	    dec nos_high 
 446 19b2 00C0      	    rjmp 20b 
 447               	 
 448               	38: 
 449               	    ; how do positive ? just no two-complement at end 
 450 19b4 4B32      	    cpi wrk_low, '+' 
 451 19b6 01F4      	    brne 40f 
 452 19b8 50E0      	    ldi wrk_high, 0 
 453 19ba 7A95      	    dec nos_high 
 454 19bc 00C0      	    rjmp 20b 
 455               	 
 456               	38: 
 457               	    ; no more bases, no octal, no duodecimal, no hexagesimal 
 458               	 
 459               	40: 
 460               	    ; paranoic test end 
 461               	 
 462 19be 4030      	    cpi wrk_low, 0 
 463 19c0 01F0      	    breq 80f 
 464               	 
 465 19c2 4032      	    cpi wrk_low, 32 
 466 19c4 01F0      	    breq 80f 
 467               	 
 468               	    ; mask lowercases 
 469 19c6 4136      	    cpi wrk_low, 'a' 
 470 19c8 04F0      	    brlt 45f 
 471 19ca 4052      	    subi wrk_low, 32 
 472               	 
 473               	45: 
 474               	    ; reduce 
 475 19cc 4053      	    subi wrk_low, '0' 
 476               	 
 477               	    ; less than 0 ? 
 478 19ce 4030      	    cpi wrk_low, 0 
 479 19d0 04F0      	    brlt 70f 
 480               	 
 481               	    ; less than 9 ? 
 482 19d2 4A30      	    cpi wrk_low, 10 
 483 19d4 04F0      	    brlt 50f 
 484               	 
 485               	    ; mind the gap 0-9 ~ A-F 
 486 19d6 4750      	    subi wrk_low, 7 
 487               	 
 488               	50: 
 489               	    ; over base ? 
 490 19d8 4715      	    cp wrk_low, _work_ 
 491 19da 04F4      	    brge 70f 
 492               	 
 493               	; easy way 
 494               	; bases 2, 8, 10, 16 
 495               	 
 496 19dc 840F      	    add tos_low, wrk_low 
 497 19de 961D      	    adc tos_high, _zero_ 
 498               	 
 499               	    ; set value 
 500 19e0 0C01      	    movw R0, tos_low 
 501               	 
 502               	    ; set base 
 503 19e2 4715      	    cp wrk_low, _work_ 
 504               	 
 505               	; 2 
 506               	_bin_base: 
 507 19e4 000C      	    lsl R0 
 508 19e6 111C      	    rol R1 
 509 19e8 4230      	    cpi wrk_low, 2 
 510 19ea 01F0      	    breq _next_digit 
 511               	 
 512               	    ; keep for decimal or odds 
 513 19ec C001      	    movw tos_low, R0 
 514               	 
 515               	; 4 
 516               	_nib_base: 
 517 19ee 000C      	    lsl R0 
 518 19f0 111C      	    rol R1 
 519               	    ; cpi wrk_low, 4 
 520               	    ; breq _next_digit 
 521               	 
 522               	; 8 
 523               	_oct_base: 
 524 19f2 000C      	    lsl R0 
 525 19f4 111C      	    rol R1 
 526               	    ; cpi wrk_low, 8 
 527               	    ; breq _next_digit 
 528               	 
 529               	;10 
 530               	_dec_base: 
 531 19f6 4A30      	    cpi wrk_low, 10 
 532 19f8 01F4      	    brne _hex_base 
 533               	 
 534 19fa 080E      	    add R0, tos_low 
 535 19fc 191E      	    adc R1, tos_high 
 536 19fe 00C0      	    rjmp _next_digit 
 537               	 
 538               	; 16 
 539               	_hex_base: 
 540 1a00 000C      	    lsl R0 
 541 1a02 111C      	    rol R1 
 542 1a04 4031      	    cpi wrk_low, 16 
 543 1a06 01F0      	    breq _next_digit 
 544               	 
 545               	_next_digit: 
 546               	; overflow ? 
 547 1a08 00F4      	    brcc _next_digit 
 548 1a0a 00C0      	    rjmp 70f 
 549               	 
 550               	; next digit 
 551 1a0c C001      	    movw tos_low, R0 
 552               	 
 553               	60: 
 554               	    ; count digits 
 555 1a0e 7395      	    inc nos_high 
 556               	 
 557               	    ; next digit 
 558 1a10 00C0      	    rjmp 10b 
 559               	 
 560               	70: 
 561               	    ; (Underflow, Overflow, Not_a_Number, Out_of_Range, Invalid_numeric_Argument) 
 562 1a12 4427      	    clr wrk_low 
 563 1a14 5527      	    clr wrk_high 
 564 1a16 00C0      	    rjmp 100f 
 565               	 
 566               	80: 
 567               	    ; if positive 
 568 1a18 5030      	    cpi wrk_high, 0 
 569 1a1a 01F0      	    breq 90f 
 570               	 
 571               	    ; 2's complement 
 572 1a1c 8095      	    com tos_low 
 573 1a1e 9095      	    com tos_high 
 574 1a20 0196      	    adiw tos_low, 1 
 575               	 
 576               	    ; underflow 
 577 1a22 00F0      	    brcs 70b 
 578               	 
 579               	90: 
 580               	    ; push result 
 581 1a24 8A93 9A93 	    pspush tos_low, tos_high 
 582               	 
 583               	    ; made true 
 584 1a28 4FEF      	    ser wrk_low 
 585 1a2a 5FEF      	    ser wrk_high 
 586               	 
 587               	100: 
 588               	    ; push digits 
 589 1a2c CA01      	    movw tos_low, wrk_low 
 590 1a2e 00C0      	    POON 
 591               	 
 592               	;---------------------------------------------------------------------- 
 593               	; 
 594               	; ok find a word in a vocabulary 
 595               	;   ( aw u ad -- xt f | a 0 ) 
 596               	;    ad link to dictionary 
 597               	;    aw address to word 
 598               	;    u  length 
 599               	;   f is  1 if word is immediate 
 600               	;   f is -1 if word is normal 
 601               	;   f is  0 if word not found 
 602               	;   names are 15 maximum 
 603               	; 
 604               	;   dictionary is in flash and word is in sram 
 605               	; 
 606 1a30 0000 0628 	HEADER "(find)", "find" 
 606      6669 6E64 
 606      2920 
 607 1a3a 0000      	    NOOP 
 608               	 
 609               	    ; load address dictionary 
 610 1a3c FC01      	    movw zpm_low, tos_low 
 611               	 
 612               	    ; load counter 
 613 1a3e 9991 8991 	    pspull tos_low, tos_high 
 614               	 
 615               	    ; load address word 
 616 1a42 7991 6991 	    pspull nos_low, nos_high 
 617               	 
 618               	    ; save stack 
 619 1a46 CE93 DE93 	    rspush psp_low, psp_high 
 620               	 
 621               	    ; save address word 
 622 1a4a 6E93 7E93 	    rspush nos_low, nos_high 
 623               	 
 624               	    ; move address to Y ! always check in macros.S 
 625 1a4e EB01      	    movw psp_low, nos_low 
 626               	 
 627               	    ; prepare loop 
 628               	 
 629               	    ; save word count 
 630 1a50 982F      	    mov tos_high, tos_low 
 631               	 
 632               	    ; push aword for first loop 
 633 1a52 CE93 DE93 	    rspush psp_low, psp_high 
 634               	 
 635               	    ; push alist for first loop 
 636 1a56 EE93 FE93 	    rspush zpm_low, zpm_high 
 637               	 
 638               	10: 
 639               	    ; load link 
 640 1a5a FD91 ED91 	    rspull zpm_low, zpm_high 
 641               	 
 642               	    ; load address 
 643 1a5e EE0F FF1F 	    pmload wrk_low, wrk_high 
 643      4591 5591 
 643      F795 E795 
 644               	 
 645               	    ; if null, list ends 
 646 1a6a 4517      	    cp wrk_low, wrk_high 
 647 1a6c 01F0      	    brbs BIT_ZERO, 26f 
 648               	 
 649               	    ; save next link 
 650 1a6e 4E93 5E93 	    rspush wrk_low, wrk_high 
 651               	 
 652               	    ; load size and first char 
 653 1a72 EE0F FF1F 	    pmload nos_low, nos_high 
 653      6591 7591 
 653      F795 E795 
 654               	 
 655               	    ; save for flags 
 656 1a7e 562F      	    mov wrk_high, nos_low 
 657               	 
 658               	    ; must ummask 
 659 1a80 6F70      	    andi nos_low, F_UNMASK 
 660               	 
 661               	    ; ping-pong 
 662               	    ; verify sizes 
 663 1a82 6817      	    cp nos_low, tos_low 
 664 1a84 01F4      	    brne 10b 
 665               	 
 666               	    ; points to a1 
 667 1a86 4991      	    ld wrk_low, Y+ 
 668               	 
 669               	    ; verify first char 
 670 1a88 4717      	    cp wrk_low, nos_high 
 671 1a8a 01F4      	    brne 10b 
 672               	 
 673               	    ; prepare count down 
 674 1a8c 892F      	    mov tos_low, tos_high 
 675               	 
 676               	14: 
 677               	    ; verify next chars 
 678 1a8e 8A95      	    dec tos_low 
 679 1a90 01F0      	    brbs BIT_ZERO, 20f 
 680               	 
 681 1a92 EE0F FF1F 	    pmload nos_low, nos_high 
 681      6591 7591 
 681      F795 E795 
 682               	 
 683 1a9e 4991      	    ld wrk_low, Y+ 
 684 1aa0 4617      	    cp wrk_low, nos_low 
 685 1aa2 01F4      	    brne 10b 
 686               	 
 687 1aa4 8A95      	    dec tos_low 
 688 1aa6 01F0      	    brbs BIT_ZERO, 20f 
 689               	 
 690 1aa8 4991      	    ld wrk_low, Y+ 
 691 1aaa 4717      	    cp wrk_low, nos_high 
 692 1aac 01F4      	    brne 10b 
 693               	 
 694               	    ; next chars 
 695 1aae 00C0      	    rjmp 14b 
 696               	 
 697               	20: 
 698               	    ; found 
 699               	    ; anyway zpm is ever even 
 700               	 
 701               	    ; return flags 
 702 1ab0 5074      	    andi wrk_high, F_IMMEDIATE 
 703 1ab2 01F4      	    brne 24f 
 704               	 
 705               	22: 
 706               	    ; immediate (1) 
 707 1ab4 8827      	    clr tos_low 
 708 1ab6 9927      	    clr tos_high 
 709 1ab8 8395      	    inc tos_low 
 710 1aba 00C0      	    rjmp 30f 
 711               	24: 
 712               	    ; common (-1) 
 713 1abc 8FEF      	    ser tos_low 
 714 1abe 9FEF      	    ser tos_high 
 715 1ac0 00C0      	    rjmp 30f 
 716               	26: 
 717               	    ; not found (0) 
 718 1ac2 8827      	    clr tos_low 
 719 1ac4 8827      	    clr tos_low 
 720               	30: 
 721               	    ; drops references 
 722 1ac6 5D91 4D91 	    rspull wrk_low, wrk_high 
 723 1aca 5D91 4D91 	    rspull wrk_low, wrk_high 
 724               	 
 725               	    ; copy wt 
 726 1ace 5D91 4D91 	    rspull wrk_low, wrk_high 
 727               	 
 728 1ad2 8030      	    cpi tos_low, 0 
 729 1ad4 01F0      	    brbs BIT_ZERO, 40f 
 730               	 
 731               	    ; copy (xt) 
 732 1ad6 AF01      	    movw wrk_low, zpm_low 
 733               	 
 734               	40: 
 735               	    ; restore psp 
 736 1ad8 DD91 CD91 	    rspull psp_low, psp_high 
 737               	 
 738               	    ; push result address 
 739 1adc 4A93 5A93 	    pspush wrk_low, wrk_high 
 740               	 
 741               	    ; save results 
 742 1ae0 00C0      	    POON 
 743               	 
 744               	;********************************************************************** 
 745               	; 
 746               	; almost forth94 
 747               	; 
 748               	;---------------------------------------------------------------------- 
 749               	 
 750               	 
 751               	;---------------------------------------------------------------------- 
 752               	; 
 753               	; ok MOVE (a1 a2 u -- ) 
 754               	; 
 755 1ae2 0000 044D 	HEADER "MOVE", "MOVE", 
 755      4F56 4520 
 756 1aea 0000 0000 	1:  .word ZDUP, ZBRANCH, 2f
 756      0000 
 757 1af0 0000 0000 	    .word ONEMINUS, TOR
 758 1af4 0000 0000 	    .word OVER, AT, OVER, TO
 758      0000 0000 
 759 1afc 0000 0000 	    .word ONEPLUS, SWAP, ONEPLUS, SWAP
 759      0000 0000 
 760 1b04 0000 0000 	    .word BRANCH, 1b
 761 1b08 0000 0000 	2:  .word DROP, DROP, ENDS 
 761      0000 
 762               	 
 763               	;---------------------------------------------------------------------- 
 764               	; 
 765               	; ok FILL (a u c -- ) 
 766               	; 
 767 1b0e 0000 0446 	HEADER "FILL", "FILL", 
 767      494C 4C20 
 768 1b16 0000 0000 	    .word SWAP, TOR, SWAP
 768      0000 
 769 1b1c 0000 0000 	1:  .word RTO, ZDUP, ZBRANCH, 2f
 769      0000 0000 
 770 1b24 0000 0000 	    .word ONEMINUS, TOR
 771 1b28 0000 0000 	    .word OVER, OVER, TO, ONEPLUS 
 771      0000 0000 
 772 1b30 0000 0000 	    .word BRANCH, 1b 
 773 1b34 0000 0000 	2:  .word DROP, DROP, ENDS 
 773      0000 
 774               	 
 775               	;---------------------------------------------------------------------- 
 776               	; 
 777               	; is \] to compile 
 778               	; 
 779 1b3a 0000 015D 	HEADER "]", "RBRAC", 
 780 1b3e 0000 0000 	    .word ONE, STATE, TO, ENDS 
 780      0000 0000 
 781               	 
 782               	;---------------------------------------------------------------------- 
 783               	; 
 784               	; is \[ to interpret 
 785               	; 
 786 1b46 0000 415B 	HEADER "[", "LBRAC", F_IMMEDIATE 
 787 1b4a 0000 0000 	    .word ZERO, STATE, TO, ENDS 
 787      0000 0000 
 788               	 
 789               	;---------------------------------------------------------------------- 
 790               	; 
 791               	; is TOGGLE ( a f -- ) 
 792               	; 
 793 1b52 0000 0654 	HEADER "TOGGLE", "TOGGLE", 
 793      4F47 474C 
 793      4520 
 794 1b5c 0000 0000 	    .word OVER, AT, XOR, SWAP, TO, ENDS 
 794      0000 0000 
 794      0000 0000 
 795               	 
 796               	;---------------------------------------------------------------------- 
 797               	; 
 798               	; is >NFA ( a f -- ) 
 799               	; from link to c_name 
 800               	; 
 801 1b68 0000 043E 	HEADER ">NFA", "TONFA", 
 801      4E46 4120 
 802 1b70 0000 0000 	    .word CELL, PLUS, ENDS 
 802      0000 
 803               	 
 804               	;---------------------------------------------------------------------- 
 805               	; 
 806               	; is >CFA ( a f -- ) 
 807               	; from link to code 
 808 1b76 0000 043E 	HEADER ">CFA", "TOCFA", 
 808      4346 4120 
 809 1b7e 0000 0000 	    .word CELL, PLUS, DUP, AT, F_UNMASK, AND, PLUS, ENDS 
 809      0000 0000 
 809      0F00 0000 
 809      0000 0000 
 810               	 
 811               	;---------------------------------------------------------------------- 
 812               	; 
 813               	; is HIDDEN 
 814               	; 
 815 1b8e 0000 0648 	HEADER "HIDDEN", "HIDDEN", 
 815      4944 4445 
 815      4E20 
 816 1b98 0000 0000 	    .word LATEST, TONFA, F_HIDDEN, TOGGLE, ENDS 
 816      1000 0000 
 816      0000 
 817               	 
 818               	;---------------------------------------------------------------------- 
 819               	; 
 820               	; is IMMEDIATE 
 821               	; 
 822 1ba2 0000 0949 	HEADER "IMMEDIATE", "IMMEDIATE", 
 822      4D4D 4544 
 822      4941 5445 
 823 1bae 0000 0000 	    .word LATEST, TONFA, F_IMMEDIATE, TOGGLE, ENDS 
 823      4000 0000 
 823      0000 
 824               	 
 825               	;---------------------------------------------------------------------- 
 826               	; 
 827               	; is COMP_ONLY 
 828               	; 
 829 1bb8 0000 0C43 	HEADER "COMPILE_ONLY", "COMPILE_ONLY", 
 829      4F4D 5049 
 829      4C45 5F4F 
 829      4E4C 5920 
 830 1bc8 0000 0000 	    .word LATEST, TONFA, F_COMPILE, TOGGLE, ENDS 
 830      2000 0000 
 830      0000 
 831               	 
 832               	;---------------------------------------------------------------------- 
 833               	; 
 834               	; is HANDLER 
 835               	; 
 836 1bd2 0000 0748 	HEADER "HANDLER", "HANDLER", 
 836      414E 444C 
 836      4552 
 837 1bdc 0000 0000 	    .word LIT, HANDLERS, ENDS 
 837      0000 
 838               	 
 839 1be2 0000      	HANDLERS:   .word 0     ; hold for catch//throw 
 840               	 
 841               	;---------------------------------------------------------------------- 
 842               	; 
 843               	; is CATCH 
 844               	; 
 845 1be4 0000 0543 	HEADER "CATCH", "CATCH", 
 845      4154 4348 
 846 1bec 0000 0000 	    .word PSAT, TOR, HANDLER, AT, TOR, RSAT, HANDLER, TO 
 846      0000 0000 
 846      0000 0000 
 846      0000 0000 
 847 1bfc 0000 0000 	    .word EXEC, RTO, HANDLER, TO, RTO, DROP, LIT, 0 
 847      0000 0000 
 847      0000 0000 
 847      0000 0000 
 848 1c0c 0000      	    .word ENDS 
 849               	 
 850               	;---------------------------------------------------------------------- 
 851               	; 
 852               	; is THROW 
 853               	; 
 854 1c0e 0000 0554 	HEADER "THROW", "THROW", 
 854      4852 4F57 
 855 1c16 0000 0000 	    .word ZDUP, ZBRANCH, 1f 
 855      0000 
 856 1c1c 0000 0000 	    .word HANDLER, AT, RSTO, RTO, HANDLER, TO 
 856      0000 0000 
 856      0000 0000 
 857 1c28 0000 0000 	    .word RTO, SWAP, TOR, PSTO, DROP, RTO 
 857      0000 0000 
 857      0000 0000 
 858 1c34 0000      	1:  .word ENDS 
 859               	 
 860               	;---------------------------------------------------------------------- 
 861               	; 
 862               	; is SPACE ( -- )
 863               	; 
 864 1c36 0000 0553 	HEADER "SPACE", "SPACE" 
 864      5041 4345 
 865 1c3e 0000 0000 	    .word BL, ENDS 
 866               	 
 867               	;---------------------------------------------------------------------- 
 868               	; 
 869               	; is SPACES ( n -- )
 870               	; 
 871 1c42 0000 0653 	HEADER "SPACES", "SPACES" 
 871      5041 4345 
 871      5320 
 872 1c4c 0000 0000 	1:  .word ZDUP, ZBRANCH, 2f
 872      0000 
 873 1c52 0000 0000 	    .word SPACE, ONEMINUS, BRANCH, 1b
 873      0000 0000 
 874 1c5a 0000      	2:  .word ENDS 
 875               	 
 876               	;---------------------------------------------------------------------- 
 877               	; 
 878               	; is THROW 
 879               	; 
 880 1c5c 0000 0541 	HEADER "ABORT", "ABORT" 
 880      424F 5254 
 881 1c64 0000 FFFF 	    .word LIT, -1, THROW, ENDS 
 881      0000 0000 
 882               	 
 883               	;---------------------------------------------------------------------- 
 884               	; 
 885               	; is ACCEPT is a refill with edit capabilities 
 886               	; 
 887 1c6c 0000 0641 	HEADER "ACCEPT", "ACCEPT", 
 887      4343 4550 
 887      5420 
 888 1c76 0000 0000 	    .word ZZZZ, ENDS 
 889               	 
 890               	;---------------------------------------------------------------------- 
 891               	; 
 892               	; is 
 893               	; 
 894 1c7a 0000 054F 	HEADER "OVERT", "OVERT", 
 894      5645 5254 
 895               	    ;.word LATEST, AT, CURRENT, AT, TO, ENDS 
 896 1c82 0000 0000 	    .word ZZZZ, ENDS 
 897               	 
 898               	;---------------------------------------------------------------------- 
 899               	; 
 900               	; is 
 901               	; 
 902 1c86 0000 413A 	HEADER ":", "COLON", F_IMMEDIATE 
 903 1c8a 0000 0000 	    .word CREATE, RBRAC, ENDS 
 903      0000 
 904               	 
 905               	;---------------------------------------------------------------------- 
 906               	; 
 907               	; is 
 908               	; 
 909 1c90 0000 013B 	HEADER ";", "SEMMI", 
 910 1c94 0000 0000 	    .word EXIT, LBRAC, OVERT, ENDS 
 910      0000 0000 
 911               	 
 912               	;---------------------------------------------------------------------- 
 913               	; 
 914               	; is SOURCE 
 915               	;   place terminal buffer address and length in stack 
 916               	; 
 917 1c9c 0000 0653 	HEADER "SOURCE", "SOURCE", 
 917      4F55 5243 
 917      4520 
 918 1ca6 0000 0000 	    .word LIT, TIB0, LIT, TIB_SIZE 
 918      0000 4800 
 919               	;   no standart: also place a \0 at end :) 
 920 1cae 0000 0000 	    .word OVER, OVER, PLUS, LIT, ZERO, SWAP, TO, ONE, MINUS 
 920      0000 0000 
 920      0000 0000 
 920      0000 0000 
 920      0000 
 921 1cc0 0000      	    .word ENDS 
 922               	 
 923               	;---------------------------------------------------------------------- 
 924               	; 
 925               	; is SOURCE 
 926               	;   place terminal buffer address and length in stack 
 927               	; 
 928 1cc2 0000 0753 	HEADER "SOURCE+", "SOURCEPLUS", 
 928      4F55 5243 
 928      452B 
 929 1ccc 0000 0000 	    .word SOURCE, DROP, TOIN, PLUS, ENDS 
 929      0000 0000 
 929      0000 
 930               	 
 931               	;---------------------------------------------------------------------- 
 932               	; 
 933               	; is  REFILL ( -- a n ), toin = 0 
 934               	; 
 935 1cd6 0000 0652 	HEADER "REFILL", "REFILL", 
 935      4546 494C 
 935      4C20 
 936 1ce0 0000 0000 	    .word SOURCE, refill, ZERO, TOIN, TO, ENDS 
 936      0000 0000 
 936      0000 0000 
 937               	 
 938               	;---------------------------------------------------------------------- 
 939               	; 
 940               	; is PARSE ( "<chars>ccc" c -- a n ) 
 941               	;   no counted-string 
 942               	; 
 943 1cec 0000 0550 	HEADER "PARSE", "PARSE" 
 943      4152 5345 
 944 1cf4 0000 0000 	    .word SOURCEPLUS, SWAP 
 945 1cf8 0000 0000 	    .word parse, ZDUP, ZBRANCH, 2f 
 945      0000 0000 
 946 1d00 0000 0000 	    .word DUP, TOIN, PLUSTO, ENDS 
 946      0000 0000 
 947 1d08 0000 0000 	2:  .word REFILL, BRANCH, PARSE ; perfect loop 
 947      0000 
 948               	 
 949               	;---------------------------------------------------------------------- 
 950               	; 
 951               	; is PAREN ( "<chars>ccc" c -- ) also comments
 952               	; 
 953 1d0e 0000 4128 	HEADER "(", "PAREN", F_IMMEDIATE 
 954 1d12 0000 2900 	    .word LIT, ')', PARSE, DROP, DROP, ENDS ; F_IMMEDIATE 
 954      0000 0000 
 954      0000 0000 
 955               	
 956               	;---------------------------------------------------------------------- 
 957               	; 
 958               	; is DOTPAREN .( "<chars>ccc" c -- a n ) also types
 959               	;   not standart, no multi-task support
 960               	;
 961 1d1e 0000 022E 	HEADER ".(", "DOTPAREN" 
 961      2820 
 962 1d24 0000 2900 	    .word LIT, ')', PARSE, ENDS ;
 962      0000 0000 
 963               	
 964               	;---------------------------------------------------------------------- 
 965               	; 
 966               	; is SQUOTE S\" ( "<chars>ccc" c -- a n )
 967               	;   not standart, no multi-task support
 968               	;
 969 1d2c 0000 0253 	HEADER "S\"", "SQUOTE" 
 969      2220 
 970 1d32 0000 2200 	    .word LIT, '\"', PARSE, ENDS ;
 970      0000 0000 
 971               	
 972               	;---------------------------------------------------------------------- 
 973               	; 
 974               	; is DOTQUOTE .\" ( "<chars>ccc" c -- a n )
 975               	;   not standart, no multi-task support
 976               	;
 977 1d3a 0000 022E 	HEADER ".\"", "DOTQUOTE" 
 977      2220 
 978 1d40 0000 0000 	    .word SQUOTE, TYPE, ENDS ;
 978      0000 
 979               	
 980               	;---------------------------------------------------------------------- 
 981               	;---------------------------------------------------------------------- 
 982               	; 
 983               	; is  PARSE-NAME ( "ccc<chars>ccc" c -- a n ), toin = 0 
 984               	;   no counted-string 
 985               	; 
 986 1d46 0000 0A50 	HEADER "PARSE-NAME", "PARSEN", 
 986      4152 5345 
 986      2D4E 414D 
 986      4520 
 987 1d54 0000 0000 	    .word SOURCEPLUS, SWAP 
 988 1d58 0000 0000 	    .word word, ZDUP, ZBRANCH, 2f 
 988      0000 0000 
 989 1d60 0000 0000 	    .word DUP, TOIN, PLUSTO, ENDS 
 989      0000 0000 
 990 1d68 0000 0000 	2:  .word REFILL, BRANCH, PARSEN  ; perfect loop 
 990      0000 
 991               	 
 992               	;---------------------------------------------------------------------- 
 993               	; 
 994               	; is FIND-NAME ( a n -- a 0 | xt -1 | xt 1 ) 
 995               	;   no counted-string 
 996               	;   no vocabularies 
 997               	; 
 998 1d6e 0000 0946 	HEADER "FIND-NAME", "FINDN", 
 998      494E 442D 
 998      4E41 4D45 
 999 1d7a 0000 0000 	    .word LATEST, AT, find, ENDS 
 999      0000 0000 
 1000               	 
 1001               	;---------------------------------------------------------------------- 
 1002               	; 
 1003               	; is FIND ( "ccc<chars>ccc" -- a 0 | xt -1 | xt 1 ) 
 1004               	; 
 1005 1d82 0000 0446 	HEADER "FIND", "FIND", 
 1005      494E 4420 
 1006 1d8a 0000 0000 	    .word PARSEN, FINDN
 1007 1d8e 0000 0000 	    .word ZBRANCH, ABORT 
 1008 1d92 0000 0000 	    .word DROP, ENDS 
 1009               	 
 1010               	;---------------------------------------------------------------------- 
 1011               	; 
 1012               	; is  NONAME ( "" ), toin = 0 
 1013               	; 
 1014 1d96 0000 064E 	HEADER "NONAME", "NONAME", 
 1014      4F4E 414D 
 1014      4520 
 1015 1da0 0000 0000 	    .word ZZZZ, ENDS 
 1016               	 
 1017               	;---------------------------------------------------------------------- 
 1018               	; 
 1019               	; is CREATE ( "ccc<str>ccc" -- xt ) 
 1020               	; parse next word and compile a header 
 1021               	; 
 1022 1da4 0000 0643 	HEADER "CREATE", "CREATE", 
 1022      5245 4154 
 1022      4520 
 1023 1dae 0000 0000 	    .word PARSEN, LIT, UH0 
 1023      0000 
 1024 1db4 0000 0000 	    .word DUP, LATEST, AT, SWAP, TO, CELLPLUS 
 1024      0000 0000 
 1024      0000 0000 
 1025 1dc0 0000 0000 	    .word OVER, OVER, TO, ONEPLUS, SWAP, DUP 
 1025      0000 0000 
 1025      0000 0000 
 1026 1dcc 0000 0000 	    .word TOR, copy, RTO 
 1026      0000 
 1027 1dd2 0000 0000 	    .word DUP, ONE, AND, ZEQU, ZBRANCH, 2f 
 1027      0000 0000 
 1027      0000 0000 
 1028 1dde 0000 0000 	    .word DUP, BL, SWAP, TO, ONE, PLUS 
 1028      0000 0000 
 1028      0000 0000 
 1029 1dea 0000      	2:  .word ENDS 
 1030               	 
 1031               	;---------------------------------------------------------------------- 
 1032               	; zzzz
 1033               	;
 1034               	; is DOES ( xt -- ) 
 1035               	; 
 1036 1dec 0000 0444 	HEADER "DOES", "DOES", 
 1036      4F45 5320 
 1037 1df4 0000 0000 	    .word LIT, BRANCH, COMMA, HERE, COMMA, ENDS 
 1037      0000 0000 
 1037      0000 0000 
 1038               	
 1039               	;---------------------------------------------------------------------- 
 1040               	; 
 1041               	; is DOES> ( xt -- ) 
 1042               	; 
 1043 1e00 0000 4544 	HEADER "DOES>", "DOESTO", F_IMMEDIATE 
 1043      4F45 533E 
 1044 1e08 0000 0000 	    .word LIT, BRANCH, COMMA, HERE, COMMA, ENDS 
 1044      0000 0000 
 1044      0000 0000 
 1045               	
 1046               	;---------------------------------------------------------------------- 
 1047               	; 
 1048               	; is CONSTANT ( "ccc<caddr>ccc" w -- ) 
 1049               	; constants go to eeprom
 1050               	; EP points next word free
 1051               	; 
 1052               	; std: : variable create 0 , ;
 1053               	; zzzz
 1054 1e14 0000 0843 	 HEADER "CONSTANT", "CONSTANT", 
 1054      4F4E 5354 
 1054      414E 5420 
 1055 1e20 0000 0000 	    .word CREATE, EPP, AT
 1055      0000 
 1056 1e26 0000 0000 	    .word DUP, TOR, TOEE, RTO
 1056      0000 0000 
 1057 1e2e 0000 0000 	    .word DUP, CELL, PLUS, EPP, TO
 1057      0000 0000 
 1057      0000 
 1058 1e38 0000 0000 	    .word COMMA, DOESTO, ENDS 
 1058      0000 
 1059               	    
 1060               	;---------------------------------------------------------------------- 
 1061               	; 
 1062               	; is VARIABLE ( "ccc<caddr>ccc"  -- ) 
 1063               	; variables go to high adress sram
 1064               	; UP maps next word free
 1065               	;
 1066               	; std: : constant create , does> @ ;
 1067               	; zzzz
 1068 1e3e 0000 0856 	HEADER "VARIABLE", "VARIABLE", 
 1068      4152 4941 
 1068      424C 4520 
 1069 1e4a 0000 0000 	    .word CREATE, UPP, AT
 1069      0000 
 1070 1e50 0000 0000 	    .word DUP, TOR, TO, RTO
 1070      0000 0000 
 1071 1e58 0000 0000 	    .word DUP, CELL, MINUS, UPP, TO
 1071      0000 0000 
 1071      0000 
 1072 1e62 0000 0000 	    .word COMMA, DOESTO, ENDS 
 1072      0000 
 1073               	    
 1074               	;---------------------------------------------------------------------- 
 1075               	; 
 1076               	; is TICK ( "ccc<caddr>ccc" -- xt | 0 ) 
 1077               	; 
 1078 1e68 0000 0127 	HEADER "'", "TICK", 
 1079 1e6c 0000 0000 	    .word FINDN, DUP, ZEQU, ZBRANCH, 2f 
 1079      0000 0000 
 1079      0000 
 1080 1e76 0000      	    .word SWAP 
 1081 1e78 0000 0000 	2:  .word DROP, ENDS 
 1082               	 
 1083               	;---------------------------------------------------------------------- 
 1084               	; 
 1085               	; ok unconditional compile next word 
 1086               	;   no check if 0x0 zzzz 
 1087               	; 
 1088 1e7c 0000 4850 	HEADER "POSTPONE", "POSTPONE", F_IMMEDIATE, 
 1088      4F53 5450 
 1088      4F4E 4520 
 1089 1e88 0000 0000 	    .word TICK, COMMA, ENDS 
 1089      0000 
 1090               	 
 1091               	;---------------------------------------------------------------------- 
 1092               	; 
 1093               	; is 
 1094               	; 
 1095 1e8e 0000 4643 	HEADER "COMPXT", "COMPXT", F_IMMEDIATE 
 1095      4F4D 5058 
 1095      5420 
 1096 1e98 0000 0000 	    .word LIT, LIT, COMMA, COMMA, ENDS 
 1096      0000 0000 
 1096      0000 
 1097               	 
 1098               	;---------------------------------------------------------------------- 
 1099               	; 
 1100               	; is  NUMBN ( a n -- w true | a n false ) 
 1101               	; 
 1102 1ea2 0000 054E 	HEADER "NUMBN", "NUMBN", 
 1102      554D 424E 
 1103 1eaa 0000 0000 	    .word OVER, OVER, number 
 1103      0000 
 1104 1eb0 0000 0000 	    .word ZBRANCH, 2f 
 1105 1eb4 0000 0000 	    .word TOR, DROP, DROP, RTO, FTRUE, BRANCH, 4f 
 1105      0000 0000 
 1105      0000 0000 
 1105      0000 
 1106 1ec2 0000      	2:  .word FFALSE 
 1107 1ec4 0000      	4:  .word ENDS 
 1108               	 
 1109               	;---------------------------------------------------------------------- 
 1110               	; 
 1111               	; is  NONEN ( a n -- ) 
 1112               	; 
 1113 1ec6 0000 054E 	HEADER "NONEN", "NONEN", 
 1113      4F4E 454E 
 1114 1ece 0000 0000 	    .word CR, TYPE, LIT, notoky, LIT, 4, TYPE, ENDS 
 1114      0000 0000 
 1114      0000 0400 
 1114      0000 0000 
 1115               	
 1116               	;---------------------------------------------------------------------- 
 1117               	; 
 1118               	; is 
 1119               	; 
 1120 1ede 0000 0445 	HEADER "EVAL", "EVAL", 
 1120      5641 4C20 
 1121 1ee6 0000      	    .word PARSEN
 1122               	100:
 1123               	    ; is a word 
 1124 1ee8 0000 0000 	    .word FINDN, ZBRANCH, 200f
 1124      0000 
 1125               	    ; is -1 normal 1 immediate 
 1126 1eee 0000 0000 	    .word ONEMINUS, ZEQU, ZBRANCH, 120f 
 1126      0000 0000 
 1127 1ef6 0000 0000 	    .word STATE, AT, ZBRANCH, 120f
 1127      0000 0000 
 1128               	110:
 1129 1efe 0000 0000 	    .word COMMA, BRANCH, EVAL 
 1129      0000 
 1130               	120:
 1131 1f04 0000 0000 	    .word EXEC, BRANCH, EVAL 
 1131      0000 
 1132               	    
 1133               	    ; is a number ? 
 1134 1f0a 0000 0000 	200: .word NUMBN, ZBRANCH, 300f 
 1134      0000 
 1135 1f10 0000 0000 	    .word STATE, AT, ZBRANCH, EVAL 
 1135      0000 0000 
 1136 1f18 0000 0000 	    .word LIT, LIT, COMMA, COMMA
 1136      0000 0000 
 1137 1f20 0000 0000 	    .word BRANCH, EVAL 
 1138               	300: 
 1139               	    ; not okey
 1140 1f24 0000 0000 	    .word NONEN, BRANCH, EVAL 
 1140      0000 
 1141               	 400:
 1142 1f2a 0000      	    .word ENDS
 1143               	;---------------------------------------------------------------------- 
 1144               	; 
 1145               	; is 
 1146               	; 
 1147 1f2c 0000 0451 	HEADER "QUIT", "QUIT", 
 1147      5549 5420 
 1148               	1: 
 1149 1f34 0000      	    .word LBRAC 
 1150 1f36 0000 0000 	    .word RS0, RSTO 
 1151 1f3a 0000      	    .word REFILL 
 1152               	2: 
 1153 1f3c 0000 0000 	    .word EVAL, CATCH 
 1154 1f40 0000 0000 	    .word DUP, LIT, 0, EQUAL, ZBRANCH, 3f 
 1154      0000 0000 
 1154      0000 0000 
 1155 1f4c 0000 0000 	    .word STATE, AT, ZEQU, ZBRANCH, 5f 
 1155      0000 0000 
 1155      0000 
 1156 1f56 0000 0000 	    .word LIT, prompt, LIT, 4, TYPE, BRANCH, 5f 
 1156      0000 0400 
 1156      0000 0000 
 1156      0000 
 1157 1f64 0000 0000 	    .word CR, BRANCH, 2b 
 1157      0000 
 1158               	3: 
 1159 1f6a 0000 0000 	    .word DUP, LIT, -1, EQUAL, ZBRANCH, 4f 
 1159      FFFF 0000 
 1159      0000 0000 
 1160 1f76 0000 0000 	    .word LIT, abort, LIT, 8, TYPE, BRANCH, 5f 
 1160      0000 0800 
 1160      0000 0000 
 1160      0000 
 1161               	4: 
 1162 1f84 0000 0000 	    .word DUP, LIT, -2, EQUAL, ZBRANCH, 5f 
 1162      FEFF 0000 
 1162      0000 0000 
 1163 1f90 0000 0000 	    .word LIT, exception, LIT, 12, TYPE, DOT, BRANCH, 5f 
 1163      0000 0C00 
 1163      0000 0000 
 1163      0000 0000 
 1164               	5: 
 1165 1fa0 0000 0000 	    .word CR, BRANCH, 2b 
 1165      0000 
 1166 1fa6 0000      	    .word ENDS 
 1167               	 
 1168               	;---------------------------------------------------------------------- 
 1169               	; 
 1170               	; is 
 1171               	; 
 1172               	...
 151               	
 152               	;----------------------------------------------------------------------
 153               	.p2align 1, 0x00
 154               	.equ free_flash, .
 155               	
 156               	;----------------------------------------------------------------------
 157               	;
 158               	; is ZZZZ, hook for incompleteness 
 159               	;
 160 1fa8 0000 045A 	HEADER "ZZZZ", "ZZZZ",
 160      5A5A 5A20 
 161 1fb0 0000 0000 	    .word LIT, undefined, LIT, 12, TYPE, CR, ENDS 
 161      0000 0C00 
 161      0000 0000 
 161      0000 
 162               	 
 163               	;********************************************************************** 
 164               	
 165               	;----------------------------------------------------------------------
 166               	;
 167               	;FULL: .word  _list_
 168               	
 169               	;----------------------------------------------------------------------
DEFINED SYMBOLS
              main.S:36     *ABS*:000000000000000c version
              main.S:160    .text:0000000000001fa8 _link_
            macros.S:125    *ABS*:00000000000000e1 _last_
            macros.S:245    *ABS*:0000000000000048 TIB_SIZE
            macros.S:249    *ABS*:0000000000000024 STACK_SIZE
            macros.S:253    *ABS*:0000000000000002 CELL_SIZE
            macros.S:257    *ABS*:000000000000000f WORD_SIZE
            macros.S:261    *ABS*:0000000000000010 BASE_DEFAULT
            macros.S:288    *ABS*:0000000000000080 F_RESERVED
            macros.S:289    *ABS*:0000000000000040 F_IMMEDIATE
            macros.S:290    *ABS*:0000000000000020 F_COMPILE
            macros.S:291    *ABS*:0000000000000010 F_HIDDEN
            macros.S:292    *ABS*:0000000000000000 F_LEAP
            macros.S:294    *ABS*:00000000000000f0 F_TOMASK
            macros.S:295    *ABS*:000000000000000f F_UNMASK
            macros.S:301    *ABS*:0000000000000000 NO_ERROR
            macros.S:302    *ABS*:fffffffffffffff7 INVALID_MEMORY
            macros.S:303    *ABS*:fffffffffffffff5 OUT_OF_RANGE
            macros.S:304    *ABS*:fffffffffffffff3 INVALID_WORD
            macros.S:305    *ABS*:ffffffffffffffec TO_READ_ONLY
            macros.S:306    *ABS*:ffffffffffffffe8 NOT_A_NUMBER
            macros.S:321    *ABS*:000000000000000d CR_
            macros.S:322    *ABS*:000000000000000a LF_
            macros.S:323    *ABS*:0000000000000008 BS_
            macros.S:324    *ABS*:0000000000000020 BL_
            macros.S:330    *ABS*:0000000000000000 BIT_CARRY
            macros.S:332    *ABS*:0000000000000001 BIT_ZERO
            macros.S:334    *ABS*:0000000000000002 BIT_NEG
            macros.S:362    *ABS*:0000000000000080 SPM_SIZE
            macros.S:364    *ABS*:0000000000000100 SRAM_START
            macros.S:366    *ABS*:00000000000008ff SRAM_END
            macros.S:368    *ABS*:0000000000000000 FLASH_RWW
            macros.S:370    *ABS*:0000000000003e00 FLASH_NRWW
            macros.S:372    *ABS*:0000000000003fff FLASH_END
            macros.S:374    *ABS*:00000000000003ff E2P_END
            macros.S:380    *ABS*:0000000000000004 E2P_PAGESIZE
            macros.S:382    *ABS*:0000000000000000 E2P_START
            macros.S:386    *ABS*:0000000000000900 FORTH_INI
              main.S:47     .eeprom:0000000000000000 e_void
              main.S:48     .eeprom:0000000000000002 e_live
              main.S:49     .eeprom:0000000000000004 e_turn
              main.S:50     .eeprom:0000000000000006 e_rest
              main.S:51     .eeprom:0000000000000008 e_last
              main.S:52     .eeprom:000000000000000a e_dp
              main.S:53     .eeprom:000000000000000c e_up
              main.S:54     .eeprom:000000000000000e e_ep
              main.S:55     .eeprom:0000000000000010 EP0
              main.S:63     data:0000000000000100 TIB0
              main.S:67     data:0000000000000148 SPZ
              main.S:68     data:000000000000016c SP0
              main.S:69     data:000000000000016c PSZ
              main.S:70     data:0000000000000190 PS0
              main.S:71     data:0000000000000190 RSZ
              main.S:72     data:00000000000001b4 RS0
              main.S:76     data:00000000000001b4 VOID
              main.S:77     data:00000000000001b6 LIVE
              main.S:79     data:00000000000001b8 TURN
              main.S:80     data:00000000000001ba REST
              main.S:82     data:00000000000001bc LAST
              main.S:83     data:00000000000001be VDP
              main.S:85     data:00000000000001c0 VUP
              main.S:86     data:00000000000001c2 VEP
              main.S:90     data:00000000000001c4 VHP
              main.S:91     data:00000000000001c6 SEED
              main.S:93     data:00000000000001c8 STAT
              main.S:94     data:00000000000001ca RADX
              main.S:96     data:00000000000001cc TOIN
              main.S:97     data:00000000000001ce SPAN
              main.S:99     data:00000000000001d0 HLD
              main.S:100    data:00000000000001d2 HLDS
              main.S:102    data:00000000000001d4 TMP0
              main.S:103    data:00000000000001d6 TMP1
              main.S:104    data:00000000000001d8 TMP2
              main.S:105    data:00000000000001da TMP3
              main.S:108    data:00000000000001dc UH0
              main.S:110    *ABS*:00000000000008ff US0
              bios.S:37     *ABS*:000000000000003f __SREG__
              bios.S:38     *ABS*:000000000000003e __SP_H__
              bios.S:39     *ABS*:000000000000003d __SP_L__
              bios.S:42     *ABS*:0000000000000009 UBRRL
              bios.S:43     *ABS*:0000000000000020 UCSRC
              bios.S:44     *ABS*:000000000000000a UCSRB
              bios.S:45     *ABS*:000000000000000b UCSRA
              bios.S:48     *ABS*:0000000000000021 WDTCR
              bios.S:51     *ABS*:0000000000000032 TCNT0
              bios.S:52     *ABS*:0000000000000033 TCCR0
              bios.S:53     *ABS*:0000000000000039 TIMSK
              bios.S:56     *ABS*:0000000000000037 SPMCR
              bios.S:59     *ABS*:0000000000000007 SPMIE
              bios.S:60     *ABS*:0000000000000006 RWWSB
              bios.S:62     *ABS*:0000000000000004 RWWSRE
              bios.S:63     *ABS*:0000000000000003 BLBSET
              bios.S:64     *ABS*:0000000000000002 PGWRT
              bios.S:65     *ABS*:0000000000000001 PGERS
              bios.S:66     *ABS*:0000000000000000 SPMEN
              bios.S:73     *ABS*:000000000000001f EEARH
              bios.S:74     *ABS*:000000000000001e EEARL
              bios.S:75     *ABS*:000000000000001d EEDR
              bios.S:76     *ABS*:000000000000001c EECR
              bios.S:77     *ABS*:0000000000000001 EEWE
              bios.S:78     *ABS*:0000000000000002 EEMWE
              bios.S:79     *ABS*:0000000000000000 EERE
              bios.S:83     *ABS*:0000000000000035 MCUCR
              bios.S:100    .text:0000000000000000 boot
              bios.S:124    .text:0000000000000026 RESET
              bios.S:239    .text:0000000000000070 TIM0_OVF
              bios.S:161    *ABS*:000000000000008f OFFSETCNT
              bios.S:163    .text:0000000000000036 TIMER0_SET
              bios.S:185    .text:000000000000004c WATCHDOG_SET
              bios.S:196    .text:0000000000000054 USART_SET
              bios.S:212    .text:000000000000006c GOOD
              bios.S:264    .text:0000000000000086 HALT
              bios.S:248    .text:000000000000007a TIM0_ADJ
          messages.S:28     .text:0000000000000092 disclaimer
          messages.S:34     .text:000000000000016c prompt
          messages.S:37     .text:0000000000000170 notoky
          messages.S:40     .text:0000000000000174 undefined
          messages.S:43     .text:0000000000000180 exception
          messages.S:46     .text:000000000000018c abort
          messages.S:49     .text:0000000000000196 roullete
       forth-leafs.S:90     .text:0000000000000900 _forth_
       forth-leafs.S:99     .text:0000000000000900 is_ENDS
       forth-leafs.S:99     .text:0000000000000908 ENDS
       forth-leafs.S:104    .text:000000000000090a _unnest
       forth-leafs.S:109    .text:000000000000090e _next
       forth-leafs.S:113    .text:000000000000091a _void
       forth-leafs.S:125    .text:0000000000000928 _jump
       forth-leafs.S:119    .text:0000000000000920 _nest
       forth-leafs.S:129    .text:000000000000092a _link
       forth-leafs.S:141    .text:000000000000092c is_KEY
       forth-leafs.S:141    .text:0000000000000932 KEY
       forth-leafs.S:157    .text:0000000000000942 is_QKEY
       forth-leafs.S:157    .text:000000000000094a QKEY
       forth-leafs.S:316    .text:0000000000000a12 _iffalse
       forth-leafs.S:304    .text:00000000000009fe _iftrue
       forth-leafs.S:169    .text:0000000000000952 is_EMIT
       forth-leafs.S:169    .text:000000000000095a EMIT
       forth-leafs.S:184    .text:0000000000000968 is_QEMIT
       forth-leafs.S:184    .text:0000000000000970 QEMIT
       forth-leafs.S:196    .text:0000000000000978 is_CTOE
       forth-leafs.S:196    .text:000000000000097e CTOE
       forth-leafs.S:200    .text:0000000000000984 _ee_write
       forth-leafs.S:231    .text:000000000000099c is_CATE
       forth-leafs.S:231    .text:00000000000009a2 CATE
       forth-leafs.S:235    .text:00000000000009a8 _ee_read
       forth-leafs.S:257    .text:00000000000009b8 is_CATIO
       forth-leafs.S:257    .text:00000000000009be CATIO
       forth-leafs.S:259    .text:00000000000009c0 _peek
       forth-leafs.S:271    .text:00000000000009c8 is_CTOIO
       forth-leafs.S:271    .text:00000000000009ce CTOIO
       forth-leafs.S:273    .text:00000000000009d0 _poke
       forth-leafs.S:284    .text:00000000000009da is_MILLIS
       forth-leafs.S:284    .text:00000000000009e4 MILLIS
       forth-leafs.S:301    .text:00000000000009f0 is_FTRUE
       forth-leafs.S:301    .text:00000000000009f8 FTRUE
       forth-leafs.S:313    .text:0000000000000a04 is_FFALSE
       forth-leafs.S:313    .text:0000000000000a0c FFALSE
       forth-leafs.S:325    .text:0000000000000a18 is_ZEQU
       forth-leafs.S:325    .text:0000000000000a1e ZEQU
       forth-leafs.S:336    .text:0000000000000a28 is_ZLTH
       forth-leafs.S:336    .text:0000000000000a2e ZLTH
       forth-leafs.S:350    .text:0000000000000a38 is_UMLESS
       forth-leafs.S:350    .text:0000000000000a3e UMLESS
       forth-leafs.S:368    .text:0000000000000a52 is_UMPLUS
       forth-leafs.S:368    .text:0000000000000a58 UMPLUS
       forth-leafs.S:390    .text:0000000000000a72 is_TO
       forth-leafs.S:390    .text:0000000000000a76 TO
       forth-leafs.S:404    .text:0000000000000a88 is_AT
       forth-leafs.S:404    .text:0000000000000a8c AT
       forth-leafs.S:425    .text:0000000000000a96 is_TOR
       forth-leafs.S:425    .text:0000000000000a9c TOR
       forth-leafs.S:437    .text:0000000000000ab0 is_RTO
       forth-leafs.S:437    .text:0000000000000ab6 RTO
       forth-leafs.S:449    .text:0000000000000aca is_RAT
       forth-leafs.S:449    .text:0000000000000ad0 RAT
       forth-leafs.S:462    .text:0000000000000ae8 is_RSTO
       forth-leafs.S:462    .text:0000000000000aee RSTO
       forth-leafs.S:472    .text:0000000000000af8 is_PSTO
       forth-leafs.S:472    .text:0000000000000afe PSTO
       forth-leafs.S:483    .text:0000000000000b08 is_RSAT
       forth-leafs.S:483    .text:0000000000000b0e RSAT
       forth-leafs.S:494    .text:0000000000000b18 is_PSAT
       forth-leafs.S:494    .text:0000000000000b1e PSAT
       forth-leafs.S:505    .text:0000000000000b28 is_DROP
       forth-leafs.S:505    .text:0000000000000b30 DROP
       forth-leafs.S:507    .text:0000000000000b32 PULL
       forth-leafs.S:515    .text:0000000000000b38 is_DUP
       forth-leafs.S:515    .text:0000000000000b3e DUP
       forth-leafs.S:517    .text:0000000000000b40 PUSH
       forth-leafs.S:525    .text:0000000000000b46 is_SWAP
       forth-leafs.S:525    .text:0000000000000b4e SWAP
       forth-leafs.S:536    .text:0000000000000b5c is_OVER
       forth-leafs.S:536    .text:0000000000000b64 OVER
       forth-leafs.S:549    .text:0000000000000b76 is_ZDUP
       forth-leafs.S:549    .text:0000000000000b7e ZDUP
       forth-leafs.S:561    .text:0000000000000b8a is_LTHAN
       forth-leafs.S:561    .text:0000000000000b8e LTHAN
       forth-leafs.S:577    .text:0000000000000ba0 is_PLUS
       forth-leafs.S:577    .text:0000000000000ba4 PLUS
       forth-leafs.S:590    .text:0000000000000bb2 is_MINUS
       forth-leafs.S:590    .text:0000000000000bb6 MINUS
       forth-leafs.S:603    .text:0000000000000bc6 is_NAND
       forth-leafs.S:603    .text:0000000000000bce NAND
       forth-leafs.S:616    .text:0000000000000bde is_AND
       forth-leafs.S:616    .text:0000000000000be4 AND
       forth-leafs.S:627    .text:0000000000000bf0 is_OR
       forth-leafs.S:627    .text:0000000000000bf6 OR
       forth-leafs.S:638    .text:0000000000000c02 is_XOR
       forth-leafs.S:638    .text:0000000000000c08 XOR
       forth-leafs.S:649    .text:0000000000000c14 is_INVERT
       forth-leafs.S:649    .text:0000000000000c1e INVERT
       forth-leafs.S:651    .text:0000000000000c20 _inv
       forth-leafs.S:660    .text:0000000000000c26 is_NEGATE
       forth-leafs.S:660    .text:0000000000000c30 NEGATE
       forth-leafs.S:662    .text:0000000000000c32 _neg
       forth-leafs.S:671    .text:0000000000000c38 is_SHL
       forth-leafs.S:671    .text:0000000000000c3e SHL
       forth-leafs.S:673    .text:0000000000000c40 _shl
       forth-leafs.S:683    .text:0000000000000c48 is_SHR
       forth-leafs.S:683    .text:0000000000000c4e SHR
       forth-leafs.S:685    .text:0000000000000c50 _shr
       forth-leafs.S:695    .text:0000000000000c58 is_ENDIAN
       forth-leafs.S:695    .text:0000000000000c5e ENDIAN
       forth-leafs.S:706    .text:0000000000000c68 is_BRANCH
       forth-leafs.S:706    .text:0000000000000c72 BRANCH
       forth-leafs.S:708    .text:0000000000000c74 _branch
       forth-leafs.S:719    .text:0000000000000c8a is_ZBRANCH
       forth-leafs.S:719    .text:0000000000000c94 ZBRANCH
       forth-leafs.S:736    .text:0000000000000cac is_LIT
       forth-leafs.S:736    .text:0000000000000cb2 LIT
       forth-leafs.S:750    .text:0000000000000cce is_ALIGNED
       forth-leafs.S:750    .text:0000000000000cd8 ALIGNED
       forth-leafs.S:761    .text:0000000000000ce0 is_CELL
       forth-leafs.S:761    .text:0000000000000ce8 CELL
       forth-leafs.S:773    .text:0000000000000cf4 is_CTO
       forth-leafs.S:773    .text:0000000000000cfa CTO
       forth-leafs.S:786    .text:0000000000000d0a is_CAT
       forth-leafs.S:786    .text:0000000000000d10 CAT
       forth-leafs.S:796    .text:0000000000000d1a is_ZERO
       forth-leafs.S:796    .text:0000000000000d1e ZERO
       forth-leafs.S:807    .text:0000000000000d2a is_ONE
       forth-leafs.S:807    .text:0000000000000d2e ONE
       forth-leafs.S:818    .text:0000000000000d3a is_TWO
       forth-leafs.S:818    .text:0000000000000d3e TWO
             flush.S:79     .text:0000000000000d4a is_LDFLASH
             flush.S:79     .text:0000000000000d5a LDFLASH
             flush.S:121    .text:0000000000000d80 is_SVFLASH
             flush.S:121    .text:0000000000000d90 SVFLASH
             flush.S:201    .text:0000000000000dd2 _does_spm
       forth-twigs.S:67     .text:0000000000000de4 is_TOEE
       forth-twigs.S:67     .text:0000000000000dea TOEE
       forth-twigs.S:78     .text:0000000000000dfe is_ATEE
       forth-twigs.S:78     .text:0000000000000e04 ATEE
       forth-twigs.S:93     .text:0000000000000e20 is_NIP
       forth-twigs.S:93     .text:0000000000000e26 NIP
       forth-twigs.S:100    .text:0000000000000e2c is_SWIP
       forth-twigs.S:100    .text:0000000000000e34 SWIP
       forth-twigs.S:114    .text:0000000000000e3c is_ROTU
       forth-twigs.S:114    .text:0000000000000e42 ROTU
       forth-twigs.S:121    .text:0000000000000e48 is_ROTD
       forth-twigs.S:121    .text:0000000000000e50 ROTD
       forth-twigs.S:128    .text:0000000000000e56 is_TUCK
       forth-twigs.S:128    .text:0000000000000e5e TUCK
       forth-twigs.S:135    .text:0000000000000e64 is_FLIP
       forth-twigs.S:135    .text:0000000000000e6c FLIP
       forth-twigs.S:142    .text:0000000000000e74 is_EQUAL
       forth-twigs.S:142    .text:0000000000000e78 EQUAL
       forth-twigs.S:149    .text:0000000000000e7e is_NOTEQUAL
       forth-twigs.S:149    .text:0000000000000e84 NOTEQUAL
       forth-twigs.S:156    .text:0000000000000e8a is_GTHAN
       forth-twigs.S:156    .text:0000000000000e8e GTHAN
       forth-twigs.S:162    .text:0000000000000e94 is_ZEROGT
       forth-twigs.S:162    .text:0000000000000e9a ZEROGT
       forth-twigs.S:168    .text:0000000000000ea0 is_ZEROLT
       forth-twigs.S:168    .text:0000000000000ea6 ZEROLT
       forth-twigs.S:176    .text:0000000000000eae is_CELLS
       forth-twigs.S:176    .text:0000000000000eb6 CELLS
       forth-twigs.S:183    .text:0000000000000eba is_CELLPLUS
       forth-twigs.S:183    .text:0000000000000ec2 CELLPLUS
       forth-twigs.S:190    .text:0000000000000ec8 is_CELLMINUS
       forth-twigs.S:190    .text:0000000000000ed0 CELLMINUS
       forth-twigs.S:197    .text:0000000000000ed6 is_ONEPLUS
       forth-twigs.S:197    .text:0000000000000edc ONEPLUS
       forth-twigs.S:204    .text:0000000000000ee2 is_ONEMINUS
       forth-twigs.S:204    .text:0000000000000ee8 ONEMINUS
       forth-twigs.S:211    .text:0000000000000eee is_TWOPLUS
       forth-twigs.S:211    .text:0000000000000ef4 TWOPLUS
       forth-twigs.S:218    .text:0000000000000efa is_TWOMINUS
       forth-twigs.S:218    .text:0000000000000f00 TWOMINUS
       forth-twigs.S:225    .text:0000000000000f06 is_PLUSTO
       forth-twigs.S:225    .text:0000000000000f0c PLUSTO
       forth-twigs.S:236    .text:0000000000000f1a is_TIB
       forth-twigs.S:236    .text:0000000000000f20 TIB
       forth-twigs.S:244    .text:0000000000000f28 is_LATEST
       forth-twigs.S:244    .text:0000000000000f32 LATEST
       forth-twigs.S:251    .text:0000000000000f38 is_STATE
       forth-twigs.S:251    .text:0000000000000f40 STATE
       forth-twigs.S:258    .text:0000000000000f46 is_BASE
       forth-twigs.S:258    .text:0000000000000f4e BASE
       forth-twigs.S:265    .text:0000000000000f54 is_EPP
       forth-twigs.S:265    .text:0000000000000f5a EPP
       forth-twigs.S:272    .text:0000000000000f60 is_DPP
       forth-twigs.S:272    .text:0000000000000f66 DPP
       forth-twigs.S:279    .text:0000000000000f6c is_HPP
       forth-twigs.S:279    .text:0000000000000f72 HPP
       forth-twigs.S:287    .text:0000000000000f78 is_UPP
       forth-twigs.S:287    .text:0000000000000f7e UPP
       forth-twigs.S:309    .text:0000000000000f84 is_DEPTH
       forth-twigs.S:309    .text:0000000000000f8c DEPTH
       forth-twigs.S:316    .text:0000000000000f96 is_RDEPTH
       forth-twigs.S:316    .text:0000000000000fa0 RDEPTH
       forth-twigs.S:345    .text:0000000000000faa is_UHERE
       forth-twigs.S:345    .text:0000000000000fb2 UHERE
       forth-twigs.S:352    .text:0000000000000fb8 is_HERE
       forth-twigs.S:352    .text:0000000000000fc0 HERE
       forth-twigs.S:360    .text:0000000000000fc6 is_ALLOT
       forth-twigs.S:360    .text:0000000000000fce ALLOT
       forth-twigs.S:371    .text:0000000000000fe6 is_ALIGN
       forth-twigs.S:371    .text:0000000000000fee ALIGN
       forth-twigs.S:380    .text:0000000000001004 is_CCOMMA
       forth-twigs.S:380    .text:000000000000100a CCOMMA
       forth-twigs.S:387    .text:0000000000001014 is_COMMA
       forth-twigs.S:387    .text:0000000000001018 COMMA
       forth-twigs.S:396    .text:0000000000001022 is_TOMMA
       forth-twigs.S:396    .text:0000000000001028 TOMMA
       forth-twigs.S:404    .text:0000000000001034 is_DOVAR
       forth-twigs.S:404    .text:000000000000103c DOVAR
       forth-twigs.S:412    .text:0000000000001046 is_DOCON
       forth-twigs.S:412    .text:000000000000104e DOCON
       forth-twigs.S:419    .text:0000000000001054 is_LITERAL
       forth-twigs.S:419    .text:000000000000105e LITERAL
       forth-twigs.S:427    .text:0000000000001068 is_COMP
       forth-twigs.S:427    .text:0000000000001070 COMP
       forth-twigs.S:434    .text:000000000000107e is_EXIT
       forth-twigs.S:434    .text:0000000000001086 EXIT
       forth-twigs.S:441    .text:000000000000108c is_EXEC
       forth-twigs.S:441    .text:0000000000001094 EXEC
       forth-twigs.S:449    .text:0000000000001098 is_TAIL
       forth-twigs.S:449    .text:00000000000010a0 TAIL
       forth-twigs.S:457    .text:00000000000010aa is_VALUE
       forth-twigs.S:457    .text:00000000000010b2 VALUE
       interpreter.S:1022   .text:0000000000001dae CREATE
       forth-twigs.S:464    .text:00000000000010ba is_TOVALUE
       forth-twigs.S:464    .text:00000000000010c0 TOVALUE
       interpreter.S:1005   .text:0000000000001d8a FIND
       forth-twigs.S:471    .text:00000000000010c8 is_DEFER
       forth-twigs.S:471    .text:00000000000010d0 DEFER
              main.S:160    .text:0000000000001fb0 ZZZZ
       forth-twigs.S:478    .text:00000000000010e0 is_ISDEFER
       forth-twigs.S:478    .text:00000000000010e6 ISDEFER
       forth-twigs.S:494    .text:00000000000010f0 is_MARKTO
       forth-twigs.S:494    .text:00000000000010fa MARKTO
       forth-twigs.S:503    .text:0000000000001102 is_TOMARK
       forth-twigs.S:503    .text:000000000000110c TOMARK
       forth-twigs.S:510    .text:0000000000001114 is_BEGIN
       forth-twigs.S:510    .text:000000000000111c BEGIN
       forth-twigs.S:517    .text:0000000000001120 is_AGAIN
       forth-twigs.S:517    .text:0000000000001128 AGAIN
       forth-twigs.S:524    .text:0000000000001130 is_UNTIL
       forth-twigs.S:524    .text:0000000000001138 UNTIL
       forth-twigs.S:531    .text:0000000000001140 is_UNLESS
       forth-twigs.S:531    .text:000000000000114a UNLESS
       forth-twigs.S:538    .text:0000000000001150 is_IF
       forth-twigs.S:538    .text:0000000000001156 IF
       forth-twigs.S:545    .text:000000000000115e is_GO
       forth-twigs.S:545    .text:0000000000001164 GO
       forth-twigs.S:552    .text:000000000000116c is_THEN
       forth-twigs.S:552    .text:0000000000001174 THEN
       forth-twigs.S:559    .text:0000000000001180 ENDIF
       forth-twigs.S:559    .text:0000000000001178 is_ENDIF
       forth-twigs.S:566    .text:0000000000001184 is_ELSE
       forth-twigs.S:566    .text:000000000000118c ELSE
       forth-twigs.S:573    .text:0000000000001194 is_WHILE
       forth-twigs.S:573    .text:000000000000119c WHILE
       forth-twigs.S:580    .text:00000000000011a2 is_REPEAT
       forth-twigs.S:580    .text:00000000000011ac REPEAT
       forth-twigs.S:588    .text:00000000000011b2 is_AHEAD
       forth-twigs.S:588    .text:00000000000011ba AHEAD
       forth-twigs.S:595    .text:00000000000011be is_AFT
       forth-twigs.S:595    .text:00000000000011c4 AFT
       forth-twigs.S:602    .text:00000000000011ce is_HOOK
       forth-twigs.S:602    .text:00000000000011d6 HOOK
       forth-twigs.S:609    .text:00000000000011dc is_BACK
       forth-twigs.S:609    .text:00000000000011e4 BACK
       forth-twigs.S:616    .text:00000000000011ea is_FOR
       forth-twigs.S:616    .text:00000000000011f0 FOR
       forth-twigs.S:623    .text:00000000000011f8 is_TXEN
       forth-twigs.S:623    .text:0000000000001200 TXEN
       forth-twigs.S:634    .text:0000000000001210 is_NEXT
       forth-twigs.S:634    .text:0000000000001218 NEXT
       forth-twigs.S:656    .text:0000000000001220 is_CASE
       forth-twigs.S:656    .text:0000000000001228 CASE
       forth-twigs.S:663    .text:000000000000122e is_OF
       forth-twigs.S:663    .text:0000000000001234 OF
       forth-twigs.S:670    .text:000000000000124c is_ENDOF
       forth-twigs.S:670    .text:0000000000001254 ENDOF
       forth-twigs.S:677    .text:000000000000125e is_ENDCASE
       forth-twigs.S:677    .text:0000000000001268 ENDCASE
       forth-twigs.S:685    .text:0000000000001276 is_CR
       forth-twigs.S:685    .text:000000000000127c CR
       forth-twigs.S:692    .text:0000000000001284 is_LF
       forth-twigs.S:692    .text:000000000000128a LF
       forth-twigs.S:699    .text:0000000000001292 is_BL
       forth-twigs.S:699    .text:0000000000001298 BL
       forth-twigs.S:706    .text:00000000000012a0 is_DOT
       forth-twigs.S:706    .text:00000000000012a6 DOT
       forth-twigs.S:713    .text:00000000000012ac is_TYPE
       forth-twigs.S:713    .text:00000000000012b4 TYPE
       forth-twigs.S:724    .text:00000000000012d2 is_LTSNUM
       forth-twigs.S:724    .text:00000000000012d8 LTSNUM
       forth-twigs.S:730    .text:00000000000012e2 is_SNUMGT
       forth-twigs.S:730    .text:00000000000012e8 SNUMGT
           doubles.S:82     .text:0000000000001610 TWODROP
       forth-twigs.S:737    .text:00000000000012f6 is_SNUM
       forth-twigs.S:737    .text:00000000000012fa SNUM
              math.S:202    .text:0000000000001764 UMBYMOD
       forth-twigs.S:752    .text:000000000000132e HOLD
       forth-twigs.S:745    .text:0000000000001314 is_SNUMS
       forth-twigs.S:745    .text:000000000000131a SNUMS
           doubles.S:89     .text:000000000000161e TWODUP
       forth-twigs.S:752    .text:0000000000001326 is_HOLD
       forth-twigs.S:759    .text:000000000000133e is_SIGN
       forth-twigs.S:759    .text:0000000000001346 SIGN
       forth-twigs.S:768    .text:0000000000001354 is_UMMINUS
       forth-twigs.S:768    .text:000000000000135a UMMINUS
       forth-twigs.S:776    .text:0000000000001360 is_ULESS
       forth-twigs.S:776    .text:0000000000001366 ULESS
       forth-twigs.S:787    .text:0000000000001376 is_UMORE
       forth-twigs.S:787    .text:000000000000137c UMORE
       forth-twigs.S:794    .text:000000000000138c is_UAT
       forth-twigs.S:794    .text:0000000000001392 UAT
       forth-twigs.S:802    .text:0000000000001398 is_UTO
       forth-twigs.S:802    .text:000000000000139e UTO
       forth-twigs.S:810    .text:00000000000013a4 is_USV
       forth-twigs.S:810    .text:00000000000013aa USV
       forth-twigs.S:818    .text:00000000000013b2 is_ULD
       forth-twigs.S:818    .text:00000000000013b8 ULD
       forth-twigs.S:824    .text:00000000000013c0 is_COLDZERO
       forth-twigs.S:824    .text:00000000000013c8 COLDZERO
              main.S:154    .text:0000000000001fa8 free_flash
       forth-twigs.S:841    .text:0000000000001424 is_EELOAD
       forth-twigs.S:841    .text:000000000000142e EELOAD
       forth-twigs.S:855    .text:000000000000149e is_EESAVE
       forth-twigs.S:855    .text:00000000000014a8 EESAVE
       forth-twigs.S:869    .text:0000000000001528 is_COLD
       forth-twigs.S:869    .text:0000000000001530 COLD
       forth-twigs.S:873    .text:0000000000001540 _safe
       forth-twigs.S:884    .text:000000000000157c WARM
       forth-twigs.S:884    .text:0000000000001574 is_WARM
       interpreter.S:1147   .text:0000000000001f34 QUIT
       forth-twigs.S:892    .text:0000000000001586 is_BYE
       forth-twigs.S:892    .text:000000000000158c BYE
           doubles.S:33     .text:0000000000001598 is_FOURPLUS
           doubles.S:33     .text:000000000000159e FOURPLUS
           doubles.S:40     .text:00000000000015a6 is_FOURMINUS
           doubles.S:40     .text:00000000000015ac FOURMINUS
           doubles.S:48     .text:00000000000015b4 is_TWOTO
           doubles.S:48     .text:00000000000015ba TWOTO
           doubles.S:54     .text:00000000000015c6 is_TWOAT
           doubles.S:54     .text:00000000000015cc TWOAT
           doubles.S:61     .text:00000000000015d8 is_TWOTOR
           doubles.S:61     .text:00000000000015de TWOTOR
           doubles.S:68     .text:00000000000015e6 is_TWORTO
           doubles.S:68     .text:00000000000015ec TWORTO
           doubles.S:75     .text:00000000000015f4 is_TWORAT
           doubles.S:75     .text:00000000000015fa TWORAT
           doubles.S:82     .text:0000000000001608 is_TWODROP
           doubles.S:89     .text:0000000000001616 is_TWODUP
           doubles.S:96     .text:0000000000001624 is_TWOSWAP
           doubles.S:96     .text:000000000000162c TWOSWAP
           doubles.S:103    .text:0000000000001636 is_DPLUS
           doubles.S:103    .text:000000000000163c DPLUS
           doubles.S:110    .text:000000000000164e is_DMINUS
           doubles.S:110    .text:0000000000001654 DMINUS
              math.S:37     *ABS*:0000000000001505 djbHASH
              math.S:38     .text:0000000000001666 is_HASH
              math.S:38     .text:000000000000166e HASH
              math.S:90     .text:00000000000016a0 is_RANDOM
              math.S:90     .text:00000000000016aa RANDOM
              math.S:111    .text:00000000000016ce _seed
              math.S:107    .text:00000000000016be is_RAND
              math.S:107    .text:00000000000016c6 RAND
              math.S:120    .text:00000000000016d8 is_ABS
              math.S:120    .text:00000000000016de ABS
              math.S:129    .text:00000000000016ee is_MAX
              math.S:129    .text:00000000000016f4 MAX
              math.S:136    .text:0000000000001702 is_MIN
              math.S:136    .text:0000000000001708 MIN
              math.S:143    .text:000000000000170e is_WITHIN
              math.S:143    .text:0000000000001718 WITHIN
              math.S:157    .text:0000000000001726 is_UMUL
              math.S:157    .text:000000000000172c UMUL
              math.S:167    .text:0000000000001732 mul16u
              math.S:177    .text:000000000000173e m16u_1
              math.S:182    .text:0000000000001744 noad8
              math.S:190    .text:0000000000001750 m16ures
              math.S:191    .text:0000000000001750 m16result
              math.S:202    .text:000000000000175a is_UMBYMOD
              math.S:212    .text:000000000000176a div16u
              math.S:218    .text:0000000000001772 d16u_1
              math.S:240    .text:0000000000001790 d16ures
              math.S:224    .text:000000000000177a d16u_2
              math.S:236    .text:000000000000178c d16u_3
              math.S:248    .text:0000000000001792 is_SMUL
              math.S:248    .text:0000000000001796 SMUL
              math.S:259    .text:000000000000179c mpy16s
              math.S:265    .text:00000000000017a4 m16s_1
              math.S:269    .text:00000000000017aa m16s_2
              math.S:281    .text:00000000000017be m16sres
              math.S:290    .text:00000000000017c0 is_SDIV
              math.S:290    .text:00000000000017c4 SDIV
              math.S:302    .text:00000000000017ca div16s
              math.S:307    .text:00000000000017d0 d16s_0
              math.S:316    .text:00000000000017dc d16s_1
              math.S:325    .text:00000000000017e8 d16s_2
              math.S:332    .text:00000000000017f0 d16s_3
              math.S:349    .text:0000000000001808 d16s_5
              math.S:346    .text:0000000000001806 d16sres
              math.S:360    .text:000000000000181a d16s_6
              math.S:374    .text:000000000000181e is_utoa
              math.S:374    .text:0000000000001826 utoa
              math.S:380    .text:000000000000182e itoa
       interpreter.S:130    .text:0000000000001868 is_copy
       interpreter.S:130    .text:0000000000001872 copy
       interpreter.S:161    .text:0000000000001898 is_refill
       interpreter.S:161    .text:00000000000018a4 refill
       interpreter.S:296    .text:0000000000001900 is_parse
       interpreter.S:296    .text:000000000000190a parse
       interpreter.S:335    .text:0000000000001936 _tows
       interpreter.S:311    .text:0000000000001914 is_word
       interpreter.S:311    .text:000000000000191e word
       interpreter.S:323    .text:0000000000001928 _wsto
       interpreter.S:351    .text:0000000000001946 _wsat
       interpreter.S:376    .text:0000000000001958 is_number
       interpreter.S:376    .text:0000000000001964 number
       interpreter.S:506    .text:00000000000019e4 _bin_base
       interpreter.S:545    .text:0000000000001a08 _next_digit
       interpreter.S:516    .text:00000000000019ee _nib_base
       interpreter.S:523    .text:00000000000019f2 _oct_base
       interpreter.S:530    .text:00000000000019f6 _dec_base
       interpreter.S:539    .text:0000000000001a00 _hex_base
       interpreter.S:606    .text:0000000000001a30 is_find
       interpreter.S:606    .text:0000000000001a3a find
       interpreter.S:755    .text:0000000000001ae2 is_MOVE
       interpreter.S:755    .text:0000000000001aea MOVE
       interpreter.S:767    .text:0000000000001b0e is_FILL
       interpreter.S:767    .text:0000000000001b16 FILL
       interpreter.S:779    .text:0000000000001b3a is_RBRAC
       interpreter.S:779    .text:0000000000001b3e RBRAC
       interpreter.S:786    .text:0000000000001b46 is_LBRAC
       interpreter.S:786    .text:0000000000001b4a LBRAC
       interpreter.S:793    .text:0000000000001b52 is_TOGGLE
       interpreter.S:793    .text:0000000000001b5c TOGGLE
       interpreter.S:801    .text:0000000000001b68 is_TONFA
       interpreter.S:801    .text:0000000000001b70 TONFA
       interpreter.S:808    .text:0000000000001b76 is_TOCFA
       interpreter.S:808    .text:0000000000001b7e TOCFA
       interpreter.S:815    .text:0000000000001b8e is_HIDDEN
       interpreter.S:815    .text:0000000000001b98 HIDDEN
       interpreter.S:822    .text:0000000000001ba2 is_IMMEDIATE
       interpreter.S:822    .text:0000000000001bae IMMEDIATE
       interpreter.S:829    .text:0000000000001bb8 is_COMPILE_ONLY
       interpreter.S:829    .text:0000000000001bc8 COMPILE_ONLY
       interpreter.S:836    .text:0000000000001bd2 is_HANDLER
       interpreter.S:836    .text:0000000000001bdc HANDLER
       interpreter.S:839    .text:0000000000001be2 HANDLERS
       interpreter.S:845    .text:0000000000001be4 is_CATCH
       interpreter.S:845    .text:0000000000001bec CATCH
       interpreter.S:854    .text:0000000000001c0e is_THROW
       interpreter.S:854    .text:0000000000001c16 THROW
       interpreter.S:864    .text:0000000000001c36 is_SPACE
       interpreter.S:864    .text:0000000000001c3e SPACE
       interpreter.S:871    .text:0000000000001c42 is_SPACES
       interpreter.S:871    .text:0000000000001c4c SPACES
       interpreter.S:880    .text:0000000000001c5c is_ABORT
       interpreter.S:880    .text:0000000000001c64 ABORT
       interpreter.S:887    .text:0000000000001c6c is_ACCEPT
       interpreter.S:887    .text:0000000000001c76 ACCEPT
       interpreter.S:894    .text:0000000000001c7a is_OVERT
       interpreter.S:894    .text:0000000000001c82 OVERT
       interpreter.S:902    .text:0000000000001c86 is_COLON
       interpreter.S:902    .text:0000000000001c8a COLON
       interpreter.S:909    .text:0000000000001c90 is_SEMMI
       interpreter.S:909    .text:0000000000001c94 SEMMI
       interpreter.S:917    .text:0000000000001c9c is_SOURCE
       interpreter.S:917    .text:0000000000001ca6 SOURCE
       interpreter.S:928    .text:0000000000001cc2 is_SOURCEPLUS
       interpreter.S:928    .text:0000000000001ccc SOURCEPLUS
       interpreter.S:935    .text:0000000000001cd6 is_REFILL
       interpreter.S:935    .text:0000000000001ce0 REFILL
       interpreter.S:943    .text:0000000000001cec is_PARSE
       interpreter.S:943    .text:0000000000001cf4 PARSE
       interpreter.S:953    .text:0000000000001d0e is_PAREN
       interpreter.S:953    .text:0000000000001d12 PAREN
       interpreter.S:961    .text:0000000000001d1e is_DOTPAREN
       interpreter.S:961    .text:0000000000001d24 DOTPAREN
       interpreter.S:969    .text:0000000000001d2c is_SQUOTE
       interpreter.S:969    .text:0000000000001d32 SQUOTE
       interpreter.S:977    .text:0000000000001d3a is_DOTQUOTE
       interpreter.S:977    .text:0000000000001d40 DOTQUOTE
       interpreter.S:986    .text:0000000000001d46 is_PARSEN
       interpreter.S:986    .text:0000000000001d54 PARSEN
       interpreter.S:998    .text:0000000000001d6e is_FINDN
       interpreter.S:998    .text:0000000000001d7a FINDN
       interpreter.S:1005   .text:0000000000001d82 is_FIND
       interpreter.S:1014   .text:0000000000001d96 is_NONAME
       interpreter.S:1014   .text:0000000000001da0 NONAME
       interpreter.S:1022   .text:0000000000001da4 is_CREATE
       interpreter.S:1036   .text:0000000000001dec is_DOES
       interpreter.S:1036   .text:0000000000001df4 DOES
       interpreter.S:1043   .text:0000000000001e00 is_DOESTO
       interpreter.S:1043   .text:0000000000001e08 DOESTO
       interpreter.S:1054   .text:0000000000001e14 is_CONSTANT
       interpreter.S:1054   .text:0000000000001e20 CONSTANT
       interpreter.S:1068   .text:0000000000001e3e is_VARIABLE
       interpreter.S:1068   .text:0000000000001e4a VARIABLE
       interpreter.S:1078   .text:0000000000001e68 is_TICK
       interpreter.S:1078   .text:0000000000001e6c TICK
       interpreter.S:1088   .text:0000000000001e7c is_POSTPONE
       interpreter.S:1088   .text:0000000000001e88 POSTPONE
       interpreter.S:1095   .text:0000000000001e8e is_COMPXT
       interpreter.S:1095   .text:0000000000001e98 COMPXT
       interpreter.S:1102   .text:0000000000001ea2 is_NUMBN
       interpreter.S:1102   .text:0000000000001eaa NUMBN
       interpreter.S:1113   .text:0000000000001ec6 is_NONEN
       interpreter.S:1113   .text:0000000000001ece NONEN
       interpreter.S:1120   .text:0000000000001ede is_EVAL
       interpreter.S:1120   .text:0000000000001ee6 EVAL
       interpreter.S:1147   .text:0000000000001f2c is_QUIT
              main.S:160    .text:0000000000001fa8 is_ZZZZ

UNDEFINED SYMBOLS
forth
PAD
DIGIT
CHARMINUS
ZEROLESS
CHAR
