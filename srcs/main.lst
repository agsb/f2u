   1               	# 1 "main.S"
   1               	
   0               	
   0               	
   2               	
   3               	/*
   4               	 *  DISCLAIMER
   5               	 *
   6               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   7               	 *
   8               	 *  Permission is hereby granted, free of charge, to any person obtaining
   9               	 *  a copy of this software and associated documentation files (the
  10               	 *  "Software"), to deal in the Software without restriction, including
  11               	 *  without limitation the rights to use, copy, modify, merge, publish,
  12               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  13               	 *  permit persons to whom the Software is furnished to do so, subject to
  14               	 *  the following conditions:
  15               	 *
  16               	 *  The above copyright notice and this permission notice shall be
  17               	 *  included in all copies or substantial portions of the Software.
  18               	 *
  19               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  20               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  21               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  22               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  23               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  24               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  25               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  26               	 *
  27               	 */
  28               	
  29               	;---------------------------------------------------------------------
  30               	; atmega8 avr
  31               	;
  32               	; UPDATE: 10/2022 to include stuff for atmega328 P;------------------------------------------------
  33               	
  34               	;----------------------------------------------------------------------
  35               	;
  36               	; version information
  37               	;
  38               	.equ version, 12 ; 0.00.10
  39               	
  40               	#include "macros.S"
   1               	
   2               	
   3               	/*
   4               	 *  DISCLAIMER
   5               	 *
   6               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   7               	 *
   8               	 *  Permission is hereby granted, free of charge, to any person obtaining
   9               	 *  a copy of this software and associated documentation files (the
  10               	 *  "Software"), to deal in the Software without restriction, including
  11               	 *  without limitation the rights to use, copy, modify, merge, publish,
  12               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  13               	 *  permit persons to whom the Software is furnished to do so, subject to
  14               	 *  the following conditions:
  15               	 *
  16               	 *  The above copyright notice and this permission notice shall be
  17               	 *  included in all copies or substantial portions of the Software.
  18               	 *
  19               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  20               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  21               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  22               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  23               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  24               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  25               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  26               	 *
  27               	 */
  28               	
  29               	;----------------------------------------------------------------------
  30               	;
  31               	;   MUST use gnu cpp 
  32               	;   use with .S (upper S) or
  33               	;   use with -x assembler-with-cpp
  34               	;
  35               	;     can't use alias 
  36               	;----------------------------------------------------------------------
  37               	;
  38               	; all defines, equs, macros are defined in this file
  39               	;
  40               	
  41               	#define atmega8
  42               	
  43               	;----------------------------------------------------------------------
  44               	;
  45               	;    about registers 
  46               	;
  47               	; r1:r0 reserved and used in internal atmega8 instructions, as spm, mul, des, etc
  48               	;
  49               	
  50               	#define _reserved_r0_ r0
  51               	#define _reserved_r1_ r1
  52               	
  53               	; generic scratch 
  54               	#define _work_ r2
  55               	
  56               	; always zero, keep by interrupt
  57               	#define _zero_ r3
  58               	
  59               	; offset for adjust timer0 interrupt counter
  60               	#define _offs_ r4
  61               	
  62               	; sreg keep in interrupts
  63               	#define _sreg_ r5
  64               	
  65               	; ticks counter for timer0 at 1 ms, (count 65 sec)
  66               	#define ticks_low r6
  67               	#define ticks_high r7
  68               	
  69               	; work used only at boot in pseudo bios
  70               	#define bios_work r16
  71               	
  72               	;-----------------------------------------------------------------------
  73               	;
  74               	; forth model (like pdp-11)
  75               	;
  76               	; Z generic pointer for access sram and flash memory, lpm, spm, index, etc
  77               	#define zpm_low r30
  78               	#define zpm_high r31
  79               	
  80               	; Y parameter stack pointer for access sram
  81               	#define psp_low r28
  82               	#define psp_high r29
  83               	
  84               	; X return stack pointer for access sram
  85               	#define rsp_low r26
  86               	#define rsp_high r27
  87               	
  88               	; top, Top parameter stack
  89               	#define tos_low r24
  90               	#define tos_high r25
  91               	
  92               	; nos, Next on parameter stack
  93               	#define nos_low r22
  94               	#define nos_high r23
  95               	
  96               	; wrk, Work temporary 
  97               	#define wrk_low r20
  98               	#define wrk_high r21
  99               	
 100               	; ips, instruction for jump and link return
 101               	#define ips_low r18
 102               	#define ips_high r19
 103               	
 104               	
 105               	; r8 to r17 free
 106               	
 107               	;----------------------------------------------------------------------
 108               	;
 109               	;  trick adapted from amforth-6.9
 110               	;
 111               	.macro STRINGS string
 112               	;    .word DOSLIT
 113               	    .byte 8f - 7f
 114               	7:  .ascii "\\string"
 115               	8:  .balign 2
 116               	.endm
 117               	
 118               	;----------------------------------------------------------------------
 119               	;
 120               	; header of leaf word in dictionary
 121               	;    flags must be 0x80, 0x40, 0x20, 0x10
 122               	;    size  must be 1 to 15
 123               	;
 124               	;----------------------------------------------------------------------
 125               	;
 126               	; set start reverse linked list
 127               	;
 128               	.set _link_, 0x0
 129               	
 130               	.macro HEADER name, label, flags=0x0
 131               	is_\label:
 132               	    .p2align 1, 0x00
 133               	7:    
 134               	    .word _link_
 135               	    .set _link_, 7b
 136               	    .byte (9f - 8f) + \flags
 137               	8:    
 138               	    .ascii "\name"
 139               	9:    
 140               	    .p2align 1, 0x20
 141               	\label:
 142               	.endm
 143               	
 144               	;----------------------------------------------------------------------
 145               	; little endian !!! AVR
 146               	;
 147               	;    A    Z (r31:r30) is used as generic address pointer, deed by avr ISA
 148               	;
 149               	;    R    Y (r29:r28) used as return stack pointer    
 150               	;    S    X (r27:r26) used as data/parameter stack pointer
 151               	;    T    T (r25:r24) used as top in stack
 152               	;    N    N (r22:r23) used as second in stack
 153               	;    W    W (r20:r21) used as work            
 154               	;    I    I (r18:r19) used as ip when link and jump    
 155               	;
 156               	;   all stacks grows downwards.
 157               	;
 158               	;----------------------------------------------------------------------
 159               	;    push into return stack, 
 160               	.macro rspush low, high 
 161               	    st -X, \low
 162               	    st -X, \high
 163               	.endm
 164               	
 165               	;----------------------------------------------------------------------
 166               	;    pull from return stack, 
 167               	.macro rspull low, high
 168               	    ld \high, X+
 169               	    ld \low, X+
 170               	.endm
 171               	
 172               	;----------------------------------------------------------------------
 173               	;    push into data stack, 
 174               	.macro pspush low, high
 175               	    st -Y, \low
 176               	    st -Y, \high
 177               	.endm
 178               	
 179               	;----------------------------------------------------------------------
 180               	;    pull from data stack, 
 181               	.macro pspull low, high
 182               	    ld \high, Y+
 183               	    ld \low, Y+
 184               	.endm
 185               	
 186               	;----------------------------------------------------------------------
 187               	;    load a word from program memory (flash)
 188               	;    ( only works with TWO lpm !!! )
 189               	;    Z address in bytes!
 190               	.macro pmload low, high
 191               	    lsl zpm_low
 192               	    rol zpm_high
 193               	    lpm \low, Z+
 194               	    lpm \high, Z+
 195               	    ror zpm_high
 196               	    ror zpm_low
 197               	.endm
 198               	
 199               	;----------------------------------------------------------------------
 200               	;    load from static memory (sram), increments pointer
 201               	;
 202               	.macro srload byte
 203               	    ld \byte, Z+
 204               	.endm
 205               	
 206               	;----------------------------------------------------------------------
 207               	;    save to static memory (sram), increments pointer
 208               	;
 209               	.macro srsave byte
 210               	    st Z+, \byte 
 211               	.endm
 212               	
 213               	;----------------------------------------------------------------------
 214               	; also io@
 215               	;
 216               	.macro peek address, register
 217               	    .if (\address < $40)
 218               	    in \register, \address
 219               	    .else
 220               	    lds \register, \address
 221               	    .endif
 222               	.endm
 223               	
 224               	;----------------------------------------------------------------------
 225               	; also io!
 226               	;
 227               	.macro poke address, register
 228               	    .if (\address < $40)
 229               	    out \address, \register
 230               	    .else
 231               	    sts \address, \register
 232               	    .endif
 233               	.endm
 234               	
 235               	;----------------------------------------------------------------------
 236               	; test, skip next if not zero
 237               	;
 238               	; for Atmega8:
 239               	; BIT_ZERO is 1
 240               	;
 241               	; non destructive
 242               	;
 243               	.macro test_zero low, high, address
 244               	    mov _work_, \low
 245               	    or _work_, \high
 246               	    brbs BIT_ZERO, \address
 247               	.endm
 248               	
 249               	;----------------------------------------------------------------------
 250               	; all primitives must start with NOOP and end with POON
 251               	;    a  nop (0x0000) is used as a null reference, and marks all primitives
 252               	;    as they are really a branch and link mark
 253               	;
 254               	; many primitives saves work register at end, 
 255               	;    then for save bytes, ends with WOOP, 
 256               	;    that goes to _pushw, that goes to POON 
 257               	;
 258               	
 259               	.macro NOOP
 260               	    nop
 261               	.endm
 262               	
 263               	.macro WOOP
 264               	    rjmp _pushw
 265               	.endm
 266               	
 267               	.macro POON
 268               	    rjmp _link
 269               	.endm
 270               	
 271               	;**********************************************************************
 272               	;  constant values
 273               	;
 274               	;    %s/#define *\([^ ]*\) */ \1 = /
 275               	;    %s/ *\([^ ]*\) *= */#define \1 /
 276               	
 277               	;----------------------------------------------------------------------
 278               	;    sizes
 279               	;
 280               	; "Column 72 means Continue", 72 always \0
 281               	; Readability is good
 282               	; standart is 80
 283               	TIB_SIZE = 72
 284               	
 285               	; stacks 18 words deep. WISE as M00re said.
 286               	STACK_SIZE = 36
 287               	
 288               	; default cell size
 289               	CELL_SIZE = 2
 290               	
 291               	; maximum word size
 292               	WORD_SIZE = 15
 293               	
 294               	; default base
 295               	BASE_DEFAULT = 16
 296               	
 297               	;----------------------------------------------------------------------
 298               	;   reserved eeprom used  
 299               	;
 300               	eeprom = 0x00
 301               	e_void = eeprom + 0  ; always zero
 302               	e_seed = eeprom + 2  ; seed for random
 303               	e_turn = eeprom + 4  ; routine after boot
 304               	e_rest = eeprom + 6  ; routine before reset
 305               	e_word = eeprom + 8  ; last link addres to dictionary 
 306               	e_heap = eeprom + 10 ; next free flash address for dictionary
 307               	e_last = eeprom + 12 ; next free sram address for variables, as stack
 308               	e_erom = eeprom + 14 ; next free eprom address for values, as stack
 309               	
 310               	;----------------------------------------------------------------------
 311               	;   words can be 1 to 15 chars lenght, 
 312               	;
 313               	;   almost over for normal english ~10 letters words 
 314               	;   http://norvig.com/mayzner.html
 315               	;
 316               	;   flags 
 317               	;
 318               	;   IMMEDIATE, COMPILE, SMUDGE, LEAP
 319               	;
 320               	;   COMPILE is the compile only.
 321               	;
 322               	;   HIDDEN or SMUDGE is no used
 323               	;
 324               	;   LEAP is for pure assembler routines, no calls inside.
 325               	;
 326               	F_IMMEDIATE = 0x80
 327               	F_COMPILE = 0x40
 328               	F_HIDDEN = 0x20
 329               	F_LEAP = 0x10
 330               	F_COMMON = 0x00
 331               	
 332               	F_TOMASK = 0xF0
 333               	F_UNMASK = 0x0F
 334               	
 335               	;---------------------------------------------------------------------
 336               	; status register from error codes forth 2012
 337               	; minimal
 338               	NO_ERROR = 0
 339               	INVALID_MEMORY = -9
 340               	OVERFLOW = -11
 341               	WRITE_TO_READ_ONLY = -20
 342               	NOT_A_NUMBER = -24
 343               	
 344               	;---------------------------------------------------------------------
 345               	; Flow Control
 346               	; assumes that all line edit is done at remote!
 347               	; no backspace, no delete, no moving cursor, just a static line.
 348               	; works as a screen or block, just receives a line till a CR or CR LF
 349               	; uses BS, ESC, CAN, XON, XOFF, for control 
 350               	;
 351               	XON_   =   0x11    ; ascii DC1 ^Q
 352               	
 353               	XOFF_  =   0x13    ; ascii DC3 ^S
 354               	
 355               	NAK_   =   0x15    ; ascii NAK ^U
 356               	
 357               	CR_    =   0x0d    ; ascci carriage return ^M
 358               	
 359               	LF_    =   0x0a    ; ascii line feed ^J
 360               	
 361               	BS_    =   0x08    ; ascii backspace ^H
 362               	
 363               	BL_    =   0x20    ; ascii space 
 364               	
 365               	BIT_ZERO = 1
 366               	
 367               	BIT_CARRY = 0
 368               	
 369               	#ifdef atmega8
 370               	
 371               	; atmega8 have flash memory of 128 pages of 32 words
 372               	
 373               	SPM_SIZE = 64
 374               	
 375               	SRAM_START = 0x060  ; SRAM from AVR manual
 376               	
 377               	SRAM_END = 0x45F    ; SRAM from AVR manual 
 378               	
 379               	FLASH_RWW = 0x0000
 380               	
 381               	FLASH_NRWW = 0x1E00    ; using optiboot in 512 bytes !!!!
 382               	
 383               	FLASH_END = 0x1FFF 
 384               	
 385               	#endif
 386               	
 387               	#ifdef atmega328
 388               	
 389               	; atmega328 have flash memory of 256 pages of 64 words
 390               	
 391               	SPM_SIZE = 128
 392               	
 393               	SRAM_START = 0x0100  ; SRAM from AVR manual
 394               	
 395               	SRAM_END = 0x08FF  ; SRAM from AVR manual
 396               	
 397               	FLASH_RWW = 0x0000
 398               	
 399               	FLASH_NRWW = 0x3E00    ; using optiboot in 512 bytes !!!!
 400               	
 401               	FLASH_END = 0x3FFF 
 402               	
 403               	#endif
 404               	
 405               	/* for eeprom use */
 406               	
 407               	E2P_PAGESIZE = 4
 408               	
 409               	E2P_START = 0x000
 410               	
 411               	E2P_END = 0x1FF
 412               	
 413               	/* for flash flush */
 414               	
 415               	; buffer for flush flash
 416               	
 417               	FIB_SIZE = SPM_SIZE
 418               	
 419               	/* where start forth */
 420               	
 421               	FORTH_INI = SRAM_END + 1
 422               	
 423               	
 424               	;----------------------------------------------------------------------
 425               	...
  41               	
  42               	;----------------------------------------------------------------------
  43               	.section data
  44 0000 0000 0000 	.org SRAM_START
  44      0000 0000 
  44      0000 0000 
  44      0000 0000 
  44      0000 0000 
  45               	; those are non volatile, must be saved in eeprom
  46 0060 0000      	VOID:	.word 0		; always 0x0000
  47 0062 0000      	SEED:	.word 0		; seed for pseudo random
  48               	
  49 0064 0000      	TURN:	.word 0		; routine to run after boot
  50 0066 0000      	REST:	.word 0		; routine to run before reset
  51               	
  52 0068 0000      	WORD:	.word 0		; reference to latest word in dictionary
  53 006a 0000      	HEAP:	.word 0		; next free cell in flash dictionary
  54 006c 0000      	LAST:   .word 0		; next free cell in static ram 
  55 006e 0000      	KEEP:	.word 0		; next free cell in eeprom
  56               	
  57               	; those are volatile, dont care
  58 0070 0000      	STAT:	.word 0		; state of interpreter, 0 interprete, 1 compile, 2 postpone
  59 0072 0000      	RADX:	.word 0		; numeric radix for convertion
  60               	
  61 0074 0000      	TIBP:	.word 0		; offset in TIB
  62 0076 0000      	TIBC:	.word 0		; count down
  63               	
  64 0078 0000      	FIBP:	.word 0		; offset in FIB
  65 007a 0000      	FIBC:	.word 0		; count down
  66               	
  67 007c 0000      	PTRP:   .word 0     ; offset in PAD
  68 007e 0000      	CTRC:   .word 0     ; count down 
  69               	
  70 0080 0000      	PAGE:   .word 0     ; flash page to flush 
  71 0082 0000      	PADS:   .word 0     ; reference to scratch area 
  72               	
  73 0084 0000 0000 	FIB0:	.space FIB_SIZE, 0x0
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  74 00c4 0000 0000 	TIB0:	.space TIB_SIZE, 0x0
  74      0000 0000 
  74      0000 0000 
  74      0000 0000 
  74      0000 0000 
  75               	
  76 010c 0000 0000 	PSZ:	.space STACK_SIZE, 0x0
  76      0000 0000 
  76      0000 0000 
  76      0000 0000 
  76      0000 0000 
  77 0130 0000 0000 	RSZ:	.space STACK_SIZE, 0x0
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  78 0154 0000 0000 	SPZ:	.space STACK_SIZE, 0x0
  78      0000 0000 
  78      0000 0000 
  78      0000 0000 
  78      0000 0000 
  79               	
  80               	PS0 = PSZ + STACK_SIZE
  81               	RS0 = RSZ + STACK_SIZE
  82               	SP0 = SPZ + STACK_SIZE
  83               	
  84               	
  85               	;.equ free_sram, SRAM_END - .
  86               	
  87               	;----------------------------------------------------------------------
  88               	.p2align 1, 0x00
  89               	#include "bios.S"
   1               	
   2               	/*
   3               	 *  DISCLAIMER
   4               	 *
   5               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   6               	 *
   7               	 *  Permission is hereby granted, free of charge, to any person obtaining
   8               	 *  a copy of this software and associated documentation files (the
   9               	 *  "Software"), to deal in the Software without restriction, including
  10               	 *  without limitation the rights to use, copy, modify, merge, publish,
  11               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  12               	 *  permit persons to whom the Software is furnished to do so, subject to
  13               	 *  the following conditions:
  14               	 *
  15               	 *  The above copyright notice and this permission notice shall be
  16               	 *  included in all copies or substantial portions of the Software.
  17               	 *
  18               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  19               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  20               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  21               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  22               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  23               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  24               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  25               	 *
  26               	 */
  27               	
  28               	;----------------------------------------------------------------------
  29               	; review for atmega328
  30               	;   10/2022 @agsb
  31               	
  32               	;----------------------------------------------------------------------
  33               	;
  34               	; code segment, flash
  35               	;
  36               	.section .text
  37               	.org 0x000
  38               	.global boot
  39               	boot:
  40               	
  41               	;---------------------------------------------------------------------
  42               	; from avr manual, do not change 
  43               	; reserved I/O Memory address
  44               	;
  45               	__SREG__ = 0x3f
  46               	__SP_H__ = 0x3e
  47               	__SP_L__ = 0x3d
  48               	
  49               	/* USART */
  50               	UBRRL = 0x09
  51               	UCSRC = 0x20
  52               	UCSRB = 0x0a
  53               	UCSRA = 0x0b
  54               	
  55               	/* Watch dog */
  56               	WDTCR = 0x21
  57               	
  58               	/* timer0 */
  59               	TCNT0 = 0x32
  60               	TCCR0 = 0x33
  61               	TIMSK = 0x39
  62               	
  63               	/* SPMCR */
  64               	SPMCR = 0x37
  65               	
  66               	/* SPM BITS */
  67               	SPMIE = 7
  68               	RWWSB = 6
  69               	/* bit 5 reserved */
  70               	RWWSRE = 4
  71               	BLBSET = 3
  72               	PGWRT = 2
  73               	PGERS = 1
  74               	SPMEN = 0
  75               	
  76               	;----------------------------------------------------------------------
  77               	;
  78               	; classic interrup vector table
  79               	;
  80               	;----------------------------------------------------------------------
  81               	
  82 0000 00C0      	    rjmp RESET ; Reset Handler
  83 0002 1895      	    reti ; rjmp EXT_INT0 ; IRQ0 Handler
  84 0004 1895      	    reti ; rjmp EXT_INT1 ; IRQ1 Handler
  85 0006 1895      	    reti ; rjmp TIM2_COMP ; Timer2 Compare Handler
  86 0008 1895      	    reti ; rjmp TIM2_OVF ; Timer2 Overflow Handler
  87 000a 1895      	    reti ; rjmp TIM1_CAPT ; Timer1 Capture Handler
  88 000c 1895      	    reti ; rjmp TIM1_COMPA ; Timer1 CompareA Handler
  89 000e 1895      	    reti ; rjmp TIM1_COMPB ; Timer1 CompareB Handler
  90 0010 1895      	    reti ; rjmp TIM1_OVF ; Timer1 Overflow Handler
  91 0012 00C0      	    rjmp TIM0_OVF ; Timer0 Overflow Handler
  92 0014 1895      	    reti ; rjmp SPI_STC ; SPI Transfer Complete Handler
  93 0016 1895      	    reti ; rjmp USART_RXC ; USART RX Complete Handler
  94 0018 1895      	    reti ; rjmp USART_UDRE ; ((0x0C) + 0x20) Empty Handler
  95 001a 1895      	    reti ; rjmp USART_TXC ; USART TX Complete Handler
  96 001c 1895      	    reti ; rjmp ADC ; ADC Conversion Complete Handler
  97 001e 1895      	    reti ; rjmp EE_RDY ; EEPROM Ready Handler
  98 0020 1895      	    reti ; rjmp ANA_COMP ; Analog Comparator Handler
  99 0022 1895      	    reti ; rjmp TWSI ; Two-wire Serial Interface Handler
 100 0024 1895      	    reti ; rjmp SPM_RDY ; Store Program Memory Ready Handler;
 101               	
 102               	;----------------------------------------------------------------------
 103               	; 
 104               	RESET:
 105               	; clear interrupts
 106 0026 F894      	    cli
 107               	; init _zero_ as zero
 108 0028 3324      	    clr r3
 109 002a 3FBE      	    out __SREG__, r3 ; clear sreg
 110               	; init real sp at end of sram
 111 002c 94E0      	    ldi r25, hi8(SRAM_END)
 112 002e 9EBF      	    out __SP_H__, r25
 113 0030 8FE5      	    ldi r24, lo8(SRAM_END)
 114 0032 8DBF      	    out __SP_L__, r24
 115               	; enable interrupts
 116 0034 7894      	    sei
 117 0036 00C0      	    rjmp BOOT
 118               	
 119               	;----------------------------------------------------------------------
 120               	;
 121               	;   do not use r0 and r1 are scratch registers used in spm, mul, des, etc
 122               	;
 123               	;   generic:
 124               	;   r2 , how knows ?
 125               	;   r3 , always zero
 126               	;   r4 , offset to prescale
 127               	;      
 128               	;   for timer0:
 129               	;   r5 , saved SREG
 130               	;   r6 , counter each 1ms low byte
 131               	;   r7 , counter each 1ms high byte
 132               	;
 133               	;   timer0 prescale 
 134               	;   for 8 MHz, prescale 64, offset 131, results about 1 ms
 135               	;   64 * 125 = 8000 ; 
 136               	;   256 - 125 = 131 ; offset for miliseconds
 137               	;
 138               	;   ticks counts till 65 seconds
 139               	;
 140               	; interrupt routine
 141               	TIM0_OVF:
 142               	; save flags
 143 0038 2FB6      	    in r2, __SREG__
 144               	; disable interrups
 145 003a F894      	    cli
 146               	; increase counter and also clear 
 147 003c 8894      	    clc
 148               	; do not use r0 or r1 elsewhere
 149 003e 3324      	    clr r3
 150 0040 3394      	    inc r3
 151 0042 630C      	    add ticks_low, r3
 152 0044 3A94      	    dec r3
 153 0046 731C      	    adc ticks_high, r3
 154               	; offset counter 256 - 125 = 131
 155               	; but was 10 clocks till out, 
 156               	; then 131 + 10 = 141
 157               	OFFSETCNT = 141
 158 0048 42BE      	    out TCNT0, r4
 159               	; reset watch dog
 160 004a A895      	    wdr
 161               	; load flags and return
 162 004c 2FBE      	    out __SREG__, r2
 163               	; enable interrups
 164 004e 7894      	    sei
 165 0050 1895      	    reti
 166               	
 167               	;----------------------------------------------------------------------
 168               	/*
 169               	
 170               	OSCAL calibration,
 171               	from atmel 2555 note:
 172               	for atmega8 theorical for 25oC at 5V, value is 168.
 173               	for optiboot, value is 143 as sample better for 38400 bauds, maybe less for 40oC
 174               	CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DOSC_CAL=142' '-DNUM_LED_FLASHES=2' -DBAUD_RATE=38400
 175               	*/
 176               	
 177               	;----------------------------------------------------------------------
 178               	; hook to init hardware
 179               	BOOT:
 180 0052 F894      	   cli
 181               	
 182               	;----------------------------------------------------------------------
 183               	; init timer0, with internal clock 8MHz, from gcc public code, io ports as constants
 184               	;
 185               	; preset of timer0, with internal clock 8MHz ; cycle 64 ; offset 131
 186               	; timer cycle * offset / clock = 8k/8M = 1ms
 187               	;
 188               	TIMER0_SET:
 189               	; enable pre-escaler
 190 0054 03B7      	    in r16, TCCR0
 191 0056 0360      	    ori r16, (1 << 1) | (1 << 0)
 192 0058 03BF      	    out TCCR0, r16
 193               	; offset counter, so it counts 125 clocks inside the interrup routines
 194 005a 0DE8      	    ldi r16, OFFSETCNT
 195               	; preserve offset
 196 005c 402E      	    mov r4, r16
 197 005e 02BF      	    out TCNT0, r16
 198               	; enable counter
 199 0060 09B7      	    in r16, TIMSK
 200 0062 0160      	    ori r16, (1 << 0) 
 201 0064 09BF      	    out TIMSK, r16
 202               	
 203               	;----------------------------------------------------------------------
 204               	; init watch dog, from avr-gcc public code, io ports as constants
 205               	;
 206               	; write logical one to WDCE and WDE, set WDP2, WDP1, WDP0 to ~ 2.0 s
 207               	;
 208               	WATCHDOG_SET:
 209 0066 01B5      	    in r16, WDTCR
 210 0068 0861      	    ori r16, (1 << 4) | (1 << 3)
 211 006a 0760      	    ori r16, (1 << 2) | (1 << 1) | (1 << 0)
 212 006c 01BD      	    out WDTCR, r16
 213               	
 214               	;----------------------------------------------------------------------
 215               	; init usart, from avr-gcc public code
 216               	;
 217               	;   defaults to 9600, 8N1, no control
 218               	;
 219               	USART_SET:
 220 006e 4427      	    clr wrk_low
 221 0070 40BD      	    out UCSRC, wrk_low
 222 0072 44E3      	    ldi wrk_low, lo8(52)
 223 0074 49B9      	    out UBRRL, wrk_low
 224 0076 4AB1      	    in wrk_low, UCSRB
 225 0078 4861      	    ori wrk_low, lo8(24)
 226 007a 4AB9      	    out UCSRB, wrk_low
 227 007c 4EE8      	    ldi wrk_low, lo8(-114)
 228 007e 40BD      	    out UCSRC, wrk_low
 229 0080 40B5      	    in wrk_low, UCSRC
 230 0082 4064      	    ori wrk_low,lo8(64)
 231 0084 40BD      	    out UCSRC, wrk_low
 232               	
 233               	;----------------------------------------------------------------------
 234               	; enable interrupts
 235               	GOOD:
 236 0086 7894      	    sei
 237 0088 00C0      	    rjmp COLD 
 238               	
 239               	#ifdef EEPS
 240               	
 241               	;----------------------------------------------------------------------
 242               	;
 243               	;   Assembly Code Example, from AVR manual
 244               	;
 245               	EEPROM_write:
 246               	; Wait for completion of previous write
 247               	    sbic EECR, EEPE
 248               	    rjmp EEPROM_write
 249               	; Set up address (r18:r17) in address register
 250               	    out EEARH, r25
 251               	    out EEARL, r24
 252               	; Write data (r16) to Data Register
 253               	    out EEDR, r22
 254               	; Write logical one to EEMPE
 255               	    sbi EECR, EEMPE
 256               	; Start eeprom write by setting EEPE
 257               	    sbi EECR, EEPE
 258               	    ret
 259               	
 260               	EEPROM_read:
 261               	; Wait for completion of previous write
 262               	    sbic EECR, EEPE
 263               	    rjmp EEPROM_read
 264               	; Set up address (r18:r17) in address register
 265               	    out EEARH, r25
 266               	    out EEARL, r24
 267               	; Start eeprom read by writing EERE
 268               	    sbi EECR, EERE
 269               	; Read data from Data Register
 270               	    in r22, EEDR
 271               	    ret
 272               	
 273               	#endif
 274               	
 275               	.equ bios_end, .
 276               	...
  90               	
  91               	;----------------------------------------------------------------------
  92               	.p2align 1, 0x00
  93               	#include "messages.S"
   1               	
   2               	/*
   3               	 *  DISCLAIMER
   4               	 *
   5               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   6               	 *
   7               	 *  Permission is hereby granted, free of charge, to any person obtaining
   8               	 *  a copy of this software and associated documentation files (the
   9               	 *  "Software"), to deal in the Software without restriction, including
  10               	 *  without limitation the rights to use, copy, modify, merge, publish,
  11               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  12               	 *  permit persons to whom the Software is furnished to do so, subject to
  13               	 *  the following conditions:
  14               	 *
  15               	 *  The above copyright notice and this permission notice shall be
  16               	 *  included in all copies or substantial portions of the Software.
  17               	 *
  18               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  19               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  20               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  21               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  22               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  23               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  24               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  25               	 *
  26               	 */
  27               	
  28 008a 4449 5343 	 .ascii "DISCLAIMER this software is provided \"AS IS\".\n"
  28      4C41 494D 
  28      4552 2074 
  28      6869 7320 
  28      736F 6674 
  29 00b8 436F 7079 	 .ascii "Copyright © 2020, Alvaro Gomes Sobral Barcellos,\n"
  29      7269 6768 
  29      7420 C2A9 
  29      2032 3032 
  29      302C 2041 
  30 00ea 4C69 6365 	 .ascii "Licence Creative Commons,f8f98284-589e-4290-867c-0ac3824721ac,\n"
  30      6E63 6520 
  30      4372 6561 
  30      7469 7665 
  30      2043 6F6D 
  31 0129 4174 7472 	 .ascii "Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)\n"
  31      6962 7574 
  31      696F 6E2D 
  31      4E6F 6E43 
  31      6F6D 6D65 
  32               	
  94               	
  95               	;----------------------------------------------------------------------
  96               	.p2align 1, 0x00
  97               	#include "forth.S"
   1               	
   2               	
   3               	/*
   4               	 *  DISCLAIMER
   5               	 *
   6               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   7               	 *
   8               	 *  Permission is hereby granted, free of charge, to any person obtaining
   9               	 *  a copy of this software and associated documentation files (the
  10               	 *  "Software"), to deal in the Software without restriction, including
  11               	 *  without limitation the rights to use, copy, modify, merge, publish,
  12               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  13               	 *  permit persons to whom the Software is furnished to do so, subject to
  14               	 *  the following conditions:
  15               	 *
  16               	 *  The above copyright notice and this permission notice shall be
  17               	 *  included in all copies or substantial portions of the Software.
  18               	 *
  19               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  20               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  21               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  22               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  23               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  24               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  25               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  26               	 *
  27               	 */
  28               	
  29               	;---------------------------------------------------------------------
  30               	;
  31               	;    A small Forth for ATmega8 
  32               	;
  33               	;---------------------------------------------------------------------
  34               	; dictionary structure 
  35               	;
  36               	; cell size is a word of 16 bits 
  37               	;
  38               	; .word  link    link to previous 
  39               	; .byte  size    sizeof name OR flags 
  40               	; .ascii "name"  name, plus a pad byte with BL (0x32) if size is odd 
  41               	; .word  param,  many references 
  42               	;
  43               	;----------------------------------------------------------------------
  44               	 
  45               	;
  46               	; classics 
  47               	;
  49               	.LIST 
  50               	 
  51               	;----------------------------------------------------------------------
  52               	; start of dictionary 
  53               	;
  54               	 
  55               	;----------------------------------------------------------------------
  56               	;
  57               	; this is the forth inner engine, 
  58               	;
  59               	; a compound word, aka twig, must end with a reference to ENDS 
  60               	;
  61               	; a primitive work, aka leaf, must start with NOOP and ends with POON 
  62               	;
  63               	; the size byte must be masked by: or 0xF0 
  64               	;
  65               	; memory pointer r30:r31 as Z 
  66               	; parameter stack pointer r28:r29 as Y 
  67               	; return stack pointer r26:r27 as X 
  68               	; top of stack r24:r25 
  69               	; temporary second of stack r22:r23 
  70               	; temporary working r20:r21 
  71               	; instruction pointer r18:r19 
  72               	;
  73               	; Can only use LPM to access flash memory ? YES! 
  74               	;
  75               	; forth: all constants in flash
  76               	;
  77               	; user: all constants and all variables in sdram 
  78               	;
  79               	; why ? flash memory suports only 10.000 cycles 
  80               	;
  81               	 
  82               	;----------------------------------------------------------------------
  83               	; starts just above sram ends 
  84               	;
  85               	; use the address to determine if is flash or is sram, above is flash :)
  86               	;
  87               	.section .text 
  88 0164 0000 0000 	.org FORTH_INI
  88      0000 0000 
  88      0000 0000 
  88      0000 0000 
  88      0000 0000 
  89               	.global forth 
  90               	_forth_: 
  91               	;----------------------------------------------------------------------
  92               	; inner interpreter, 
  93               	; it is also a primitive word 
  94               	;
  95               	; also called semis 
  96               	;
  97 0460 0000 1445 	HEADER "ENDS", "ENDS", F_LEAP
  97      4E44 5320 
  98               	; does nothing and mark as primitive 
  99 0468 0000      	    NOOP 
 100               	 
 101               	; pull ips from rsp 
 102               	_exit: 
 103 046a FD91 ED91 	    rspull zpm_low, zpm_high 
 104               	 
 105               	; load w with contents of cell at ips 
 106               	_next: 
 107               	; zpm points to next word cfa
 108 046e EE0F FF1F 	    pmload wrk_low, wrk_high ; also increments zpm 
 108      4591 5591 
 108      F795 E795 
 109               	 
 110               	; if zero (NULL) is a primitive word 
 111               	_void:
 112 047a 242E      	    mov _work_, wrk_low 
 113 047c 252A      	    or _work_, wrk_high 
 114 047e 01F0      	    brbs BIT_ZERO, _jump
 115               	 
 116               	; else is a reference 
 117               	_enter: 
 118 0480 EE93 FE93 	    rspush zpm_low, zpm_high ; push next reference 
 119 0484 FA01      	    movw zpm_low, wrk_low ; point to this reference 
 120 0486 00C0      	    rjmp _next 
 121               	 
 122               	; then jump, for exec it, save next return into ips 
 123               	_jump: 
 124 0488 3296      	    adiw zpm_low, 2	     
 125 048a 9F01      	    movw ips_low, zpm_low    
 126 048c 3297      	    sbiw zpm_low, 2	     
 127 048e 0994      	    ijmp 
 128               	 
 129               	; then link, for continue, load return from ips 
 130               	_link: 
 131 0490 F901      	    movw zpm_low, ips_low ; points to next reference 
 132 0492 00C0      	    rjmp _next 
 133               	 
 134               	;----------------------------------------------------------------------
 135               	 
 136               	;********************************************************************** 
 137               	;
 138               	;   primitive words 
 139               	;
 140               	;----------------------------------------------------------------------
 141               	 
 142               	;----------------------------------------------------------------------
 143               	;
 144               	; ok 0= 
 145               	;
 146 0494 0000 1230 	HEADER "0=", "ZEQU", F_LEAP
 146      3D20 
 147 049a 0000      	    NOOP 
 148 049c 892B      	    or tos_low, tos_high
 149 049e 01F0      	    brbs BIT_ZERO, _ftrue
 150               	_ffalse:
 151 04a0 8827      	    clr tos_low 
 152 04a2 9927      	    clr tos_high 
 153 04a4 00C0      	    POON
 154               	_ftrue: 
 155 04a6 8FEF      	    ser tos_low 
 156 04a8 9FEF      	    ser tos_high 
 157 04aa 00C0      	    POON
 158               	 
 159               	;----------------------------------------------------------------------
 160               	;
 161               	; ok ! to (w a -- ) 
 162               	; only in sram 
 163               	;
 164 04ac 0000 1121 	HEADER "!", "TO", F_LEAP
 165 04b0 0000      	    NOOP 
 166 04b2 FC01      	    movw  zpm_low, tos_low
 167 04b4 9991 8991 	    pspull tos_low, tos_high 
 168               	
 169               	; if above _forth_ is flash 
 170 04b8 50E0      	    ldi wrk_high, hi8(_forth_) 
 171 04ba E030      	    cpi zpm_low, lo8(_forth_) 
 172 04bc F507      	    cpc zpm_high, wrk_high 
 173 04be 04F4      	    brge _isflash_to 
 174               	 
 175               	_isram_to: 
 176 04c0 8193      	    srsave tos_low 
 177 04c2 9193      	    srsave tos_high
 178 04c4 9991 8991 	    pspull tos_low, tos_high 
 179 04c8 00C0      	    POON 
 180               	 
 181               	_isflash_to: 
 182               	;   do flash flush, later :( still not done zzzz
 183 04ca 00C0      	    POON 
 184               	 
 185               	;----------------------------------------------------------------------
 186               	;
 187               	; ok @ at ( a -- w ) 
 188               	; only in sram 
 189               	;
 190 04cc 0000 1140 	HEADER "@", "AT", F_LEAP
 191 04d0 0000      	    NOOP 
 192 04d2 FC01      	    movw zpm_low, tos_low 
 193               	 
 194               	; if above _forth_ is flash 
 195 04d4 50E0      	    ldi wrk_high, hi8(_forth_) 
 196 04d6 E030      	    cpi zpm_low, lo8(_forth_) 
 197 04d8 F507      	    cpc zpm_high, wrk_high 
 198 04da 04F4      	    brge _isflash_at 
 199               	 
 200               	_isram_at: 
 201 04dc 8191      	    srload tos_low 
 202 04de 9191      	    srload tos_high 
 203 04e0 00C0      	    POON
 204               	 
 205               	_isflash_at: 
 206 04e2 EE0F FF1F 	    pmload tos_low, tos_high 
 206      8591 9591 
 206      F795 E795 
 207 04ee 00C0      	    POON
 208               	 
 209               	;----------------------------------------------------------------------
 210               	;
 211               	; ok ( -- -1 ) 
 212               	;
 213 04f0 0000 1454 	HEADER "TRUE", "FTRUE", F_LEAP
 213      5255 4520 
 214 04f8 0000      	    NOOP 
 215 04fa 8A93 9A93 	    pspush tos_low, tos_high 
 216               	_iftrue: 
 217 04fe 8FEF      	    ser tos_low 
 218 0500 9FEF      	    ser tos_high 
 219 0502 00C0      	    POON 
 220               	 
 221               	;----------------------------------------------------------------------
 222               	;
 223               	; ok ( -- 0 ) 
 224               	;
 225 0504 0000 1546 	HEADER "FALSE", "FFALSE", F_LEAP
 225      414C 5345 
 226 050c 0000      	    NOOP 
 227 050e 8A93 9A93 	    pspush tos_low, tos_high 
 228               	_iffalse: 
 229 0512 8827      	    clr tos_low 
 230 0514 9927      	    clr tos_high 
 231 0516 00C0      	    POON 
 232               	 
 233               	;----------------------------------------------------------------------
 234               	;
 235               	; ok ( w1 w2 -- 0 | -1 ) 
 236               	;
 237 0518 0000 113C 	HEADER "<", "LTHAN", F_LEAP
 238 051c 0000      	    NOOP 
 239 051e 7991 6991 	    pspull nos_low, nos_high 
 240 0522 8617      	    cp tos_low, nos_low 
 241 0524 9707      	    cpc tos_high, nos_high 
 242 0526 04F0      	    brlt _iftrue 
 243 0528 00C0      	    rjmp _iffalse 
 244               	 
 245               	;----------------------------------------------------------------------
 246               	;
 247               	; ok ( w -- ) ( -- W) 
 248               	;      
 249               	;
 250 052a 0000 123E 	HEADER ">R", "TOR", F_LEAP
 250      5220 
 251 0530 0000      	    NOOP 
 252 0532 8E93 9E93 	    rspush tos_low, tos_high 
 253 0536 9991 8991 	    pspull tos_low, tos_high 
 254 053a 00C0      	    POON 
 255               	 
 256               	;----------------------------------------------------------------------
 257               	;
 258               	; ok ( -- w ) ( w -- ) 
 259               	;     
 260               	;
 261 053c 0000 1252 	HEADER "R>", "RTO", F_LEAP
 261      3E20 
 262 0542 0000      	    NOOP 
 263 0544 8A93 9A93 	    pspush tos_low, tos_high 
 264 0548 9D91 8D91 	    rspull tos_low, tos_high 
 265 054c 00C0      	    POON 
 266               	 
 267               	;----------------------------------------------------------------------
 268               	;
 269               	; ok ( -- w ) ( w -- w ) 
 270               	;
 271 054e 0000 1252 	HEADER "R@", "RAT", F_LEAP
 271      4020 
 272 0554 0000      	    NOOP 
 273 0556 8A93 9A93 	    pspush tos_low, tos_high 
 274 055a 9D91 8D91 	    rspull tos_low, tos_high 
 275 055e 8E93 9E93 	    rspush tos_low, tos_high 
 276 0562 00C0      	    POON 
 277               	 
 278               	;----------------------------------------------------------------------
 279               	;
 280               	; ok ( rsp -- ) 
 281               	;
 282 0564 0000 1352 	HEADER "RS!", "RPTO", F_LEAP
 282      5321 
 283 056a 0000      	    NOOP 
 284 056c DC01      	    movw rsp_low, tos_low 
 285 056e 9991 8991 	    pspull tos_low, tos_high 
 286 0572 00C0      	    POON 
 287               	 
 288               	;----------------------------------------------------------------------
 289               	;
 290               	; ok ( psp -- ) 
 291               	;
 292 0574 0000 1350 	HEADER "PS!", "SPTO", F_LEAP
 292      5321 
 293 057a 0000      	    NOOP 
 294 057c EC01      	    movw psp_low, tos_low 
 295 057e 9991 8991 	    pspull tos_low, tos_high 
 296 0582 00C0      	    POON 
 297               	 
 298               	;----------------------------------------------------------------------
 299               	;
 300               	; ok ( -- rsp) 
 301               	; put the top of return stack at tos
 302               	;
 303 0584 0000 1352 	HEADER "RS@", "RPAT", F_LEAP
 303      5340 
 304 058a 0000      	    NOOP 
 305 058c 8A93 9A93 	    pspush tos_low, tos_high 
 306 0590 CD01      	    movw tos_low, rsp_low 
 307 0592 00C0      	    POON 
 308               	 
 309               	;----------------------------------------------------------------------
 310               	;
 311               	; ok ( -- psp ) 
 312               	; put the top of parameter stack at tos
 313               	;
 314 0594 0000 1350 	HEADER "PS@", "SPAT", F_LEAP
 314      5340 
 315 059a 0000      	    NOOP 
 316 059c 8A93 9A93 	    pspush tos_low, tos_high 
 317 05a0 CE01      	    movw tos_low, psp_low 
 318 05a2 00C0      	    POON 
 319               	
 320               	;----------------------------------------------------------------------
 321               	;
 322               	; ok ( w -- ) 
 323               	;     
 324               	;
 325 05a4 0000 1444 	HEADER "DROP", "DROP", F_LEAP
 325      524F 5020 
 326 05ac 0000      	    NOOP
 327               	PULL: 
 328 05ae 9991 8991 	    pspull tos_low, tos_high 
 329 05b2 00C0      	    POON 
 330               	 
 331               	;----------------------------------------------------------------------
 332               	;
 333               	; ok ( w -- w w) 
 334               	;
 335 05b4 0000 1344 	HEADER "DUP", "DUP", F_LEAP
 335      5550 
 336 05ba 0000      	    NOOP 
 337               	PUSH:
 338 05bc 8A93 9A93 	    pspush tos_low, tos_high 
 339 05c0 00C0      	    POON 
 340               	 
 341               	;----------------------------------------------------------------------
 342               	;
 343               	; ok ( w2 w1 -- w1 w2 ) 
 344               	;
 345 05c2 0000 1453 	HEADER "SWAP", "SWAP", F_LEAP
 345      5741 5020 
 346 05ca 0000      	    NOOP 
 347 05cc 7991 6991 	    pspull nos_low, nos_high 
 348 05d0 8A93 9A93 	    pspush tos_low, tos_high 
 349 05d4 CB01      	    movw tos_low, nos_low
 350 05d6 00C0      	    POON 
 351               	 
 352               	;----------------------------------------------------------------------
 353               	;
 354               	; ok ( 0 | w -- 0 | w w ) 
 355               	; dup if tos not zero 
 356               	;
 357 05d8 0000 143F 	HEADER "?DUP", "ZDUP", F_LEAP
 357      4455 5020 
 358 05e0 0000      	    NOOP 
 359 05e2 282E 292A 	    test_zero tos_low, tos_high, 1f 
 359      01F0 
 360 05e8 8A93 9A93 	    pspush tos_low, tos_high 
 361               	1: 
 362 05ec 00C0      	    POON 
 363               	;----------------------------------------------------------------------
 364               	;
 365               	; ok ( w1 w2 -- w2 + w1 ) 
 366               	;
 367 05ee 0000 112B 	HEADER "+", "PLUS", F_LEAP
 368 05f2 0000      	    NOOP 
 369 05f4 7991 6991 	    pspull nos_low, nos_high 
 370 05f8 8894      	    clc 
 371 05fa 860F      	    add tos_low, nos_low 
 372 05fc 971F      	    adc tos_high, nos_high 
 373 05fe 00C0      	    POON 
 374               	 
 375               	;----------------------------------------------------------------------
 376               	;
 377               	; ok ( w1 w2 -- w2 - w1 ) 
 378               	;
 379 0600 0000 112D 	HEADER "-", "MINUS", F_LEAP
 380 0604 0000      	    NOOP 
 381 0606 7991 6991 	    pspull nos_low, nos_high 
 382 060a 8894      	    clc 
 383 060c 861B      	    sub tos_low, nos_low 
 384 060e 970B      	    sbc tos_high, nos_high 
 385 0610 00C0      	    POON 
 386               	 
 387               	;----------------------------------------------------------------------
 388               	;
 389               	; ok ( w1 w2 -- w2 NAND w1 ) 
 390               	;
 391 0612 0000 144E 	HEADER "NAND", "NAND", F_LEAP
 391      414E 4420 
 392 061a 0000      	    NOOP 
 393 061c 7991 6991 	    pspull nos_low, nos_high 
 394 0620 8623      	    and tos_low, nos_low 
 395 0622 9723      	    and tos_high, nos_high 
 396 0624 6095      	    com nos_low 
 397 0626 7095      	    com nos_high 
 398 0628 00C0      	    POON 
 399               	
 400               	;----------------------------------------------------------------------
 401               	;
 402               	; ok ( w1 w2 -- w2 AND w1 ) 
 403               	;
 404 062a 0000 1341 	HEADER "AND", "AND", F_LEAP
 404      4E44 
 405 0630 0000      	    NOOP 
 406 0632 7991 6991 	    pspull nos_low, nos_high 
 407 0636 8623      	    and  tos_low, nos_low 
 408 0638 9723      	    and  tos_high, nos_high 
 409 063a 00C0      	    POON 
 410               	 
 411               	;----------------------------------------------------------------------
 412               	;
 413               	; ok ( w1 w2 -- w2 OR w1 ) 
 414               	;
 415 063c 0000 124F 	HEADER "OR", "OR", F_LEAP
 415      5220 
 416 0642 0000      	    NOOP 
 417 0644 7991 6991 	    pspull nos_low, nos_high 
 418 0648 862B      	    or   tos_low, nos_low 
 419 064a 972B      	    or   tos_high, nos_high 
 420 064c 00C0      	    POON 
 421               	 
 422               	;----------------------------------------------------------------------
 423               	;
 424               	; ok ( w1 w2 -- w2 XOR w1 ) 
 425               	;
 426 064e 0000 1358 	HEADER "XOR", "XOR", F_LEAP
 426      4F52 
 427 0654 0000      	    NOOP 
 428 0656 7991 6991 	    pspull nos_low, nos_high 
 429 065a 8627      	    eor  tos_low, nos_low 
 430 065c 9727      	    eor  tos_high, nos_high 
 431 065e 00C0      	    POON 
 432               	 
 433               	;----------------------------------------------------------------------
 434               	;
 435               	; ok INV 
 436               	;
 437 0660 0000 1649 	HEADER "INVERT", "INVERT", F_LEAP
 437      4E56 4552 
 437      5420 
 438 066a 0000      	    NOOP 
 439               	_inv: 
 440 066c 8095      	    com tos_low 
 441 066e 9095      	    com tos_high 
 442 0670 00C0      	    POON 
 443               	 
 444               	;----------------------------------------------------------------------
 445               	;
 446               	; ok NEG 
 447               	;
 448 0672 0000 164E 	HEADER "NEGATE", "NEGATE", F_LEAP
 448      4547 4154 
 448      4520 
 449 067c 0000      	    NOOP 
 450               	_neg: 
 451 067e 8195      	    neg tos_low 
 452 0680 9195      	    neg tos_high 
 453 0682 00C0      	    POON 
 454               	 
 455               	;----------------------------------------------------------------------
 456               	;
 457               	; ok ( w -- w * 2 ) same as shift left << 1, unsigned 
 458               	;
 459 0684 0000 1232 	HEADER "2*", "SHL", F_LEAP
 459      2A20 
 460 068a 0000      	    NOOP 
 461               	_shl: 
 462 068c 8894      	    clc 
 463 068e 880F      	    lsl   tos_low 
 464 0690 991F      	    rol   tos_high 
 465 0692 00C0      	    POON 
 466               	 
 467               	;----------------------------------------------------------------------
 468               	;
 469               	; ok ( w -- w / 2 ) same as shift right >> 1, unsigned 
 470               	;
 471 0694 0000 1232 	HEADER "2/", "SHR", F_LEAP
 471      2F20 
 472 069a 0000      	    NOOP 
 473               	_shr: 
 474 069c 8894      	    clc 
 475 069e 8695      	    lsr tos_low 
 476 06a0 9795      	    ror tos_high 
 477 06a2 00C0      	    POON 
 478               	 
 479               	;----------------------------------------------------------------------
 480               	;
 481               	; ok ( nAnB -- nBnA ) swap bytes in a word 
 482               	;
 483 06a4 0000 123E 	HEADER "><", "ENDIAN", F_LEAP
 483      3C20 
 484 06aa 0000      	    NOOP 
 485 06ac 282E      	    mov _work_, tos_low
 486 06ae 892F      	    mov tos_low, tos_high
 487 06b0 922D      	    mov tos_high, _work_
 488 06b2 00C0      	    POON 
 489               	 
 490               	;----------------------------------------------------------------------
 491               	;
 492               	; ok ( branch next reference ) 
 493               	; doing offsets in bytes 
 494               	;
 495 06b4 0000 1642 	HEADER "BRANCH", "BRANCH", F_LEAP
 495      5241 4E43 
 495      4820 
 496 06be 0000      	    NOOP 
 497               	_branch: 
 498 06c0 F901      	    movw zpm_low, ips_low 
 499 06c2 EE0F FF1F 	    pmload tos_low, tos_high 
 499      8591 9591 
 499      F795 E795 
 500 06ce 280F      	    add ips_low, tos_low 
 501 06d0 391F      	    adc ips_high, tos_high 
 502 06d2 9991 8991 	    pspull tos_low, tos_high 
 503 06d6 00C0      	    POON 
 504               	 
 505               	;----------------------------------------------------------------------
 506               	;
 507               	; ok ( u -- ) 
 508               	; branch IF tos IS zero 
 509               	;
 510 06d8 0000 173F 	HEADER "?BRANCH", "ZBRANCH", F_LEAP
 510      4252 414E 
 510      4348 
 511 06e2 0000      	    NOOP 
 512 06e4 282E 292A 	    test_zero tos_low, tos_high, _branch 
 512      01F0 
 513 06ea C901      	    movw tos_low, ips_low 
 514 06ec 0296      	    adiw tos_low, 2 
 515 06ee 9C01      	    movw ips_low, tos_low 
 516 06f0 9991 8991 	    pspull tos_low, tos_high 
 517 06f4 00C0      	    POON 
 518               	 
 519               	;----------------------------------------------------------------------
 520               	;
 521               	;  ok DOCON ( -- w ), (IP++) -> Tos
 522               	;  push a value from flash to data stack 
 523               	;
 524 06f6 0000 1544 	HEADER "DOCON", "DOCON", F_LEAP
 524      4F43 4F4E 
 525 06fe 0000      	    NOOP 
 526 0700 8A93 9A93 	    pspush tos_low, tos_high
 527 0704 F901      	    movw zpm_low, ips_low 
 528 0706 EE0F FF1F 	    pmload tos_low, tos_high 
 528      8591 9591 
 528      F795 E795 
 529 0712 9F01      	    movw ips_low, zpm_low 
 530 0714 00C0      	    POON 
 531               	 
 532               	;----------------------------------------------------------------------
 533               	;
 534               	;  ok DOVAR ( -- w ), IP++ -> Tos 
 535               	;  push a reference from flash to data stack 
 536               	;
 537 0716 0000 1544 	HEADER "DOVAR", "DOVAR", F_LEAP
 537      4F56 4152 
 538 071e 0000      	    NOOP 
 539 0720 8A93 9A93 	    pspush tos_low, tos_high
 540 0724 C901      	    movw tos_low, ips_low 
 541 0726 0296      	    adiw tos_low, 2
 542 0728 9C01      	    movw ips_low, tos_low
 543 072a 0297      	    sbiw tos_low, 2
 544 072c 00C0      	    POON 
 545               	 
 546               	;----------------------------------------------------------------------
 547               	;
 548               	; ok ( w -- w ) 
 549               	;  data space pointer align to CELL, atmega is always 
 550               	 
 551               	;
 552 072e 0000 1541 	HEADER "ALIGN", "ALLIGN", F_LEAP
 552      4C49 474E 
 553 0736 0000      	    NOOP 
 554 0738 0196      	    adiw tos_low, 1 
 555 073a 8F7F      	    cbr tos_low, 0 
 556 073c 00C0      	    POON 
 557               	 
 558               	;----------------------------------------------------------------------
 559               	;
 560               	; ok ( -- CELL ) 
 561               	; CELL is 2 ; size of a cell 
 562               	;
 563 073e 0000 1443 	HEADER "CELL", "CELL", F_LEAP
 563      454C 4C20 
 564 0746 0000      	    NOOP 
 565 0748 8A93 9A93 	    pspush tos_low, tos_high
 566 074c 82E0      	    ldi tos_low, CELL_SIZE 
 567 074e 9927      	    clr tos_high 
 568 0750 00C0      	    POON 
 569               	 
 570               	;----------------------------------------------------------------------
 571               	;
 572               	; ok C! ( c a -- ) 
 573               	; only works in sram
 574               	;
 575 0752 0000 1243 	HEADER "C!", "CTO", F_LEAP
 575      2120 
 576 0758 0000      	    NOOP 
 577 075a FC01      	    movw zpm_low, tos_low
 578 075c 9991 8991 	    pspull tos_low, tos_high
 579 0760 8083      	    st Z, tos_low
 580 0762 9991 8991 	    pspull tos_low, tos_high 
 581 0766 00C0      	    rjmp TO 
 582               	 
 583               	;----------------------------------------------------------------------
 584               	;
 585               	; ok C@ ( a -- c ) 
 586               	; only works in sram
 587               	;
 588 0768 0000 1243 	HEADER "C@", "CAT", F_LEAP
 588      4020 
 589 076e 0000      	    NOOP 
 590 0770 FC01      	    movw zpm_low, tos_low
 591 0772 8081      	    ld tos_low, Z
 592 0774 9927      	    clr tos_high
 593 0776 00C0      	    rjmp AT 
 594               	 
 595               	;----------------------------------------------------------------------
 596               	;
 597               	; ok ( a1 a2 u -- 0 | 1) 
 598               	; compare u bytes from source++ to destination++, decrease count--
 599               	; returns 0 if equal (no differ) 
 600               	; only works in sram
 601               	;
 602 0778 0000 1543 	HEADER "CSAME", "CSAME", F_LEAP
 602      5341 4D45 
 603 0780 0000      	    NOOP 
 604               	    ; WARNING No bound check and counter equal 0 moves nothing 
 605               	 
 606               	    ; pull address source 
 607 0782 F991 E991 	    pspull zpm_low, zpm_high 
 608               	 
 609               	    ; pull address destin 
 610 0786 7991 6991 	    pspull nos_low, nos_high 
 611               	 
 612               	    ; no offset 
 613               	 
 614               	    ; free Y
 615 078a CE93 DE93 	    rspush psp_low, psp_high
 616 078e EB01      	    movw psp_low, nos_low
 617               	
 618               	1: 
 619 0790 282E      	    mov _work_, tos_low
 620 0792 292A      	    or _work_, tos_high
 621 0794 01F0      	    brbs BIT_ZERO, 2f
 622               	 
 623 0796 4991      	    ld wrk_low, Y+ 
 624 0798 5191      	    ld wrk_high, Z+ 
 625 079a 452B      	    or wrk_low, wrk_high 
 626 079c 01F4      	    brbc BIT_ZERO, 3f 
 627               	 
 628               	    ; again 
 629 079e 0197      	    sbiw tos_low, 1
 630 07a0 00C0      	    rjmp 1b 
 631               	 
 632               	2: 
 633               	    ; equal 
 634 07a2 4427      	    clr wrk_low 
 635 07a4 5527      	    clr wrk_high 
 636 07a6 00C0      	    rjmp 4f 
 637               	3: 
 638               	    ; not equal 
 639 07a8 4FEF      	    ser wrk_low 
 640 07aa 5FEF      	    ser wrk_high 
 641               	4: 
 642               	    ; pull psp 
 643 07ac DD91 CD91 	    rspull psp_low, psp_high 
 644 07b0 00C0      	    POON 
 645               	 
 646               	;----------------------------------------------------------------------
 647               	;
 648               	; ok ( s d u -- ) 
 649               	; move (forward) copy u bytes from source++ to destination++, decrease count--
 650               	; only works in sram
 651               	;
 652 07b2 0000 1543 	HEADER "CMOVE", "MOVEF", F_LEAP
 652      4D4F 5645 
 653 07ba 0000      	    NOOP 
 654               	    ; WARNING No bound check and counter equal 0 moves nothing 
 655               	 
 656               	    ; pull address source 
 657 07bc F991 E991 	    pspull zpm_low, zpm_high 
 658               	 
 659               	    ; pull address destin 
 660 07c0 7991 6991 	    pspull nos_low, nos_high 
 661               	 
 662               	    ; free Y
 663 07c4 CE93 DE93 	    rspush psp_low, psp_high
 664 07c8 EB01      	    movw psp_low, nos_low
 665               	
 666               	    ; no offset 
 667               	 
 668               	1: 
 669 07ca 282E      	    mov _work_, tos_low
 670 07cc 292A      	    or _work_, tos_high
 671 07ce 01F0      	    brbs BIT_ZERO, 2f
 672               	 
 673               	    ; move a cell 
 674 07d0 2990      	    ld _work_, Y+ 
 675 07d2 2192      	    st Z+, _work_ 
 676               	 
 677               	    ; again 
 678 07d4 0197      	    sbiw tos_low, 1
 679 07d6 00C0      	    rjmp 1b 
 680               	 
 681               	2: 
 682               	    ; pull psp 
 683 07d8 DD91 CD91 	    rspull psp_low, psp_high 
 684 07dc 00C0      	    POON 
 685               	 
 686               	;----------------------------------------------------------------------
 687               	;
 688               	; ok ( s d u -- ) 
 689               	; move (backward) copy bytes from source-- to destination--, decrease count--
 690               	; only works in sram
 691               	;
 692 07de 0000 1643 	HEADER "CMOVE>", "MOVEB", F_LEAP
 692      4D4F 5645 
 692      3E20 
 693 07e8 0000      	    NOOP 
 694               	    ; WARNING No bound check and counter equal 0 moves nothing 
 695               	 
 696               	    ; pull address source 
 697 07ea F991 E991 	    pspull zpm_low, zpm_high 
 698               	 
 699               	    ; pull address destin 
 700 07ee 7991 6991 	    pspull nos_low, nos_high 
 701               	 
 702               	    ; free Y
 703 07f2 CE93 DE93 	    rspush psp_low, psp_high
 704 07f6 EB01      	    movw psp_low, nos_low
 705               	
 706               	    ; do offset
 707 07f8 E80F      	    add zpm_low, tos_low
 708 07fa F91F      	    adc zpm_high, tos_high
 709 07fc C80F      	    add psp_low, tos_low
 710 07fe D91F      	    adc psp_high, tos_high
 711               	 
 712               	    ; move a byte
 713               	1:
 714 0800 282E      	    mov _work_, tos_low
 715 0802 292A      	    or _work_, tos_high
 716 0804 01F0      	    brbs BIT_ZERO, 2f
 717               	 
 718 0806 2A90      	    ld _work_, -Y
 719 0808 2292      	    st -Z, _work_
 720               	
 721               	    ; again 
 722 080a 0197      	    sbiw tos_low, 1
 723 080c 00C0      	    rjmp 1b 
 724               	
 725               	2:
 726               	    ; pull psp
 727 080e DD91 CD91 	    rspull psp_low, psp_high
 728 0812 00C0      	    POON
 729               	
 730               	;********************************************************************** 
 731               	;    load variables 
 732               	;
 733               	;----------------------------------------------------------------------
 734               	;
 735               	; ok ( -- w) 
 736               	;
 737 0814 0000 1354 	HEADER "TIB", "TIB", F_LEAP
 737      4942 
 738 081a 0000      	    NOOP
 739 081c 8A93 9A93 	    pspush tos_low, tos_high
 740 0820 80E0      	    ldi tos_low, lo8(TIB0) 
 741 0822 90E0      	    ldi tos_high, hi8(TIB0) 
 742 0824 00C0      	    POON 
 743               	 
 744               	;----------------------------------------------------------------------
 745               	;
 746               	; ok ( -- w) 
 747               	;
 748 0826 0000 164C 	HEADER "LATEST", "LATEST", F_LEAP
 748      4154 4553 
 748      5420 
 749 0830 0000      	    NOOP 
 750 0832 8A93 9A93 	    pspush tos_low, tos_high
 751 0836 80E0      	    ldi tos_low, lo8(WORD) 
 752 0838 90E0      	    ldi tos_high, hi8(WORD) 
 753 083a 00C0      	    POON 
 754               	 
 755               	;----------------------------------------------------------------------
 756               	;
 757               	; ok ( -- w) 
 758               	;
 759 083c 0000 1553 	HEADER "STATE", "STATE", F_LEAP
 759      5441 5445 
 760 0844 0000      	    NOOP 
 761 0846 8A93 9A93 	    pspush tos_low, tos_high
 762 084a 80E0      	    ldi tos_low, lo8(STAT) 
 763 084c 90E0      	    ldi tos_high, hi8(STAT) 
 764 084e 00C0      	    POON 
 765               	 
 766               	;----------------------------------------------------------------------
 767               	;
 768               	; ok ( -- w) 
 769               	;
 770 0850 0000 1442 	HEADER "BASE", "BASE", F_LEAP
 770      4153 4520 
 771 0858 0000      	    NOOP 
 772 085a 8A93 9A93 	    pspush tos_low, tos_high
 773 085e 80E0      	    ldi tos_low, lo8(RADX) 
 774 0860 90E0      	    ldi tos_high, hi8(RADX) 
 775 0862 00C0      	    POON 
 776               	 
 777               	;----------------------------------------------------------------------
 778               	;
 779               	; ok ( -- w) 
 780               	;
 781 0864 0000 1628 	HEADER "(sram)", "sram_", F_LEAP
 781      7372 616D 
 781      2920 
 782 086e 0000      	    NOOP 
 783 0870 8A93 9A93 	    pspush tos_low, tos_high
 784 0874 80E0      	    ldi tos_low, lo8(LAST) 
 785 0876 90E0      	    ldi tos_high, hi8(LAST) 
 786 0878 00C0      	    POON 
 787               	 
 788               	;----------------------------------------------------------------------
 789               	;
 790               	; ok ( -- w) 
 791               	;
 792 087a 0000 1828 	HEADER "(eeprom)", "eeprom_", F_LEAP
 792      6565 7072 
 792      6F6D 2920 
 793 0886 0000      	    NOOP 
 794 0888 8A93 9A93 	    pspush tos_low, tos_high
 795 088c 80E0      	    ldi tos_low, lo8(KEEP) 
 796 088e 90E0      	    ldi tos_high, hi8(KEEP) 
 797 0890 00C0      	    POON 
 798               	 
 799               	;----------------------------------------------------------------------
 800               	;
 801               	; ok ( -- w) 
 802               	;
 803 0892 0000 1728 	HEADER "(flash)", "flash_", F_LEAP
 803      666C 6173 
 803      6829 
 804 089c 0000      	    NOOP 
 805 089e 8A93 9A93 	    pspush tos_low, tos_high
 806 08a2 80E0      	    ldi tos_low, lo8(HEAP) 
 807 08a4 90E0      	    ldi tos_high, hi8(HEAP) 
 808 08a6 00C0      	    POON 
 809               	 
 810               	;********************************************************************** 
 811               	;   usart i/O 
 812               	;
 813               	;----------------------------------------------------------------------
 814               	;
 815               	; ok ( -- w) 
 816               	; beware, it blocks while test if can receive a char 
 817               	;
 818 08a8 0000 134B 	HEADER "KEY", "KEY", F_LEAP
 818      4559 
 819 08ae 0000      	    NOOP 
 820               	1: 
 821 08b0 5F9B      	    sbis 0x0b, 7 
 822 08b2 00C0      	    rjmp 1b 
 823               	2: 
 824 08b4 8A93 9A93 	    pspush tos_low, tos_high
 825 08b8 8CB1      	    in tos_low, 0x0c 
 826 08ba 9927      	    clr tos_high 
 827 08bc 00C0      	    POON 
 828               	 
 829               	;----------------------------------------------------------------------
 830               	;
 831               	; ok ( -- 0 | w) 
 832               	; test if can receive a char, or return FALSE 
 833               	;
 834 08be 0000 144B 	HEADER "KEY?", "QKEY", F_LEAP
 834      4559 3F20 
 835 08c6 0000      	    NOOP 
 836               	3: 
 837 08c8 5F9B      	    sbis 0x0b, 7 
 838 08ca 00C0      	    rjmp _ffalse 
 839 08cc 00C0      	    rjmp 2b 
 840               	 
 841               	;----------------------------------------------------------------------
 842               	;
 843               	; ok ( w -- ) 
 844               	; beware, it blocks while test if can send a char 
 845               	;
 846 08ce 0000 1445 	HEADER "EMIT", "EMIT", F_LEAP
 846      4D49 5420 
 847 08d6 0000      	    NOOP 
 848               	1: 
 849 08d8 5D9B      	    sbis 0x0b, 5 
 850 08da 00C0      	    rjmp 1b 
 851               	2: 
 852 08dc 8CB9      	    out 0x0c, tos_low 
 853 08de 9991 8991 	    pspull tos_low, tos_high
 854 08e2 00C0      	    POON 
 855               	 
 856               	;----------------------------------------------------------------------
 857               	;
 858               	; ok ( w -- w 0) 
 859               	; test if can send a char, or return FALSE 
 860               	;
 861 08e4 0000 1545 	HEADER "EMIT?", "QEMIT", F_LEAP
 861      4D49 543F 
 862 08ec 0000      	    NOOP 
 863               	3: 
 864 08ee 5D9B      	    sbis 0x0b, 5 
 865 08f0 00C0      	    rjmp _ffalse 
 866 08f2 00C0      	    rjmp 2b 
 867               	 
 868               	;----------------------------------------------------------------------
 869               	;
 870               	; ok ( -- w) 
 871               	; push timer counter 
 872               	;
 873 08f4 0000 164D 	HEADER "MILLIS", "MILLIS", F_LEAP
 873      494C 4C49 
 873      5320 
 874 08fe 0000      	    NOOP 
 875 0900 8A93 9A93 	    pspush tos_low, tos_high 
 876 0904 C301      	    movw tos_low, ticks_low 
 877 0906 00C0      	    POON 
 878               	 
 879               	;----------------------------------------------------------------------
 880               	;
 881               	; ok ( -- 0 ) 
 882               	;
 883 0908 0000 1130 	HEADER "0", "ZERO", F_LEAP
 884 090c 0000      	    NOOP 
 885 090e 8A93 9A93 	    pspush tos_low, tos_high 
 886 0912 8827      	    clr tos_low 
 887 0914 9927      	    clr tos_high 
 888 0916 00C0      	    POON 
 889               	 
 890               	;----------------------------------------------------------------------
 891               	;
 892               	; ok ( -- 1 ) 
 893               	;
 894 0918 0000 1131 	HEADER "1", "ONE", F_LEAP
 895 091c 0000      	    NOOP 
 896 091e 8A93 9A93 	    pspush tos_low, tos_high 
 897 0922 8827      	    clr tos_low 
 898 0924 9927      	    clr tos_high 
 899 0926 8395      	    inc tos_low
 900 0928 00C0      	    POON 
 901               	
 902               	;----------------------------------------------------------------------
 903               	;
 904               	; ok ( -- 0 ) 
 905               	;
 906 092a 0000 1132 	HEADER "2", "TWO", F_LEAP
 907 092e 0000      	    NOOP 
 908 0930 8A93 9A93 	    pspush tos_low, tos_high 
 909 0934 8827      	    clr tos_low 
 910 0936 9927      	    clr tos_high 
 911 0938 8395      	    inc tos_low
 912 093a 8395      	    inc tos_low
 913 093c 00C0      	    POON 
 914               	 
 915               	;********************************************************************** 
 916               	; FORTH
 917               	;
 918               	;    the follow definitions of compound words 
 919               	;    are as already compiled into a list of references, 
 920               	;    that is a sequence of cells. 
 921               	;    No preorder because the assembler does translation 
 922               	;    of names to address (references) 
 923               	;
 924               	;    (some adapted from old fig-forth listings) 
 925               	;
 926               	;----------------------------------------------------------------------
 927               	;
 928               	; ok ( w3 w2 w1 -- w2 w3 w1 ) 
 929               	;
 930 093e 0000 0453 	HEADER "SWIP", "SWIP",
 930      5749 5020 
 931 0946 0000 0000 	    .word TOR, SWAP, RTO, ENDS 
 931      0000 0000 
 932               	 
 933               	;----------------------------------------------------------------------
 934               	;
 935               	; ok ( w2 w1 -- w2 w1 w2 ) 
 936               	;
 937 094e 0000 044F 	HEADER "OVER", "OVER",
 937      5645 5220 
 938 0956 0000 0000 	    .word TOR, DUP, RTO, SWAP, ENDS 
 938      0000 0000 
 938      0000 
 939               	 
 940               	;----------------------------------------------------------------------
 941               	;
 942               	; ok ( w3 w2 w1 -- w2 w1 w3 ) 
 943               	;
 944 0960 0000 0352 	HEADER "ROT", "ROTU",
 944      4F54 
 945 0966 0000 0000 	    .word SWIP, SWAP, ENDS 
 945      0000 
 946               	 
 947               	;----------------------------------------------------------------------
 948               	;
 949               	; ok ( w3 w2 w1 -- w1 w3 w2 ) 
 950               	;
 951 096c 0000 042D 	HEADER "-ROT", "ROTD",
 951      524F 5420 
 952 0974 0000 0000 	    .word SWAP, SWIP, ENDS 
 952      0000 
 953               	 
 954               	;----------------------------------------------------------------------
 955               	;
 956               	; ok ( w2 w1 --  w1 w2 w1 ) 
 957               	;
 958 097a 0000 0454 	HEADER "TUCK", "TUCK",
 958      5543 4B20 
 959 0982 0000 0000 	    .word DUP, SWIP, ENDS 
 959      0000 
 960               	 
 961               	;----------------------------------------------------------------------
 962               	;
 963               	; ok ( w3 w2 w1 --  w1 w2 w3 ) 
 964               	;
 965 0988 0000 0446 	HEADER "FLIP", "FLIP",
 965      4C49 5020 
 966 0990 0000 0000 	    .word SWAP, SWIP, SWAP, ENDS 
 966      0000 0000 
 967               	
 968               	;----------------------------------------------------------------------
 969               	;
 970               	; ok ( w1 w2 -- 0 | -1) 
 971               	;
 972 0998 0000 013D 	HEADER "=", "EQUAL",
 973 099c 0000 0000 	    .word MINUS, ZEQU, ENDS 
 973      0000 
 974               	 
 975               	;----------------------------------------------------------------------
 976               	;
 977               	; ok ( w1 w2 -- 0 | -1) 
 978               	;
 979 09a2 0000 023C 	HEADER "<>", "NOTEQUAL",
 979      3E20 
 980 09a8 0000 0000 	    .word EQUAL, INVERT, ENDS 
 980      0000 
 981               	 
 982               	;----------------------------------------------------------------------
 983               	;
 984               	; ok ( w1 w2 -- 0 | -1 ) 
 985               	;
 986 09ae 0000 013E 	HEADER ">", "GTHAN",
 987 09b2 0000 0000 	    .word SWAP, LTHAN, ENDS 
 987      0000 
 988               	 
 989               	;----------------------------------------------------------------------
 990               	;  ok 0>  must be signed 
 991               	;
 992 09b8 0000 0230 	HEADER "0>", "ZEROGT",
 992      3E20 
 993 09be 0000 0000 	     .word ZERO, LTHAN, ENDS 
 993      0000 
 994               	 
 995               	;----------------------------------------------------------------------
 996               	;  ok 0< must be signed 
 997               	;
 998 09c4 0000 0230 	HEADER "0<", "ZEROLT",
 998      3C20 
 999 09ca 0000 0000 	    .word ZERO, SWAP, LTHAN, ENDS 
 999      0000 0000 
 1000               	 
 1001               	;----------------------------------------------------------------------
 1002               	;
 1003               	; ok ( w -- w * CELL  ) 
 1004               	; CELL is 2, multiply by 2, easy way 
 1005               	;
 1006 09d2 0000 0543 	HEADER "CELLS", "CELLS",
 1006      454C 4C53 
 1007 09da 0000 0000 	    .word SHL, ENDS 
 1008               	 
 1009               	;----------------------------------------------------------------------
 1010               	;
 1011               	; ok ( w -- w + CELL ) 
 1012               	;
 1013 09de 0000 0543 	HEADER "CELL+", "CELLPLUS",
 1013      454C 4C2B 
 1014 09e6 0000 0000 	    .word CELL, PLUS, ENDS 
 1014      0000 
 1015               	 
 1016               	;----------------------------------------------------------------------
 1017               	;
 1018               	; ok ( w -- w - CELL ) 
 1019               	;
 1020 09ec 0000 0543 	HEADER "CELL-", "CELLMINUS",
 1020      454C 4C2D 
 1021 09f4 0000 0000 	    .word CELL, MINUS, ENDS 
 1021      0000 
 1022               	 
 1023               	;----------------------------------------------------------------------
 1024               	;
 1025               	; ok ( w -- w + 1 ) 
 1026               	;
 1027 09fa 0000 0231 	HEADER "1+", "ONEPLUS",
 1027      2B20 
 1028 0a00 0000 0000 	     .word ONE, PLUS, ENDS 
 1028      0000 
 1029               	 
 1030               	;----------------------------------------------------------------------
 1031               	;
 1032               	; ok ( w -- w - 1 ) 
 1033               	;
 1034 0a06 0000 0231 	HEADER "1-", "ONEMINUS",
 1034      2D20 
 1035 0a0c 0000 0000 	     .word ONE, MINUS, ENDS 
 1035      0000 
 1036               	 
 1037               	;----------------------------------------------------------------------
 1038               	;
 1039               	; ok ( w -- w + 2 ) 
 1040               	;
 1041 0a12 0000 0232 	HEADER "2+", "TWOPLUS",
 1041      2B20 
 1042 0a18 0000 0000 	     .word TWO, PLUS, ENDS 
 1042      0000 
 1043               	 
 1044               	;----------------------------------------------------------------------
 1045               	;
 1046               	; ok ( w -- w - 2 ) 
 1047               	;
 1048 0a1e 0000 0232 	HEADER "2-", "TWOMINUS",
 1048      2D20 
 1049 0a24 0000 0000 	     .word TWO, MINUS, ENDS 
 1049      0000 
 1050               	 
 1051               	;----------------------------------------------------------------------
 1052               	;
 1053               	; ok ( u w -- ) 
 1054               	;
 1055 0a2a 0000 022B 	HEADER "+!", "PLUSTO",
 1055      2120 
 1056 0a30 0000 0000 	    .word SWAP, OVER, AT, PLUS, SWAP, TO, ENDS 
 1056      0000 0000 
 1056      0000 0000 
 1056      0000 
 1057               	 
 1058               	;----------------------------------------------------------------------
 1059               	;
 1060               	; ok COMMMA ( w -- ) 
 1061               	;
 1062 0a3e 0000 012C 	HEADER ",", "COMMA",
 1063 0a42 0000 0000 	    .word HERE, TO, CELL, ALLOT, ENDS 
 1063      0000 0000 
 1063      0000 
 1064               	 
 1065               	;----------------------------------------------------------------------
 1066               	;
 1067               	; ok this puts next cell into stack and compiles into HERE 
 1068               	;
 1069 0a4c 0000 0443 	HEADER "COMP", "COMP",
 1069      4F4D 5020 
 1070 0a54 0000 0000 	    .word DOCON, COMMA, ENDS 
 1070      0000 
 1071               	 
 1072               	;----------------------------------------------------------------------
 1073               	;
 1074               	; ok compile a eow 
 1075               	;
 1076 0a5a 0000 0445 	HEADER "EXIT", "EXIT",
 1076      5849 5420 
 1077 0a62 0000 0000 	    .word COMP, ENDS, ENDS
 1077      0000 
 1078               	
 1079               	;----------------------------------------------------------------------
 1080               	;
 1081               	; ok compile a eow 
 1082               	;
 1083 0a68 0000 0445 	HEADER "EXEC", "EXEC",
 1083      5845 4320 
 1084 0a70 0000 0000 	    .word RTO, ENDS
 1085               	
 1086               	;----------------------------------------------------------------------
 1087               	;
 1088               	; ok compile a eow 
 1089               	;
 1090 0a74 0000 0454 	HEADER "TAIL", "TAIL",
 1090      4149 4C20 
 1091 0a7c 0000 0000 	    .word RAT, TWOMINUS, RTO, ENDS
 1091      0000 0000 
 1092               	
 1093               	;----------------------------------------------------------------------
 1094               	;
 1095               	; ok BACK 
 1096               	;
 1097 0a84 0000 8442 	HEADER "BACK", "BACK", F_IMMEDIATE,
 1097      4143 4B20 
 1098 0a8c 0000 0000 	    .word HERE, SWAP, MINUS, COMMA, ENDS 
 1098      0000 0000 
 1098      0000 
 1099               	 
 1100               	;----------------------------------------------------------------------
 1101               	;
 1102               	; ok MARK 
 1103               	;
 1104 0a96 0000 844D 	HEADER "MARK", "MARK", F_IMMEDIATE,
 1104      4152 4B20 
 1105 0a9e 0000 0000 	    .word HERE, 0, COMMA, ENDS 
 1105      0000 0000 
 1106               	 
 1107               	;----------------------------------------------------------------------
 1108               	;
 1109               	; ok BEGIN 
 1110               	;
 1111 0aa6 0000 8542 	HEADER "BEGIN", "BEGIN", F_IMMEDIATE,
 1111      4547 494E 
 1112 0aae 0000 0000 	    .word HERE, ENDS 
 1113               	 
 1114               	;----------------------------------------------------------------------
 1115               	;
 1116               	; ok AGAIN resolves a backward branch 
 1117               	;
 1118 0ab2 0000 8541 	HEADER "AGAIN", "AGAIN", F_IMMEDIATE,
 1118      4741 494E 
 1119 0aba 0000 0000 	    .word COMP, BRANCH, BACK, ENDS 
 1119      0000 0000 
 1120               	 
 1121               	;----------------------------------------------------------------------
 1122               	;
 1123               	; ok UNTIL 
 1124               	;
 1125 0ac2 0000 8555 	HEADER "UNTIL", "UNTIL", F_IMMEDIATE,
 1125      4E54 494C 
 1126 0aca 0000 0000 	    .word COMP, ZBRANCH, BACK, ENDS 
 1126      0000 0000 
 1127               	 
 1128               	;----------------------------------------------------------------------
 1129               	;
 1130               	; ok UNLESS 
 1131               	;
 1132 0ad2 0000 8655 	HEADER "UNLESS", "UNLESS", F_IMMEDIATE,
 1132      4E4C 4553 
 1132      5320 
 1133 0adc 0000 0000 	    .word INVERT, UNTIL, ENDS 
 1133      0000 
 1134               	 
 1135               	;----------------------------------------------------------------------
 1136               	;
 1137               	; ok IF 
 1138               	;
 1139 0ae2 0000 8249 	HEADER "IF", "IF", F_IMMEDIATE,
 1139      4620 
 1140 0ae8 0000 0000 	    .word COMP, ZBRANCH, MARK, ENDS 
 1140      0000 0000 
 1141               	 
 1142               	;----------------------------------------------------------------------
 1143               	;
 1144               	; ok ENDIF resolves a forward branch 
 1145               	; note: use of store if addres is not 'here' 
 1146               	;
 1147 0af0 0000 8545 	HEADER "ENDIF", "ENDIF", F_IMMEDIATE,
 1147      4E44 4946 
 1148 0af8 0000 0000 	    .word DUP, HERE, MINUS, SWAP, TO, ENDS 
 1148      0000 0000 
 1148      0000 0000 
 1149               	 
 1150               	;----------------------------------------------------------------------
 1151               	;
 1152               	; ok THEN 
 1153               	;
 1154 0b04 0000 8454 	HEADER "THEN", "THEN", F_IMMEDIATE,
 1154      4845 4E20 
 1155 0b0c 0000 0000 	    .word ENDIF, ENDS 
 1156               	 
 1157               	;----------------------------------------------------------------------
 1158               	;
 1159               	; ok ELSE 
 1160               	;
 1161 0b10 0000 8445 	HEADER "ELSE", "ELSE", F_IMMEDIATE,
 1161      4C53 4520 
 1162 0b18 0000 0000 	    .word COMP, BRANCH, MARK, SWAP, ENDIF, ENDS 
 1162      0000 0000 
 1162      0000 0000 
 1163               	 
 1164               	;----------------------------------------------------------------------
 1165               	;
 1166               	; ok WHILE 
 1167               	;
 1168 0b24 0000 8557 	HEADER "WHILE", "WHILE", F_IMMEDIATE,
 1168      4849 4C45 
 1169 0b2c 0000 0000 	    .word IF, ENDS 
 1170               	 
 1171               	;----------------------------------------------------------------------
 1172               	;
 1173               	; ok REPEAT 
 1174               	;
 1175 0b30 0000 8652 	HEADER "REPEAT", "REPEAT", F_IMMEDIATE,
 1175      4550 4541 
 1175      5420 
 1176 0b3a 0000 0000 	    .word TOR, TOR, AGAIN, RAT, RAT, MINUS, ENDIF, ENDS 
 1176      0000 0000 
 1176      0000 0000 
 1176      0000 0000 
 1177               	 
 1178               	;----------------------------------------------------------------------
 1179               	;
 1180               	; DO and LOOP runs from 0x8000 till 0x7FFF, -32768 to 32767
 1181               	; counting from 0 to 65535, as Forth-83
 1182               	; ZZZZ
 1183               	;
 1184               	;----------------------------------------------------------------------
 1185               	;
 1186               	; ok DO (Forth-83)
 1187               	;
 1188 0b4a 0000 8244 	HEADER "DO", "DO", F_IMMEDIATE,
 1188      4F20 
 1189 0b50 0000 0000 	    .word HERE, TOR, 0x8000, PLUS, DUP, TOR, MINUS, TOR, ENDS 
 1189      0080 0000 
 1189      0000 0000 
 1189      0000 0000 
 1189      0000 
 1190               	 
 1191               	;----------------------------------------------------------------------
 1192               	;
 1193               	; ok DONT (not Forth-83)
 1194               	;
 1195 0b62 0000 8444 	HEADER "DONT", "DONT", F_IMMEDIATE,
 1195      4F4E 5420 
 1196 0b6a 0000 0000 	    .word DROP, DROP, HERE, ENDS 
 1196      0000 0000 
 1197               	 
 1198               	;----------------------------------------------------------------------
 1199               	;
 1200               	; is QDO ( u n -- ) (Forth-83)
 1201               	;
 1202 0b72 0000 8351 	HEADER "QDO", "QDO", F_IMMEDIATE,
 1202      444F 
 1203 0b78 0000 0000 	    .word OVER, OVER, MINUS, COMP, ZBRANCH, HERE, DO, ENDS 
 1203      0000 0000 
 1203      0000 0000 
 1203      0000 0000 
 1204               	 
 1205               	;----------------------------------------------------------------------
 1206               	;
 1207               	; ok LOOP (Forth-83)
 1208               	;
 1209 0b88 0000 844C 	HEADER "LOOP", "LOOP", F_IMMEDIATE,
 1209      4F4F 5020 
 1210 0b90 0000 0000 	    .word RAT, ONEPLUS, ZBRANCH, ZZZZ 
 1210      0000 0000 
 1211 0b98 0000 0000 	    .word RPAT, CELL, MINUS, CELL, MINUS
 1211      0000 0000 
 1211      0000 
 1212 0ba2 0000      	    .word ENDS 
 1213               	 
 1214               	;----------------------------------------------------------------------
 1215               	;
 1216               	; ok LEAVE (Forth-83)
 1217               	;
 1218 0ba4 0000 854C 	HEADER "LEAVE", "LEAVE", F_IMMEDIATE,
 1218      4541 5645 
 1219 0bac 0000 0000 	    .word RTO, RTO, MINUS, ZZZZ, ENDS 
 1219      0000 0000 
 1219      0000 
 1220               	 
 1221               	;--------------------------------------------------------------------
 1222               	;
 1223               	;----------------------------------------------------------------------
 1224               	;
 1225 0bb6 0000 1443 	HEADER "COLD", "COLD", F_LEAP
 1225      4F4C 4420 
 1226 0bbe 0000      	    NOOP 
 1227               	
 1228               	; restart return stack 
 1229 0bc0 A0E0      	    ldi rsp_low, lo8(RS0) 
 1230 0bc2 B0E0      	    ldi rsp_high, hi8(RS0) 
 1231               	
 1232               	; restart parameter stack 
 1233 0bc4 C0E0      	    ldi psp_low, lo8(PS0) 
 1234 0bc6 D0E0      	    ldi psp_high, hi8(PS0) 
 1235               	
 1236               	; preload to WARM 
 1237               	    ; next word 
 1238 0bc8 E0E0      	    ldi zpm_low, lo8(WARM) 
 1239 0bca F0E0      	    ldi zpm_high, hi8(WARM) 
 1240 0bcc EE93 FE93 	    rspush zpm_low, zpm_high 
 1241 0bd0 00C0      	    POON 
 1242               	 
 1243               	;----------------------------------------------------------------------
 1244               	;
 1245 0bd2 0000 1457 	HEADER "WARM", "WARM", F_LEAP
 1245      4152 4D20 
 1246 0bda 0000      	    NOOP 
 1247               	    ; verify error code 
 1248               	    ; resets etc 
 1249 0bdc 00C0      	    POON 
 1250               	 
 1251               	;----------------------------------------------------------------------
 1252               	; does reset 
 1253               	;
 1254 0bde 0000 1342 	HEADER "BYE", "BYE", F_LEAP
 1254      5945 
 1255 0be4 0000      	    NOOP 
 1256 0be6 00C0      	    rjmp RESET 
 1257 0be8 00C0      	    POON 
 1258               	
 1259               	;----------------------------------------------------------------------
 1260               	;
 1261               	; is \]  
 1262               	;
 1263 0bea 0000 015D 	HEADER "]", "RBRAC",
 1264 0bee 0000 0000 	    .word ONE, STATE, TO, ENDS 
 1264      0000 0000 
 1265               	 
 1266               	;----------------------------------------------------------------------
 1267               	;
 1268               	; is \[ 
 1269               	;
 1270 0bf6 0000 915B 	HEADER "[", "LBRAC", F_IMMEDIATE | F_LEAP
 1271 0bfa 0000 0000 	    .word ZERO, STATE, TO, ENDS 
 1271      0000 0000 
 1272               	 
 1273               	;----------------------------------------------------------------------
 1274               	;
 1275               	; is TOGGLE ( a f -- )
 1276               	;
 1277 0c02 0000 0654 	HEADER "TOGGLE", "TOGGLE",
 1277      4F47 474C 
 1277      4520 
 1278 0c0c 0000 0000 	    .word OVER, AT, XOR, SWAP, TO, ENDS 
 1278      0000 0000 
 1278      0000 0000 
 1279               	 
 1280               	;----------------------------------------------------------------------
 1281               	;
 1282               	; is >NFA ( a f -- )
 1283               	;
 1284 0c18 0000 043E 	HEADER ">NFA", "TONFA",
 1284      4E46 4120 
 1285 0c20 0000 0000 	    .word CELL, PLUS, ENDS
 1285      0000 
 1286               	
 1287               	;----------------------------------------------------------------------
 1288               	;
 1289               	; is >CFA ( a f -- )
 1290               	;
 1291 0c26 0000 043E 	HEADER ">CFA", "TOCFA", 
 1291      4346 4120 
 1292 0c2e 0000 0000 	    .word CELL, PLUS, DUP, AT, F_UNMASK, AND, PLUS, ENDS
 1292      0000 0000 
 1292      0F00 0000 
 1292      0000 0000 
 1293               	
 1294               	;----------------------------------------------------------------------
 1295               	;
 1296               	; is HIDDEN 
 1297               	;
 1298 0c3e 0000 0648 	HEADER "HIDDEN", "HIDDEN",
 1298      4944 4445 
 1298      4E20 
 1299 0c48 0000 0000 	    .word LATEST, TONFA, F_HIDDEN, TOGGLE, ENDS 
 1299      2000 0000 
 1299      0000 
 1300               	
 1301               	;----------------------------------------------------------------------
 1302               	;
 1303               	; is IMMEDIATE 
 1304               	;
 1305 0c52 0000 0949 	HEADER "IMMEDIATE", "IMMEDIATE", 
 1305      4D4D 4544 
 1305      4941 5445 
 1306 0c5e 0000 0000 	    .word LATEST, TONFA, F_IMMEDIATE, TOGGLE, ENDS 
 1306      8000 0000 
 1306      0000 
 1307               	
 1308               	;----------------------------------------------------------------------
 1309               	;
 1310               	; is COMPILE_ONLY 
 1311               	;
 1312 0c68 0000 0C43 	HEADER "COMPILE_ONLY", "COMPILE_ONLY",
 1312      4F4D 5049 
 1312      4C45 5F4F 
 1312      4E4C 5920 
 1313 0c78 0000 0000 	    .word LATEST, TONFA, F_COMPILE, TOGGLE, ENDS 
 1313      4000 0000 
 1313      0000 
 1314               	
 1315               	;----------------------------------------------------------------------
 1316               	;
 1317               	; is HERE 
 1318               	;
 1319 0c82 0000 1448 	HEADER "HERE", "HERE", F_LEAP
 1319      4552 4520 
 1320 0c8a 0000 0000 	    .word HEAP, AT, ENDS 
 1320      0000 
 1321               	 
 1322               	;----------------------------------------------------------------------
 1323               	;
 1324               	; is ALLOT 
 1325               	;
 1326 0c90 0000 1541 	HEADER "ALLOT", "ALLOT", F_LEAP
 1326      4C4C 4F54 
 1327 0c98 0000 0000 	    .word HEAP, PLUSTO, ENDS 
 1327      0000 
 1328               	 
 1329               	;----------------------------------------------------------------------
 1330               	;
 1331               	; is compile a header 
 1332               	;
 1333 0c9e 0000 0643 	HEADER "CREATE", "CREATE",
 1333      5245 4154 
 1333      4520 
 1334 0ca8 0000      	    .word ENDS
 1335               	
 1336               	;----------------------------------------------------------------------
 1337               	;
 1338               	; is gets a cc<chars>cc from source
 1339               	;   ( -- a n )
 1340               	;
 1341 0caa 0000 0550 	HEADER "PARSE", "PARSE"
 1341      4152 5345 
 1342 0cb2 0000      	    .word ENDS
 1343               	
 1344               	;----------------------------------------------------------------------
 1345               	;
 1346               	; is  
 1347               	;
 1348 0cb4 0000 013A 	HEADER ":", "COLON",
 1349 0cb8 0000 0000 	    .word CREATE, RBRAC, ENDS 
 1349      0000 
 1350               	 
 1351               	;----------------------------------------------------------------------
 1352               	;
 1353               	; is  
 1354               	;
 1355 0cbe 0000 013B 	HEADER ";", "SEMMI",
 1356 0cc2 0000 0000 	    .word EXIT, LBRAC, ENDS 
 1356      0000 
 1357               	  
  98               	
  99               	;----------------------------------------------------------------------
 100               	;.p2align 1, 0x00
 101               	;#include "inside.S"
 102               	
 103               	;----------------------------------------------------------------------
 104               	;.p2align 1, 0x00
 105               	;#include "math.S"
 106               	
 107               	;----------------------------------------------------------------------
 108               	.p2align 1, 0x00
 109               	;#include "flush.S"
 110               	
 111               	;----------------------------------------------------------------------
 112               	.equ free_flash, .
 113               	
 114               	;----------------------------------------------------------------------
DEFINED SYMBOLS
              main.S:38     *ABS*:000000000000000c version
             forth.S:1355   .text:0000000000000cbe _link_
            macros.S:283    *ABS*:0000000000000048 TIB_SIZE
            macros.S:286    *ABS*:0000000000000024 STACK_SIZE
            macros.S:289    *ABS*:0000000000000002 CELL_SIZE
            macros.S:292    *ABS*:000000000000000f WORD_SIZE
            macros.S:295    *ABS*:0000000000000010 BASE_DEFAULT
            macros.S:300    *ABS*:0000000000000000 eeprom
            macros.S:301    *ABS*:0000000000000000 e_void
            macros.S:302    *ABS*:0000000000000002 e_seed
            macros.S:303    *ABS*:0000000000000004 e_turn
            macros.S:304    *ABS*:0000000000000006 e_rest
            macros.S:305    *ABS*:0000000000000008 e_word
            macros.S:306    *ABS*:000000000000000a e_heap
            macros.S:307    *ABS*:000000000000000c e_last
            macros.S:308    *ABS*:000000000000000e e_erom
            macros.S:326    *ABS*:0000000000000080 F_IMMEDIATE
            macros.S:327    *ABS*:0000000000000040 F_COMPILE
            macros.S:328    *ABS*:0000000000000020 F_HIDDEN
            macros.S:329    *ABS*:0000000000000010 F_LEAP
            macros.S:330    *ABS*:0000000000000000 F_COMMON
            macros.S:332    *ABS*:00000000000000f0 F_TOMASK
            macros.S:333    *ABS*:000000000000000f F_UNMASK
            macros.S:338    *ABS*:0000000000000000 NO_ERROR
            macros.S:339    *ABS*:fffffffffffffff7 INVALID_MEMORY
            macros.S:340    *ABS*:fffffffffffffff5 OVERFLOW
            macros.S:341    *ABS*:ffffffffffffffec WRITE_TO_READ_ONLY
            macros.S:342    *ABS*:ffffffffffffffe8 NOT_A_NUMBER
            macros.S:351    *ABS*:0000000000000011 XON_
            macros.S:353    *ABS*:0000000000000013 XOFF_
            macros.S:355    *ABS*:0000000000000015 NAK_
            macros.S:357    *ABS*:000000000000000d CR_
            macros.S:359    *ABS*:000000000000000a LF_
            macros.S:361    *ABS*:0000000000000008 BS_
            macros.S:363    *ABS*:0000000000000020 BL_
            macros.S:365    *ABS*:0000000000000001 BIT_ZERO
            macros.S:367    *ABS*:0000000000000000 BIT_CARRY
            macros.S:373    *ABS*:0000000000000040 SPM_SIZE
            macros.S:375    *ABS*:0000000000000060 SRAM_START
            macros.S:377    *ABS*:000000000000045f SRAM_END
            macros.S:379    *ABS*:0000000000000000 FLASH_RWW
            macros.S:381    *ABS*:0000000000001e00 FLASH_NRWW
            macros.S:383    *ABS*:0000000000001fff FLASH_END
            macros.S:407    *ABS*:0000000000000004 E2P_PAGESIZE
            macros.S:409    *ABS*:0000000000000000 E2P_START
            macros.S:411    *ABS*:00000000000001ff E2P_END
            macros.S:417    *ABS*:0000000000000040 FIB_SIZE
            macros.S:421    *ABS*:0000000000000460 FORTH_INI
              main.S:46     data:0000000000000060 VOID
              main.S:47     data:0000000000000062 SEED
              main.S:49     data:0000000000000064 TURN
              main.S:50     data:0000000000000066 REST
              main.S:52     data:0000000000000068 WORD
              main.S:53     data:000000000000006a HEAP
              main.S:54     data:000000000000006c LAST
              main.S:55     data:000000000000006e KEEP
              main.S:58     data:0000000000000070 STAT
              main.S:59     data:0000000000000072 RADX
              main.S:61     data:0000000000000074 TIBP
              main.S:62     data:0000000000000076 TIBC
              main.S:64     data:0000000000000078 FIBP
              main.S:65     data:000000000000007a FIBC
              main.S:67     data:000000000000007c PTRP
              main.S:68     data:000000000000007e CTRC
              main.S:70     data:0000000000000080 PAGE
              main.S:71     data:0000000000000082 PADS
              main.S:73     data:0000000000000084 FIB0
              main.S:74     data:00000000000000c4 TIB0
              main.S:76     data:000000000000010c PSZ
              main.S:77     data:0000000000000130 RSZ
              main.S:78     data:0000000000000154 SPZ
              main.S:76     data:0000000000000130 PS0
              main.S:77     data:0000000000000154 RS0
              main.S:78     data:0000000000000178 SP0
              bios.S:39     .text:0000000000000000 boot
              bios.S:45     *ABS*:000000000000003f __SREG__
              bios.S:46     *ABS*:000000000000003e __SP_H__
              bios.S:47     *ABS*:000000000000003d __SP_L__
              bios.S:50     *ABS*:0000000000000009 UBRRL
              bios.S:51     *ABS*:0000000000000020 UCSRC
              bios.S:52     *ABS*:000000000000000a UCSRB
              bios.S:53     *ABS*:000000000000000b UCSRA
              bios.S:56     *ABS*:0000000000000021 WDTCR
              bios.S:59     *ABS*:0000000000000032 TCNT0
              bios.S:60     *ABS*:0000000000000033 TCCR0
              bios.S:61     *ABS*:0000000000000039 TIMSK
              bios.S:64     *ABS*:0000000000000037 SPMCR
              bios.S:67     *ABS*:0000000000000007 SPMIE
              bios.S:68     *ABS*:0000000000000006 RWWSB
              bios.S:70     *ABS*:0000000000000004 RWWSRE
              bios.S:71     *ABS*:0000000000000003 BLBSET
              bios.S:72     *ABS*:0000000000000002 PGWRT
              bios.S:73     *ABS*:0000000000000001 PGERS
              bios.S:74     *ABS*:0000000000000000 SPMEN
              bios.S:104    .text:0000000000000026 RESET
              bios.S:141    .text:0000000000000038 TIM0_OVF
              bios.S:179    .text:0000000000000052 BOOT
              bios.S:157    *ABS*:000000000000008d OFFSETCNT
              bios.S:188    .text:0000000000000054 TIMER0_SET
              bios.S:208    .text:0000000000000066 WATCHDOG_SET
              bios.S:219    .text:000000000000006e USART_SET
              bios.S:235    .text:0000000000000086 GOOD
             forth.S:1225   .text:0000000000000bbe COLD
              bios.S:275    .text:000000000000008a bios_end
             forth.S:90     .text:0000000000000460 _forth_
             forth.S:97     .text:0000000000000460 is_ENDS
             forth.S:97     .text:0000000000000468 ENDS
             forth.S:102    .text:000000000000046a _exit
             forth.S:106    .text:000000000000046e _next
             forth.S:111    .text:000000000000047a _void
             forth.S:123    .text:0000000000000488 _jump
             forth.S:117    .text:0000000000000480 _enter
             forth.S:130    .text:0000000000000490 _link
             forth.S:146    .text:0000000000000494 is_ZEQU
             forth.S:146    .text:000000000000049a ZEQU
             forth.S:154    .text:00000000000004a6 _ftrue
             forth.S:150    .text:00000000000004a0 _ffalse
             forth.S:164    .text:00000000000004ac is_TO
             forth.S:164    .text:00000000000004b0 TO
             forth.S:181    .text:00000000000004ca _isflash_to
             forth.S:175    .text:00000000000004c0 _isram_to
             forth.S:190    .text:00000000000004cc is_AT
             forth.S:190    .text:00000000000004d0 AT
             forth.S:205    .text:00000000000004e2 _isflash_at
             forth.S:200    .text:00000000000004dc _isram_at
             forth.S:213    .text:00000000000004f0 is_FTRUE
             forth.S:213    .text:00000000000004f8 FTRUE
             forth.S:216    .text:00000000000004fe _iftrue
             forth.S:225    .text:0000000000000504 is_FFALSE
             forth.S:225    .text:000000000000050c FFALSE
             forth.S:228    .text:0000000000000512 _iffalse
             forth.S:237    .text:0000000000000518 is_LTHAN
             forth.S:237    .text:000000000000051c LTHAN
             forth.S:250    .text:000000000000052a is_TOR
             forth.S:250    .text:0000000000000530 TOR
             forth.S:261    .text:000000000000053c is_RTO
             forth.S:261    .text:0000000000000542 RTO
             forth.S:271    .text:000000000000054e is_RAT
             forth.S:271    .text:0000000000000554 RAT
             forth.S:282    .text:0000000000000564 is_RPTO
             forth.S:282    .text:000000000000056a RPTO
             forth.S:292    .text:0000000000000574 is_SPTO
             forth.S:292    .text:000000000000057a SPTO
             forth.S:303    .text:0000000000000584 is_RPAT
             forth.S:303    .text:000000000000058a RPAT
             forth.S:314    .text:0000000000000594 is_SPAT
             forth.S:314    .text:000000000000059a SPAT
             forth.S:325    .text:00000000000005a4 is_DROP
             forth.S:325    .text:00000000000005ac DROP
             forth.S:327    .text:00000000000005ae PULL
             forth.S:335    .text:00000000000005b4 is_DUP
             forth.S:335    .text:00000000000005ba DUP
             forth.S:337    .text:00000000000005bc PUSH
             forth.S:345    .text:00000000000005c2 is_SWAP
             forth.S:345    .text:00000000000005ca SWAP
             forth.S:357    .text:00000000000005d8 is_ZDUP
             forth.S:357    .text:00000000000005e0 ZDUP
             forth.S:367    .text:00000000000005ee is_PLUS
             forth.S:367    .text:00000000000005f2 PLUS
             forth.S:379    .text:0000000000000600 is_MINUS
             forth.S:379    .text:0000000000000604 MINUS
             forth.S:391    .text:0000000000000612 is_NAND
             forth.S:391    .text:000000000000061a NAND
             forth.S:404    .text:000000000000062a is_AND
             forth.S:404    .text:0000000000000630 AND
             forth.S:415    .text:000000000000063c is_OR
             forth.S:415    .text:0000000000000642 OR
             forth.S:426    .text:000000000000064e is_XOR
             forth.S:426    .text:0000000000000654 XOR
             forth.S:437    .text:0000000000000660 is_INVERT
             forth.S:437    .text:000000000000066a INVERT
             forth.S:439    .text:000000000000066c _inv
             forth.S:448    .text:0000000000000672 is_NEGATE
             forth.S:448    .text:000000000000067c NEGATE
             forth.S:450    .text:000000000000067e _neg
             forth.S:459    .text:0000000000000684 is_SHL
             forth.S:459    .text:000000000000068a SHL
             forth.S:461    .text:000000000000068c _shl
             forth.S:471    .text:0000000000000694 is_SHR
             forth.S:471    .text:000000000000069a SHR
             forth.S:473    .text:000000000000069c _shr
             forth.S:483    .text:00000000000006a4 is_ENDIAN
             forth.S:483    .text:00000000000006aa ENDIAN
             forth.S:495    .text:00000000000006b4 is_BRANCH
             forth.S:495    .text:00000000000006be BRANCH
             forth.S:497    .text:00000000000006c0 _branch
             forth.S:510    .text:00000000000006d8 is_ZBRANCH
             forth.S:510    .text:00000000000006e2 ZBRANCH
             forth.S:524    .text:00000000000006f6 is_DOCON
             forth.S:524    .text:00000000000006fe DOCON
             forth.S:537    .text:0000000000000716 is_DOVAR
             forth.S:537    .text:000000000000071e DOVAR
             forth.S:552    .text:000000000000072e is_ALLIGN
             forth.S:552    .text:0000000000000736 ALLIGN
             forth.S:563    .text:000000000000073e is_CELL
             forth.S:563    .text:0000000000000746 CELL
             forth.S:575    .text:0000000000000752 is_CTO
             forth.S:575    .text:0000000000000758 CTO
             forth.S:588    .text:0000000000000768 is_CAT
             forth.S:588    .text:000000000000076e CAT
             forth.S:602    .text:0000000000000778 is_CSAME
             forth.S:602    .text:0000000000000780 CSAME
             forth.S:652    .text:00000000000007b2 is_MOVEF
             forth.S:652    .text:00000000000007ba MOVEF
             forth.S:692    .text:00000000000007de is_MOVEB
             forth.S:692    .text:00000000000007e8 MOVEB
             forth.S:737    .text:0000000000000814 is_TIB
             forth.S:737    .text:000000000000081a TIB
             forth.S:748    .text:0000000000000826 is_LATEST
             forth.S:748    .text:0000000000000830 LATEST
             forth.S:759    .text:000000000000083c is_STATE
             forth.S:759    .text:0000000000000844 STATE
             forth.S:770    .text:0000000000000850 is_BASE
             forth.S:770    .text:0000000000000858 BASE
             forth.S:781    .text:0000000000000864 is_sram_
             forth.S:781    .text:000000000000086e sram_
             forth.S:792    .text:000000000000087a is_eeprom_
             forth.S:792    .text:0000000000000886 eeprom_
             forth.S:803    .text:0000000000000892 is_flash_
             forth.S:803    .text:000000000000089c flash_
             forth.S:818    .text:00000000000008a8 is_KEY
             forth.S:818    .text:00000000000008ae KEY
             forth.S:834    .text:00000000000008be is_QKEY
             forth.S:834    .text:00000000000008c6 QKEY
             forth.S:846    .text:00000000000008ce is_EMIT
             forth.S:846    .text:00000000000008d6 EMIT
             forth.S:861    .text:00000000000008e4 is_QEMIT
             forth.S:861    .text:00000000000008ec QEMIT
             forth.S:873    .text:00000000000008f4 is_MILLIS
             forth.S:873    .text:00000000000008fe MILLIS
             forth.S:883    .text:0000000000000908 is_ZERO
             forth.S:883    .text:000000000000090c ZERO
             forth.S:894    .text:0000000000000918 is_ONE
             forth.S:894    .text:000000000000091c ONE
             forth.S:906    .text:000000000000092a is_TWO
             forth.S:906    .text:000000000000092e TWO
             forth.S:930    .text:000000000000093e is_SWIP
             forth.S:930    .text:0000000000000946 SWIP
             forth.S:937    .text:000000000000094e is_OVER
             forth.S:937    .text:0000000000000956 OVER
             forth.S:944    .text:0000000000000960 is_ROTU
             forth.S:944    .text:0000000000000966 ROTU
             forth.S:951    .text:000000000000096c is_ROTD
             forth.S:951    .text:0000000000000974 ROTD
             forth.S:958    .text:000000000000097a is_TUCK
             forth.S:958    .text:0000000000000982 TUCK
             forth.S:965    .text:0000000000000988 is_FLIP
             forth.S:965    .text:0000000000000990 FLIP
             forth.S:972    .text:0000000000000998 is_EQUAL
             forth.S:972    .text:000000000000099c EQUAL
             forth.S:979    .text:00000000000009a2 is_NOTEQUAL
             forth.S:979    .text:00000000000009a8 NOTEQUAL
             forth.S:986    .text:00000000000009ae is_GTHAN
             forth.S:986    .text:00000000000009b2 GTHAN
             forth.S:992    .text:00000000000009b8 is_ZEROGT
             forth.S:992    .text:00000000000009be ZEROGT
             forth.S:998    .text:00000000000009c4 is_ZEROLT
             forth.S:998    .text:00000000000009ca ZEROLT
             forth.S:1006   .text:00000000000009d2 is_CELLS
             forth.S:1006   .text:00000000000009da CELLS
             forth.S:1013   .text:00000000000009de is_CELLPLUS
             forth.S:1013   .text:00000000000009e6 CELLPLUS
             forth.S:1020   .text:00000000000009ec is_CELLMINUS
             forth.S:1020   .text:00000000000009f4 CELLMINUS
             forth.S:1027   .text:00000000000009fa is_ONEPLUS
             forth.S:1027   .text:0000000000000a00 ONEPLUS
             forth.S:1034   .text:0000000000000a06 is_ONEMINUS
             forth.S:1034   .text:0000000000000a0c ONEMINUS
             forth.S:1041   .text:0000000000000a12 is_TWOPLUS
             forth.S:1041   .text:0000000000000a18 TWOPLUS
             forth.S:1048   .text:0000000000000a1e is_TWOMINUS
             forth.S:1048   .text:0000000000000a24 TWOMINUS
             forth.S:1055   .text:0000000000000a2a is_PLUSTO
             forth.S:1055   .text:0000000000000a30 PLUSTO
             forth.S:1062   .text:0000000000000a3e is_COMMA
             forth.S:1062   .text:0000000000000a42 COMMA
             forth.S:1319   .text:0000000000000c8a HERE
             forth.S:1326   .text:0000000000000c98 ALLOT
             forth.S:1069   .text:0000000000000a4c is_COMP
             forth.S:1069   .text:0000000000000a54 COMP
             forth.S:1076   .text:0000000000000a5a is_EXIT
             forth.S:1076   .text:0000000000000a62 EXIT
             forth.S:1083   .text:0000000000000a68 is_EXEC
             forth.S:1083   .text:0000000000000a70 EXEC
             forth.S:1090   .text:0000000000000a74 is_TAIL
             forth.S:1090   .text:0000000000000a7c TAIL
             forth.S:1097   .text:0000000000000a84 is_BACK
             forth.S:1097   .text:0000000000000a8c BACK
             forth.S:1104   .text:0000000000000a96 is_MARK
             forth.S:1104   .text:0000000000000a9e MARK
             forth.S:1111   .text:0000000000000aa6 is_BEGIN
             forth.S:1111   .text:0000000000000aae BEGIN
             forth.S:1118   .text:0000000000000ab2 is_AGAIN
             forth.S:1118   .text:0000000000000aba AGAIN
             forth.S:1125   .text:0000000000000ac2 is_UNTIL
             forth.S:1125   .text:0000000000000aca UNTIL
             forth.S:1132   .text:0000000000000ad2 is_UNLESS
             forth.S:1132   .text:0000000000000adc UNLESS
             forth.S:1139   .text:0000000000000ae2 is_IF
             forth.S:1139   .text:0000000000000ae8 IF
             forth.S:1147   .text:0000000000000af0 is_ENDIF
             forth.S:1147   .text:0000000000000af8 ENDIF
             forth.S:1154   .text:0000000000000b04 is_THEN
             forth.S:1154   .text:0000000000000b0c THEN
             forth.S:1161   .text:0000000000000b10 is_ELSE
             forth.S:1161   .text:0000000000000b18 ELSE
             forth.S:1168   .text:0000000000000b24 is_WHILE
             forth.S:1168   .text:0000000000000b2c WHILE
             forth.S:1175   .text:0000000000000b30 is_REPEAT
             forth.S:1175   .text:0000000000000b3a REPEAT
             forth.S:1188   .text:0000000000000b4a is_DO
             forth.S:1188   .text:0000000000000b50 DO
             forth.S:1195   .text:0000000000000b62 is_DONT
             forth.S:1195   .text:0000000000000b6a DONT
             forth.S:1202   .text:0000000000000b72 is_QDO
             forth.S:1202   .text:0000000000000b78 QDO
             forth.S:1209   .text:0000000000000b88 is_LOOP
             forth.S:1209   .text:0000000000000b90 LOOP
             forth.S:1218   .text:0000000000000ba4 is_LEAVE
             forth.S:1218   .text:0000000000000bac LEAVE
             forth.S:1225   .text:0000000000000bb6 is_COLD
             forth.S:1245   .text:0000000000000bda WARM
             forth.S:1245   .text:0000000000000bd2 is_WARM
             forth.S:1254   .text:0000000000000bde is_BYE
             forth.S:1254   .text:0000000000000be4 BYE
             forth.S:1263   .text:0000000000000bea is_RBRAC
             forth.S:1263   .text:0000000000000bee RBRAC
             forth.S:1270   .text:0000000000000bf6 is_LBRAC
             forth.S:1270   .text:0000000000000bfa LBRAC
             forth.S:1277   .text:0000000000000c02 is_TOGGLE
             forth.S:1277   .text:0000000000000c0c TOGGLE
             forth.S:1284   .text:0000000000000c18 is_TONFA
             forth.S:1284   .text:0000000000000c20 TONFA
             forth.S:1291   .text:0000000000000c26 is_TOCFA
             forth.S:1291   .text:0000000000000c2e TOCFA
             forth.S:1298   .text:0000000000000c3e is_HIDDEN
             forth.S:1298   .text:0000000000000c48 HIDDEN
             forth.S:1305   .text:0000000000000c52 is_IMMEDIATE
             forth.S:1305   .text:0000000000000c5e IMMEDIATE
             forth.S:1312   .text:0000000000000c68 is_COMPILE_ONLY
             forth.S:1312   .text:0000000000000c78 COMPILE_ONLY
             forth.S:1319   .text:0000000000000c82 is_HERE
             forth.S:1326   .text:0000000000000c90 is_ALLOT
             forth.S:1333   .text:0000000000000c9e is_CREATE
             forth.S:1333   .text:0000000000000ca8 CREATE
             forth.S:1341   .text:0000000000000caa is_PARSE
             forth.S:1341   .text:0000000000000cb2 PARSE
             forth.S:1348   .text:0000000000000cb4 is_COLON
             forth.S:1348   .text:0000000000000cb8 COLON
             forth.S:1355   .text:0000000000000cbe is_SEMMI
             forth.S:1355   .text:0000000000000cc2 SEMMI
              main.S:112    .text:0000000000000cc8 free_flash

UNDEFINED SYMBOLS
forth
ZZZZ
