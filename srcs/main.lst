   1               	# 1 "main.S"
   1               	/*
   0               	
   0               	
   2               	 *  DISCLAIMER"
   3               	 *
   4               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   5               	 *
   6               	 *  Permission is hereby granted, free of charge, to any person obtaining
   7               	 *  a copy of this software and associated documentation files (the
   8               	 *  "Software"), to deal in the Software without restriction, including
   9               	 *  without limitation the rights to use, copy, modify, merge, publish,
  10               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  11               	 *  permit persons to whom the Software is furnished to do so, subject to
  12               	 *  the following conditions"
  13               	 *
  14               	 *  The above copyright notice and this permission notice shall be
  15               	 *  included in all copies or substantial portions of the Software.
  16               	 *
  17               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  18               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  19               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  20               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  21               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  22               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  23               	 *
  24               	 */
  25               	
  26               	;---------------------------------------------------------------------
  27               	; atmega8 avr
  28               	;
  29               	; UPDATE: 10/2022 to include stuff for atmega328 
  30               	;---------------------------------------------------------------------
  31               	
  32               	;----------------------------------------------------------------------
  33               	;
  34               	; version information
  35               	;
  36               	.equ version, 12 ; 0.00.10
  37               	
  38               	#include "macros.S"
   1               	
   2               	/*
   3               	 *  DISCLAIMER"
   4               	 *
   5               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   6               	 *
   7               	 *  Permission is hereby granted, free of charge, to any person obtaining
   8               	 *  a copy of this software and associated documentation files (the
   9               	 *  "Software"), to deal in the Software without restriction, including
  10               	 *  without limitation the rights to use, copy, modify, merge, publish,
  11               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  12               	 *  permit persons to whom the Software is furnished to do so, subject to
  13               	 *  the following conditions"
  14               	 *
  15               	 *  The above copyright notice and this permission notice shall be
  16               	 *  included in all copies or substantial portions of the Software.
  17               	 *
  18               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  19               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  20               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  21               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  22               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  23               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  24               	 *
  25               	 */
  26               	
  27               	;----------------------------------------------------------------------
  28               	;
  29               	;   MUST use gnu cpp 
  30               	;   use with .S (upper S) or
  31               	;   use with -x assembler-with-cpp
  32               	;
  33               	;     can't use alias 
  34               	;----------------------------------------------------------------------
  35               	;
  36               	; all defines, equs, macros are defined in this file
  37               	;
  38               	
  39               	#define atmega8
  40               	
  41               	;----------------------------------------------------------------------
  42               	;
  43               	;    about registers 
  44               	;
  45               	; r1:r0 reserved and used in internal atmega8 instructions, as spm, mul, des, etc
  46               	;
  47               	
  48               	#define _reserved_r0_ r0
  49               	#define _reserved_r1_ r1
  50               	
  51               	; generic scratch 
  52               	#define _work_ r2
  53               	
  54               	; always zero, keep by interrupt
  55               	#define _zero_ r3
  56               	
  57               	; offset for adjust timer0 interrupt counter
  58               	#define _offs_ r4
  59               	
  60               	; sreg keep in interrupts
  61               	#define _sreg_ r5
  62               	
  63               	; ticks counter for timer0 at 1 ms, (count 65 sec)
  64               	#define ticks_low r6
  65               	#define ticks_high r7
  66               	
  67               	; work used only at boot in pseudo bios
  68               	#define bios_work r16
  69               	
  70               	;-----------------------------------------------------------------------
  71               	;
  72               	; forth model (like pdp-11)
  73               	;
  74               	; Z generic pointer for access sram and flash memory, lpm, spm, index, etc
  75               	#define zpm_low r30
  76               	#define zpm_high r31
  77               	
  78               	; Y parameter stack pointer for access sram
  79               	#define psp_low r28
  80               	#define psp_high r29
  81               	
  82               	; X return stack pointer for access sram
  83               	#define rsp_low r26
  84               	#define rsp_high r27
  85               	
  86               	; top, Top parameter stack
  87               	#define tos_low r24
  88               	#define tos_high r25
  89               	
  90               	; nos, Next on parameter stack
  91               	#define nos_low r22
  92               	#define nos_high r23
  93               	
  94               	; wrk, Work temporary 
  95               	#define wrk_low r20
  96               	#define wrk_high r21
  97               	
  98               	; ips, instruction for jump and link return
  99               	#define ips_low r18
 100               	#define ips_high r19
 101               	
 102               	
 103               	; r8 to r17 free
 104               	
 105               	;----------------------------------------------------------------------
 106               	;
 107               	;  trick adapted from amforth-6.9
 108               	;
 109               	.macro STRINGS string
 110               	;    .word DOSLIT
 111               	    .byte 8f - 7f
 112               	7:  .ascii "\\string"
 113               	8:  .balign 2
 114               	.endm
 115               	
 116               	;----------------------------------------------------------------------
 117               	;
 118               	; header of leaf word in dictionary
 119               	;    flags must be 0x80, 0x40, 0x20, 0x10
 120               	;    size  must be 1 to 15
 121               	;
 122               	;----------------------------------------------------------------------
 123               	;
 124               	; set start reverse linked list
 125               	;
 126               	.set _link_, 0x0
 127               	
 128               	.macro HEADER name, label, flags=0x0
 129               	is_\label:
 130               	    .p2align 1, 0x00
 131               	7:    
 132               	    .word _link_
 133               	    .set _link_, 7b
 134               	    .byte (9f - 8f) + \flags
 135               	8:    
 136               	    .ascii "\name"
 137               	9:    
 138               	    .p2align 1, 0x20
 139               	\label:
 140               	.endm
 141               	
 142               	;----------------------------------------------------------------------
 143               	; little endian !!! AVR
 144               	;
 145               	;    A    Z (r31:r30) is used as generic address pointer, deed by avr ISA
 146               	;
 147               	;    R    Y (r29:r28) used as return stack pointer    
 148               	;    S    X (r27:r26) used as data/parameter stack pointer
 149               	;    T    T (r25:r24) used as top in stack
 150               	;    N    N (r22:r23) used as second in stack
 151               	;    W    W (r20:r21) used as work            
 152               	;    I    I (r18:r19) used as ip when link and jump    
 153               	;
 154               	;   all stacks grows downwards.
 155               	;
 156               	;----------------------------------------------------------------------
 157               	;    push into return stack, 
 158               	.macro rspush low, high 
 159               	    st -X, \low
 160               	    st -X, \high
 161               	.endm
 162               	
 163               	;----------------------------------------------------------------------
 164               	;    pull from return stack, 
 165               	.macro rspull low, high
 166               	    ld \high, X+
 167               	    ld \low, X+
 168               	.endm
 169               	
 170               	;----------------------------------------------------------------------
 171               	;    push into data stack, 
 172               	.macro pspush low, high
 173               	    st -Y, \low
 174               	    st -Y, \high
 175               	.endm
 176               	
 177               	;----------------------------------------------------------------------
 178               	;    pull from data stack, 
 179               	.macro pspull low, high
 180               	    ld \high, Y+
 181               	    ld \low, Y+
 182               	.endm
 183               	
 184               	;----------------------------------------------------------------------
 185               	;    load a word from program memory (flash)
 186               	;    ( only works with TWO lpm !!! )
 187               	;    Z address in bytes!
 188               	.macro pmload low, high
 189               	    lsl zpm_low
 190               	    rol zpm_high
 191               	    lpm \low, Z+
 192               	    lpm \high, Z+
 193               	    ror zpm_high
 194               	    ror zpm_low
 195               	.endm
 196               	
 197               	;----------------------------------------------------------------------
 198               	;    load from static memory (sram), increments pointer
 199               	;
 200               	.macro srload byte
 201               	    ld \byte, Z+
 202               	.endm
 203               	
 204               	;----------------------------------------------------------------------
 205               	;    save to static memory (sram), increments pointer
 206               	;
 207               	.macro srsave byte
 208               	    st Z+, \byte 
 209               	.endm
 210               	
 211               	;----------------------------------------------------------------------
 212               	; also io@
 213               	;
 214               	.macro peek address, register
 215               	    .if (\address < $40)
 216               	    in \register, \address
 217               	    .else
 218               	    lds \register, \address
 219               	    .endif
 220               	.endm
 221               	
 222               	;----------------------------------------------------------------------
 223               	; also io!
 224               	;
 225               	.macro poke address, register
 226               	    .if (\address < $40)
 227               	    out \address, \register
 228               	    .else
 229               	    sts \address, \register
 230               	    .endif
 231               	.endm
 232               	
 233               	;----------------------------------------------------------------------
 234               	; test, skip next if not zero
 235               	;
 236               	; for Atmega8:
 237               	; __SREG__ is 0x3F
 238               	; BIT_ZERO is 1
 239               	;
 240               	; non destructive
 241               	;
 242               	.macro test_zero low, high, address
 243               	    mov _work_, \low
 244               	    or _work_, \high
 245               	    brbs BIT_ZERO, \address
 246               	.endm
 247               	
 248               	;----------------------------------------------------------------------
 249               	; all primitives must start with NOOP and end with POON
 250               	;    a  nop (0x0000) is used as a null reference, and marks all primitives
 251               	;    as they are really a branch and link mark
 252               	;
 253               	; many primitives saves work register at end, 
 254               	;    then for save bytes, ends with WOOP, 
 255               	;    that goes to _pushw, that goes to POON 
 256               	;
 257               	
 258               	.macro NOOP
 259               	    nop
 260               	.endm
 261               	
 262               	.macro WOOP
 263               	    rjmp _pushw
 264               	.endm
 265               	
 266               	.macro POON
 267               	    rjmp _link
 268               	.endm
 269               	
 270               	;**********************************************************************
 271               	;  constant values
 272               	;
 273               	;    %s/#define *\([^ ]*\) */ \1 = /
 274               	;    %s/ *\([^ ]*\) *= */#define \1 /
 275               	
 276               	;----------------------------------------------------------------------
 277               	;    sizes
 278               	;
 279               	; "Column 72 means Continue", 72 always \0
 280               	; Readability is good
 281               	; standart is 80
 282               	TIB_SIZE = 72
 283               	
 284               	; stacks 18 words deep. WISE as M00re said.
 285               	STACK_SIZE = 36
 286               	
 287               	; default cell size
 288               	CELL_SIZE = 2
 289               	
 290               	; maximum word size
 291               	WORD_SIZE = 15
 292               	
 293               	; default base
 294               	BASE_DEFAULT = 16
 295               	
 296               	;----------------------------------------------------------------------
 297               	;   reserved eeprom used  
 298               	;
 299               	eeprom = 0x00
 300               	e_void = eeprom + 0  ; always zero
 301               	e_seed = eeprom + 2  ; seed for random
 302               	e_turn = eeprom + 4  ; routine after boot
 303               	e_rest = eeprom + 6  ; routine before reset
 304               	e_last = eeprom + 8  ; last link addres to dictionary 
 305               	e_here = eeprom + 10 ; next free flash address for dictionary
 306               	e_sram = eeprom + 12 ; next free sram address for variables, as stack
 307               	e_erom = eeprom + 14 ; next free eprom address for values, as stack
 308               	
 309               	;----------------------------------------------------------------------
 310               	;   words can be 1 to 15 chars lenght, 
 311               	;
 312               	;   almost over for normal english ~10 letters words http://norvig.com/mayzner.html
 313               	;
 314               	;   flags 
 315               	;
 316               	;   IMMEDIATE, COMPILE, HIDDEN, TOGGLE
 317               	;
 318               	;   COMPILE is the compile only.
 319               	;
 320               	F_IMMEDIATE = 0x80
 321               	F_COMPILE = 0x40
 322               	F_HIDDEN = 0x20
 323               	F_TOGGLE = 0x10
 324               	F_COMMON = 0x00
 325               	
 326               	F_TOMASK = 0xF0
 327               	F_UNMASK = 0x0F
 328               	
 329               	; STATES BIT!
 330               	; execute  STATE == 0
 331               	; compile  STATE == 1
 332               	
 333               	BIT_COMPILE = 0
 334               	BIT_EXECUTE = 0
 335               	
 336               	/*
 337               	state       common    immediate
 338               	S_EXECUTE    execute   execute
 339               	S_COMPILE    compile   execute
 340               	
 341               	postpone always compiles.
 342               	
 343               	*/
 344               	;---------------------------------------------------------------------
 345               	; status register from error codes forth 2012
 346               	; minimal
 347               	NO_ERROR = 0
 348               	INVALID_MEMORY = -9
 349               	OVERFLOW = -11
 350               	WRITE_TO_READ_ONLY = -20
 351               	NOT_A_NUMBER = -24
 352               	
 353               	;---------------------------------------------------------------------
 354               	; Flow Control
 355               	; assumes that all line edit is done at remote!
 356               	; no backspace, no delete, no moving cursor, just a static line.
 357               	; works as a screen or block, just receives a line till a CR or CR LF
 358               	; uses BS, ESC, CAN, XON, XOFF, for control 
 359               	;
 360               	XON_   =   0x11    ; ascii DC1 ^Q
 361               	
 362               	XOFF_  =   0x13    ; ascii DC3 ^S
 363               	
 364               	CR_    =   0x0d    ; ascci carriage return ^M
 365               	
 366               	LF_    =   0x0a    ; ascii line feed ^J
 367               	
 368               	BS_    =   0x08    ; ascii backspace ^H
 369               	
 370               	BL_    =   0x20    ; ascii space 
 371               	
 372               	BIT_ZERO = 1
 373               	
 374               	BIT_CARRY = 0
 375               	
 376               	#ifdef atmega8
 377               	
 378               	; atmega8 have flash memory of 128 pages of 32 words
 379               	
 380               	SPM_SIZE = 64
 381               	
 382               	SRAM_START = 0x060  ; SRAM from AVR manual
 383               	
 384               	SRAM_END = 0x45E  ; SRAM from AVR manual minus one
 385               	
 386               	FLASH_RWW = 0x0000
 387               	
 388               	FLASH_NRWW = 0x1E00    ; using optiboot in 512 bytes !!!!
 389               	
 390               	FLASH_END = 0x1FFF 
 391               	
 392               	#endif
 393               	
 394               	#ifdef atmega328
 395               	
 396               	; atmega328 have flash memory of 256 pages of 64 words
 397               	
 398               	SPM_SIZE = 128
 399               	
 400               	SRAM_START = 0x0100  ; SRAM from AVR manual
 401               	
 402               	SRAM_END = 0x08FF  ; SRAM from AVR manual
 403               	
 404               	FLASH_RWW = 0x0000
 405               	
 406               	FLASH_NRWW = 0x3E00    ; using optiboot in 512 bytes !!!!
 407               	
 408               	FLASH_END = 0x3FFF 
 409               	
 410               	#endif
 411               	
 412               	/* for eeprom use */
 413               	
 414               	E2P_PAGESIZE = 4
 415               	
 416               	E2P_START = 0x000
 417               	
 418               	E2P_END = 0x1FF
 419               	
 420               	/* for flash flush */
 421               	
 422               	; buffer for flush flash
 423               	
 424               	FIB_SIZE = SPM_SIZE
 425               	
 426               	pagesize = (SPM_PAGE - 1)
 427               	
 428               	pagemask = (~pagesize)
 429               	
 430               	/* where start forth */
 431               	
 432               	FORTH_INI = SRAM_END + 1
 433               	
 434               	
 435               	;----------------------------------------------------------------------
 436               	...
  39               	
  40               	;----------------------------------------------------------------------
  41               	.section data
  42 ???? 0000 0000 	.org SRAM_START
  42      0000 0000 
  42      0000 0000 
  42      0000 0000 
  42      0000 0000 
  43               	; those are non volatile, must be saved in eeprom
  44 ???? 0000      	VOID:	.word 0		; always 0x0000
  45 ???? 0000      	SEED:	.word 0		; seed for pseudo random
  46 ???? 0000      	TURN:	.word 0		; routine to run after boot
  47 ???? 0000      	REST:	.word 0		; routine to run before reset
  48 ???? 0000      	WORD_LAST:	    .word 0		; reference to latest word in dictionary
  49 ???? 0000      	FLASH_LAST:	    .word 0		; next free cell in flash dictionary
  50 ???? 0000      	SRAM_LAST:	    .word 0		; next free cell in static ram 
  51 ???? 0000      	EEPROM_LAST:	.word 0		; next free cell in eeprom
  52               	
  53               	; those are volatile, dont care
  54 ???? 0000      	STAT:	.word 0		; state of interpreter, 0 interprete, 1 compile, 2 postpone
  55 ???? 0000      	RADX:	.word 0		; numeric radix for convertion
  56 ???? 0000      	TOIN:	.word 0		; next free char in terminal input buffer
  57 ???? 0000      	TOPG:   .word 0     ; next free char in this page flash memory
  58 ???? 0000      	FAGE:   .word 0     ; this page in flash memory
  59               	
  60               	.equ	SPZ, SRAM_END - 1		
  61               	.equ	RSP, SPZ - STACK_SIZE
  62               	.equ	PSP, RSP - STACK_SIZE
  63               	.equ	END, PSP - STACK_SIZE
  64               	.equ	FIB, END - FIB_SIZE
  65               	.equ	TIB, FIB - TIB_SIZE 
  66               	
  67               	;.equ free_sram, TIB - FREE
  68               	
  69               	;----------------------------------------------------------------------
  70               	.p2align 1, 0x00
  71               	#include "bios.S"
   1               	
   2               	/*
   3               	 *  DISCLAIMER"
   4               	 *
   5               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   6               	 *
   7               	 *  Permission is hereby granted, free of charge, to any person obtaining
   8               	 *  a copy of this software and associated documentation files (the
   9               	 *  "Software"), to deal in the Software without restriction, including
  10               	 *  without limitation the rights to use, copy, modify, merge, publish,
  11               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  12               	 *  permit persons to whom the Software is furnished to do so, subject to
  13               	 *  the following conditions"
  14               	 *
  15               	 *  The above copyright notice and this permission notice shall be
  16               	 *  included in all copies or substantial portions of the Software.
  17               	 *
  18               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  19               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  20               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  21               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  22               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  23               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  24               	 *
  25               	 */
  26               	
  27               	;----------------------------------------------------------------------
  28               	; review for atmega328
  29               	;   10/2022 @agsb
  30               	
  31               	;----------------------------------------------------------------------
  32               	;
  33               	; code segment, flash
  34               	;
  35               	.section .text
  36               	.org 0x000
  37               	.global boot
  38               	boot:
  39               	
  40               	;---------------------------------------------------------------------
  41               	; from avr manual, do not change 
  42               	; reserved I/O Memory address
  43               	;
  44               	__SREG__ = 0x3f
  45               	__SP_H__ = 0x3e
  46               	__SP_L__ = 0x3d
  47               	
  48               	/* USART */
  49               	UBRRL = 0x09
  50               	UCSRC = 0x20
  51               	UCSRB = 0x0a
  52               	UCSRA = 0x0b
  53               	
  54               	/* Watch dog */
  55               	WDTCR = 0x21
  56               	
  57               	/* timer0 */
  58               	TCNT0 = 0x32
  59               	TCCR0 = 0x33
  60               	TIMSK = 0x39
  61               	
  62               	/* SPMCR */
  63               	SPMCR = 0x37
  64               	
  65               	/* SPM BITS */
  66               	SPMIE = 7
  67               	RWWSB = 6
  68               	/* bit 5 reserved */
  69               	RWWSRE = 4
  70               	BLBSET = 3
  71               	PGWRT = 2
  72               	PGERS = 1
  73               	SPMEN = 0
  74               	
  75               	;----------------------------------------------------------------------
  76               	;
  77               	; classic interrup vector table
  78               	;
  79               	;----------------------------------------------------------------------
  80               	
  81 ???? 00C0      	    rjmp RESET ; Reset Handler
  82 ???? 1895      	    reti ; rjmp EXT_INT0 ; IRQ0 Handler
  83 ???? 1895      	    reti ; rjmp EXT_INT1 ; IRQ1 Handler
  84 ???? 1895      	    reti ; rjmp TIM2_COMP ; Timer2 Compare Handler
  85 ???? 1895      	    reti ; rjmp TIM2_OVF ; Timer2 Overflow Handler
  86 ???? 1895      	    reti ; rjmp TIM1_CAPT ; Timer1 Capture Handler
  87 ???? 1895      	    reti ; rjmp TIM1_COMPA ; Timer1 CompareA Handler
  88 ???? 1895      	    reti ; rjmp TIM1_COMPB ; Timer1 CompareB Handler
  89 ???? 1895      	    reti ; rjmp TIM1_OVF ; Timer1 Overflow Handler
  90 ???? 00C0      	    rjmp TIM0_OVF ; Timer0 Overflow Handler
  91 ???? 1895      	    reti ; rjmp SPI_STC ; SPI Transfer Complete Handler
  92 ???? 1895      	    reti ; rjmp USART_RXC ; USART RX Complete Handler
  93 ???? 1895      	    reti ; rjmp USART_UDRE ; ((0x0C) + 0x20) Empty Handler
  94 ???? 1895      	    reti ; rjmp USART_TXC ; USART TX Complete Handler
  95 ???? 1895      	    reti ; rjmp ADC ; ADC Conversion Complete Handler
  96 ???? 1895      	    reti ; rjmp EE_RDY ; EEPROM Ready Handler
  97 ???? 1895      	    reti ; rjmp ANA_COMP ; Analog Comparator Handler
  98 ???? 1895      	    reti ; rjmp TWSI ; Two-wire Serial Interface Handler
  99 ???? 1895      	    reti ; rjmp SPM_RDY ; Store Program Memory Ready Handler;
 100               	
 101               	;----------------------------------------------------------------------
 102               	; 
 103               	RESET:
 104               	; clear interrupts
 105 ???? F894      	    cli
 106               	; init _zero_ as zero
 107 ???? 3324      	    clr r3
 108 ???? 3FBE      	    out __SREG__, r3 ; clear sreg
 109               	; init real sp at end of sram
 110 ???? 94E0      	    ldi r25, hi8(SRAM_END)
 111 ???? 9EBF      	    out __SP_H__, r25
 112 ???? 8EE5      	    ldi r24, lo8(SRAM_END)
 113 ???? 8DBF      	    out __SP_L__, r24
 114               	; enable interrupts
 115 ???? 7894      	    sei
 116 ???? 00C0      	    rjmp BOOT
 117               	
 118               	;----------------------------------------------------------------------
 119               	;
 120               	;   do not use r0 and r1 are scratch registers used in spm, mul, des, etc
 121               	;
 122               	;   generic:
 123               	;   r2 , how knows ?
 124               	;   r3 , always zero
 125               	;   r4 , offset to prescale
 126               	;      
 127               	;   for timer0:
 128               	;   r5 , saved SREG
 129               	;   r6 , counter each 1ms low byte
 130               	;   r7 , counter each 1ms high byte
 131               	;
 132               	;   timer0 prescale 
 133               	;   for 8 MHz, prescale 64, offset 131, results about 1 ms
 134               	;   64 * 125 = 8000 ; 
 135               	;   256 - 125 = 131 ; offset for miliseconds
 136               	;
 137               	;   ticks counts till 65 seconds
 138               	;
 139               	; interrupt routine
 140               	TIM0_OVF:
 141               	; save flags
 142 ???? 2FB6      	    in r2, __SREG__
 143               	; disable interrups
 144 ???? F894      	    cli
 145               	; increase counter and also clear 
 146 ???? 8894      	    clc
 147               	; do not use r0 or r1 elsewhere
 148 ???? 3324      	    clr r3
 149 ???? 3394      	    inc r3
 150 ???? 630C      	    add ticks_low, r3
 151 ???? 3A94      	    dec r3
 152 ???? 731C      	    adc ticks_high, r3
 153               	; offset counter 256 - 125 = 131
 154               	; but was 10 clocks till out, 
 155               	; then 131 + 10 = 141
 156               	OFFSETCNT = 141
 157 ???? 42BE      	    out TCNT0, r4
 158               	; reset watch dog
 159 ???? A895      	    wdr
 160               	; load flags and return
 161 ???? 2FBE      	    out __SREG__, r2
 162               	; enable interrups
 163 ???? 7894      	    sei
 164 ???? 1895      	    reti
 165               	
 166               	;----------------------------------------------------------------------
 167               	/*
 168               	
 169               	OSCAL calibration,
 170               	from atmel 2555 note:
 171               	for atmega8 theorical for 25oC at 5V, value is 168.
 172               	for optiboot, value is 143 as sample better for 38400 bauds, maybe less for 40oC
 173               	CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DOSC_CAL=142' '-DNUM_LED_FLASHES=2' -DBAUD_RATE=38400
 174               	*/
 175               	
 176               	;----------------------------------------------------------------------
 177               	; hook to init hardware
 178               	BOOT:
 179 ???? F894      	   cli
 180               	
 181               	;----------------------------------------------------------------------
 182               	; init timer0, with internal clock 8MHz, from gcc public code, io ports as constants
 183               	;
 184               	; preset of timer0, with internal clock 8MHz ; cycle 64 ; offset 131
 185               	; timer cycle * offset / clock = 8k/8M = 1ms
 186               	;
 187               	TIMER0_SET:
 188               	; enable pre-escaler
 189 ???? 03B7      	    in r16, TCCR0
 190 ???? 0360      	    ori r16, (1 << 1) | (1 << 0)
 191 ???? 03BF      	    out TCCR0, r16
 192               	; offset counter, so it counts 125 clocks inside the interrup routines
 193 ???? 0DE8      	    ldi r16, OFFSETCNT
 194               	; preserve offset
 195 ???? 402E      	    mov r4, r16
 196 ???? 02BF      	    out TCNT0, r16
 197               	; enable counter
 198 ???? 09B7      	    in r16, TIMSK
 199 ???? 0160      	    ori r16, (1 << 0) 
 200 ???? 09BF      	    out TIMSK, r16
 201               	
 202               	;----------------------------------------------------------------------
 203               	; init watch dog, from avr-gcc public code, io ports as constants
 204               	;
 205               	; write logical one to WDCE and WDE, set WDP2, WDP1, WDP0 to ~ 2.0 s
 206               	;
 207               	WATCHDOG_SET:
 208 ???? 01B5      	    in r16, WDTCR
 209 ???? 0861      	    ori r16, (1 << 4) | (1 << 3)
 210 ???? 0760      	    ori r16, (1 << 2) | (1 << 1) | (1 << 0)
 211 ???? 01BD      	    out WDTCR, r16
 212               	
 213               	;----------------------------------------------------------------------
 214               	; init usart, from avr-gcc public code
 215               	;
 216               	;   defaults to 9600, 8N1, no control
 217               	;
 218               	USART_SET:
 219 ???? 4427      	    clr wrk_low
 220 ???? 40BD      	    out UCSRC, wrk_low
 221 ???? 44E3      	    ldi wrk_low, lo8(52)
 222 ???? 49B9      	    out UBRRL, wrk_low
 223 ???? 4AB1      	    in wrk_low, UCSRB
 224 ???? 4861      	    ori wrk_low, lo8(24)
 225 ???? 4AB9      	    out UCSRB, wrk_low
 226 ???? 4EE8      	    ldi wrk_low, lo8(-114)
 227 ???? 40BD      	    out UCSRC, wrk_low
 228 ???? 40B5      	    in wrk_low, UCSRC
 229 ???? 4064      	    ori wrk_low,lo8(64)
 230 ???? 40BD      	    out UCSRC, wrk_low
 231               	
 232               	;----------------------------------------------------------------------
 233               	; enable interrupts
 234               	GOOD:
 235 ???? 7894      	    sei
 236 ???? 00C0      	    rjmp COLD 
 237               	
 238               	#ifdef EEPS
 239               	
 240               	;----------------------------------------------------------------------
 241               	;
 242               	;   Assembly Code Example, from AVR manual
 243               	;
 244               	EEPROM_write:
 245               	; Wait for completion of previous write
 246               	    sbic EECR, EEPE
 247               	    rjmp EEPROM_write
 248               	; Set up address (r18:r17) in address register
 249               	    out EEARH, r25
 250               	    out EEARL, r24
 251               	; Write data (r16) to Data Register
 252               	    out EEDR, r22
 253               	; Write logical one to EEMPE
 254               	    sbi EECR, EEMPE
 255               	; Start eeprom write by setting EEPE
 256               	    sbi EECR, EEPE
 257               	    ret
 258               	
 259               	EEPROM_read:
 260               	; Wait for completion of previous write
 261               	    sbic EECR, EEPE
 262               	    rjmp EEPROM_read
 263               	; Set up address (r18:r17) in address register
 264               	    out EEARH, r25
 265               	    out EEARL, r24
 266               	; Start eeprom read by writing EERE
 267               	    sbi EECR, EERE
 268               	; Read data from Data Register
 269               	    in r22, EEDR
 270               	    ret
 271               	
 272               	#endif
 273               	
 274               	.equ bios_end, .
 275               	...
  72               	
  73               	;----------------------------------------------------------------------
  74               	.p2align 1, 0x00
  75               	#include "forth.S"
   1               	/* 
   2               	 *  DISCLAIMER" 
   3               	 * 
   4               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos, 
   5               	 * 
   6               	 *  Permission is hereby granted, free of charge, to any person obtaining 
   7               	 *  a copy of this software and associated documentation files (the 
   8               	 *  "Software"), to deal in the Software without restriction, including 
   9               	 *  without limitation the rights to use, copy, modify, merge, publish, 
  10               	 *  distribute, sublicense, and/or sell copies of the Software, and to 
  11               	 *  permit persons to whom the Software is furnished to do so, subject to 
  12               	 *  the following conditions" 
  13               	 * 
  14               	 *  The above copyright notice and this permission notice shall be 
  15               	 *  included in all copies or substantial portions of the Software. 
  16               	 * 
  17               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
  18               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
  19               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
  20               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE 
  21               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION 
  22               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION 
  23               	 * 
  24               	 */ 
  25               	 
  26               	;--------------------------------------------------------------------- 
  27               	; 
  28               	;    A small Forth for ATmega8 
  29               	; 
  30               	;--------------------------------------------------------------------- 
  31               	; dictionary structure 
  32               	; 
  33               	; cell size is a word of 16 bits 
  34               	; 
  35               	; .word  link    link to previous 
  36               	; .byte  size    sizeof name OR flags 
  37               	; .ascii "name"  name, plus a pad byte with BL (0x32) if size is odd 
  38               	; .word  param,  many references 
  39               	; 
  40               	;---------------------------------------------------------------------- 
  41               	 
  42               	; 
  43               	; classics 
  44               	; 
  46               	.LIST 
  47               	 
  48               	;---------------------------------------------------------------------- 
  49               	; start of dictionary 
  50               	; 
  51               	 
  52               	;---------------------------------------------------------------------- 
  53               	; 
  54               	; this is the forth inner engine, 
  55               	; 
  56               	; a compound word, aka twig, must end with a reference to ENDS 
  57               	; 
  58               	; a primitive work, aka leaf, must start with NOOP and ends with POON 
  59               	; 
  60               	; the size byte must be masked by: or 0xF0 
  61               	; 
  62               	; memory pointer r31:r30 as Z 
  63               	; return stack pointer r29:r28 as Y 
  64               	; working register r25:r24 as W 
  65               	; temporary tos register r23:r22 
  66               	; temporary nds register r21:r20 
  67               	; instruction pointer r18:r19 
  68               	; scratch register r16:r17 
  69               	; 
  70               	; Can only use LPM to access flash memory ? YES! 
  71               	; 
  72               	; forth: all constants in flash
  73               	;
  74               	; user: all constants and all variables in sdram 
  75               	; 
  76               	; why ? flash memory suports only 10.000 cycles 
  77               	; 
  78               	 
  79               	;---------------------------------------------------------------------- 
  80               	; starts just above sram ends 
  81               	;
  82               	; use the address to determine if is flash or is sram, above is flash :)
  83               	; 
  84               	.section .text 
  85 ???? 0000 0000 	.org FORTH_INI
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  86               	.global forth 
  87               	_forth_: 
  88               	;---------------------------------------------------------------------- 
  89               	; inner interpreter, 
  90               	; it is also a primitive word 
  91               	; 
  92               	; also called semis 
  93 ???? 0000 0004 	HEADER "ENDS", "ENDS" 
  93      454E 4453 
  93      20
  94               	; does nothing and mark as primitive 
  95 ???? 0000      	    NOOP 
  96               	 
  97               	; pull ips from rsp 
  98               	_exit: 
  99 ???? FD91 ED91 	    rspull zpm_low, zpm_high 
 100               	 
 101               	; load w with contents of cell at ips 
 102               	_next: 
 103 ???? EE0F FF1F 	    pmload wrk_low, wrk_high ; also increments zpm 
 103      4591 5591 
 103      F795 E795 
 104               	 
 105               	; if zero (NULL) is a primitive word 
 106               	_void:
 107 ???? 242E      	    mov _work_, wrk_low 
 108 ???? 252A      	    or _work_, wrk_high 
 109 ???? 01F0      	    brbs BIT_ZERO, _jump
 110               	 
 111               	; else is a reference 
 112               	_enter: 
 113 ???? EE93 FE93 	    rspush zpm_low, zpm_high ; push next reference 
 114 ???? FA01      	    movw zpm_low, wrk_low ; point to this reference 
 115 ???? 00C0      	    rjmp _next 
 116               	 
 117               	; then jump, for exec it, save next return into ips 
 118               	_jump: 
 119 ???? 3296      	    adiw zpm_low, 2	     
 120 ???? 9F01      	    movw ips_low, zpm_low    
 121 ???? 3297      	    sbiw zpm_low, 2	     
 122 ???? 0994      	    ijmp 
 123               	 
 124               	; then link, for continue, load return from ips 
 125               	_link: 
 126 ???? F901      	    movw zpm_low, ips_low ; points to next reference 
 127 ???? 00C0      	    rjmp _next 
 128               	 
 129               	;---------------------------------------------------------------------- 
 130               	; 
 131               	;---------------------------------------------------------------------- 
 132               	 
 133               	;********************************************************************** 
 134               	; 
 135               	;    init of minimal words 
 136               	;---------------------------------------------------------------------- 
 137               	 
 138               	;---------------------------------------------------------------------- 
 139               	; ok 0= 
 140               	; 
 141 ???? 0000 0230 	HEADER "0=", "ZEQU" 
 141      3D20 
 142 ???? 0000      	    NOOP 
 143 ???? 892B      	    or tos_low, tos_high
 144 ???? 01F0      	    brbs BIT_ZERO, _ftrue
 145               	_ffalse:
 146 ???? 8827      	    clr tos_low 
 147 ???? 9927      	    clr tos_high 
 148 ???? 00C0      	    POON
 149               	_ftrue: 
 150 ???? 8FEF      	    ser tos_low 
 151 ???? 9FEF      	    ser tos_high 
 152 ???? 00C0      	    POON
 153               	 
 154               	;---------------------------------------------------------------------- 
 155               	; ok ! to (w a -- ) 
 156               	; only in sram 
 157 ???? 0000 0121 	HEADER "!", "TO" 
 158 ???? 0000      	    NOOP 
 159 ???? FC01      	    movw  zpm_low, tos_low
 160 ???? 9991 8991 	    pspull tos_low, tos_high 
 161               	
 162               	; if above _forth_ is flash 
 163 ???? 50E0      	    ldi wrk_high, hi8(_forth_) 
 164 ???? E030      	    cpi zpm_low, lo8(_forth_) 
 165 ???? F507      	    cpc zpm_high, wrk_high 
 166 ???? 04F4      	    brge _isflash_to 
 167               	 
 168               	_isram_to: 
 169 ???? 8193      	    srsave tos_low 
 170 ???? 9193      	    srsave tos_high
 171 ???? 9991 8991 	    pspull tos_low, tos_high 
 172 ???? 00C0      	    POON 
 173               	 
 174               	_isflash_to: 
 175               	;   do flash flush, later :( still not done zzzz
 176 ???? 00C0      	    POON 
 177               	 
 178               	;---------------------------------------------------------------------- 
 179               	; ok @ at ( a -- w ) 
 180               	; only in sram 
 181 ???? 0000 0140 	HEADER "@", "AT" 
 182 ???? 0000      	    NOOP 
 183 ???? FC01      	    movw zpm_low, tos_low 
 184               	 
 185               	; if above _forth_ is flash 
 186 ???? 50E0      	    ldi wrk_high, hi8(_forth_) 
 187 ???? E030      	    cpi zpm_low, lo8(_forth_) 
 188 ???? F507      	    cpc zpm_high, wrk_high 
 189 ???? 04F4      	    brge _isflash_at 
 190               	 
 191               	_isram_at: 
 192 ???? 8191      	    srload tos_low 
 193 ???? 9191      	    srload tos_high 
 194 ???? 00C0      	    POON
 195               	 
 196               	_isflash_at: 
 197 ???? EE0F FF1F 	    pmload tos_low, tos_high 
 197      8591 9591 
 197      F795 E795 
 198 ???? 00C0      	    POON
 199               	 
 200               	;---------------------------------------------------------------------- 
 201               	; ok ( -- rsp) 
 202               	; 
 203 ???? 0000 0352 	HEADER "RS@", "RPAT" 
 203      5340 
 204 ???? 0000      	    NOOP 
 205 ???? 8A93 9A93 	    pspush tos_low, tos_high 
 206 ???? CD01      	    movw tos_low, rsp_low 
 207 ???? 00C0      	    POON 
 208               	 
 209               	;---------------------------------------------------------------------- 
 210               	; ok ( -- psp ) 
 211               	; 
 212 ???? 0000 0350 	HEADER "PS@", "SPAT" 
 212      5340 
 213 ???? 0000      	    NOOP 
 214 ???? 8A93 9A93 	    pspush tos_low, tos_high 
 215 ???? CE01      	    movw tos_low, psp_low 
 216 ???? 00C0      	    POON 
 217               	 
 218               	;---------------------------------------------------------------------- 
 219               	; ok ( w1 w2 -- w2 NAND w1 ) 
 220               	; 
 221 ???? 0000 044E 	HEADER "NAND", "NAND" 
 221      414E 4420 
 222 ???? 0000      	    NOOP 
 223 ???? 7991 6991 	    pspull nos_low, nos_high 
 224 ???? 8623      	    and tos_low, nos_low 
 225 ???? 9723      	    and tos_high, nos_high 
 226 ???? 6095      	    com nos_low 
 227 ???? 7095      	    com nos_high 
 228 ???? 00C0      	    POON 
 229               	 
 230               	;---------------------------------------------------------------------- 
 231               	; ok ( w1 w2 -- w2 + w1 ) 
 232 ???? 0000 012B 	HEADER "+", "PLUS" 
 233 ???? 0000      	    NOOP 
 234 ???? 7991 6991 	    pspull nos_low, nos_high 
 235 ???? 8894      	    clc 
 236 ???? 860F      	    add tos_low, nos_low 
 237 ???? 971F      	    adc tos_high, nos_high 
 238 ???? 00C0      	    POON 
 239               	 
 240               	;---------------------------------------------------------------------- 
 241               	;    end of minimal words 
 242               	; 
 243               	;********************************************************************** 
 244               	 
 245               	 
 246               	;********************************************************************** 
 247               	;    load variables 
 248               	; 
 249               	;---------------------------------------------------------------------- 
 250               	; ok ( -- w) 
 251               	; 
 252 ???? 0000 0354 	HEADER "TIB", "tib_" 
 252      4942 
 253 ???? 0000      	    NOOP
 254 ???? 8A93 9A93 	    pspush tos_low, tos_high
 255 ???? 89E6      	    ldi tos_low, lo8(TIB) 
 256 ???? 93E0      	    ldi tos_high, hi8(TIB) 
 257 ???? 00C0      	    POON 
 258               	 
 259               	;---------------------------------------------------------------------- 
 260               	; ok ( -- w) 
 261               	; 
 262 ???? 0000 064C 	HEADER "LATEST", "LATEST" 
 262      4154 4553 
 262      5420 
 263 ???? 0000      	    NOOP 
 264 ???? 8A93 9A93 	    pspush tos_low, tos_high
 265 ???? 80E0      	    ldi tos_low, lo8(LAST) 
 266 ???? 90E0      	    ldi tos_high, hi8(LAST) 
 267 ???? 00C0      	    POON 
 268               	 
 269               	;---------------------------------------------------------------------- 
 270               	; ok ( -- w) 
 271               	; 
 272 ???? 0000 0553 	HEADER "STATE", "STATE" 
 272      5441 5445 
 273 ???? 0000      	    NOOP 
 274 ???? 8A93 9A93 	    pspush tos_low, tos_high
 275 ???? 80E0      	    ldi tos_low, lo8(STAT) 
 276 ???? 90E0      	    ldi tos_high, hi8(STAT) 
 277 ???? 00C0      	    POON 
 278               	 
 279               	;---------------------------------------------------------------------- 
 280               	; ok ( -- w) 
 281               	; 
 282 ???? 0000 0442 	HEADER "BASE", "BASE" 
 282      4153 4520 
 283 ???? 0000      	    NOOP 
 284 ???? 8A93 9A93 	    pspush tos_low, tos_high
 285 ???? 80E0      	    ldi tos_low, lo8(RADX) 
 286 ???? 90E0      	    ldi tos_high, hi8(RADX) 
 287 ???? 00C0      	    POON 
 288               	 
 289               	;---------------------------------------------------------------------- 
 290               	; ok ( -- w) 
 291               	; 
 292 ???? 0000 0628 	HEADER "(sram)", "sram_" 
 292      7372 616D 
 292      2920 
 293 ???? 0000      	    NOOP 
 294 ???? 8A93 9A93 	    pspush tos_low, tos_high
 295 ???? 80E0      	    ldi tos_low, lo8(SRAM_LAST) 
 296 ???? 90E0      	    ldi tos_high, hi8(SRAM_LAST) 
 297 ???? 00C0      	    POON 
 298               	 
 299               	;---------------------------------------------------------------------- 
 300               	; ok ( -- w) 
 301               	; 
 302 ???? 0000 0828 	HEADER "(eeprom)", "eeprom_" 
 302      6565 7072 
 302      6F6D 2920 
 303 ???? 0000      	    NOOP 
 304 ???? 8A93 9A93 	    pspush tos_low, tos_high
 305 ???? 80E0      	    ldi tos_low, lo8(EEPROM_LAST) 
 306 ???? 90E0      	    ldi tos_high, hi8(EEPROM_LAST) 
 307 ???? 00C0      	    POON 
 308               	 
 309               	;---------------------------------------------------------------------- 
 310               	; ok ( -- w) 
 311               	; 
 312 ???? 0000 0728 	HEADER "(flash)", "flash_" 
 312      666C 6173 
 312      6829 
 313 ???? 0000      	    NOOP 
 314 ???? 8A93 9A93 	    pspush tos_low, tos_high
 315 ???? 80E0      	    ldi tos_low, lo8(FLASH_LAST) 
 316 ???? 90E0      	    ldi tos_high, hi8(FLASH_LAST) 
 317 ???? 00C0      	    POON 
 318               	 
 319               	;********************************************************************** 
 320               	;   usart i/O 
 321               	; 
 322               	;---------------------------------------------------------------------- 
 323               	; 
 324               	; ok ( -- w) 
 325               	; beware, it blocks while test if can receive a char 
 326               	; 
 327 ???? 0000 036B 	HEADER "key", "key_" 
 327      6579 
 328 ???? 0000      	    NOOP 
 329               	1: 
 330 ???? 5F9B      	    sbis 0x0b, 7 
 331 ???? 00C0      	    rjmp 1b 
 332               	2: 
 333 ???? 8A93 9A93 	    pspush tos_low, tos_high
 334 ???? 8CB1      	    in tos_low, 0x0c 
 335 ???? 9927      	    clr tos_high 
 336 ???? 00C0      	    POON 
 337               	 
 338               	;---------------------------------------------------------------------- 
 339               	; ok ( -- 0 | w) 
 340               	; test if can receive a char, or return FALSE 
 341               	; 
 342 ???? 0000 046B 	HEADER "key?", "qkey_" 
 342      6579 3F20 
 343 ???? 0000      	    NOOP 
 344               	3: 
 345 ???? 5F9B      	    sbis 0x0b, 7 
 346 ???? 00C0      	    rjmp _ffalse 
 347 ???? 00C0      	    rjmp 2b 
 348               	 
 349               	;---------------------------------------------------------------------- 
 350               	; ok ( w -- ) 
 351               	; beware, it blocks while test if can send a char 
 352               	; 
 353 ???? 0000 0465 	HEADER "emit", "emit_" 
 353      6D69 7420 
 354 ???? 0000      	    NOOP 
 355               	1: 
 356 ???? 5D9B      	    sbis 0x0b, 5 
 357 ???? 00C0      	    rjmp 1b 
 358               	2: 
 359 ???? 8CB9      	    out 0x0c, tos_low 
 360 ???? 9991 8991 	    pspull tos_low, tos_high
 361 ???? 00C0      	    POON 
 362               	 
 363               	;---------------------------------------------------------------------- 
 364               	; ok ( w -- w 0) 
 365               	; test if can send a char, or return FALSE 
 366               	; 
 367 ???? 0000 0565 	HEADER "emit?", "qemit_" 
 367      6D69 743F 
 368 ???? 0000      	    NOOP 
 369               	3: 
 370 ???? 5D9B      	    sbis 0x0b, 5 
 371 ???? 00C0      	    rjmp _ffalse 
 372 ???? 00C0      	    rjmp 2b 
 373               	 
 374               	;---------------------------------------------------------------------- 
 375               	; ok ( -- w) 
 376               	; push timer counter 
 377               	; 
 378 ???? 0000 066D 	HEADER "millis", "millis_" 
 378      696C 6C69 
 378      7320 
 379 ???? 0000      	    NOOP 
 380 ???? 8A93 9A93 	    pspush tos_low, tos_high 
 381 ???? C301      	    movw tos_low, ticks_low 
 382 ???? 00C0      	    POON 
 383               	 
 384               	;********************************************************************** 
 385               	;---------------------------------------------------------------------- 
 386               	; ok ( -- -1 ) 
 387               	; 
 388 ???? 0000 0454 	HEADER "TRUE", "FTRUE" 
 388      5255 4520 
 389 ???? 0000      	    NOOP 
 390 ???? 8A93 9A93 	    pspush tos_low, tos_high 
 391               	_iftrue: 
 392 ???? 8FEF      	    ser tos_low 
 393 ???? 9FEF      	    ser tos_high 
 394 ???? 00C0      	    POON 
 395               	 
 396               	;---------------------------------------------------------------------- 
 397               	; ok ( -- 0 ) 
 398               	; 
 399 ???? 0000 0546 	HEADER "FALSE", "FFALSE" 
 399      414C 5345 
 400 ???? 0000      	    NOOP 
 401 ???? 8A93 9A93 	    pspush tos_low, tos_high 
 402               	_iffalse: 
 403 ???? 8827      	    clr tos_low 
 404 ???? 9927      	    clr tos_high 
 405 ???? 00C0      	    POON 
 406               	 
 407               	;---------------------------------------------------------------------- 
 408               	; ok ( -- 0 ) 
 409               	;
 410 ???? 0000 0130 	HEADER "0", "ZERO" 
 411 ???? 0000      	    NOOP 
 412 ???? 8A93 9A93 	    pspush tos_low, tos_high 
 413 ???? 8827      	    clr tos_low 
 414 ???? 9927      	    clr tos_high 
 415 ???? 00C0      	    POON 
 416               	 
 417               	;---------------------------------------------------------------------- 
 418               	; ok (  -- 1) 
 419 ???? 0000 0131 	HEADER "1", "ONE" 
 420 ???? 0000      	    NOOP 
 421 ???? 8A93 9A93 	    pspush tos_low, tos_high 
 422 ???? 9927      	    clr tos_high 
 423 ???? 8827      	    clr tos_low 
 424 ???? 8395      	    inc tos_low 
 425 ???? 00C0      	    POON 
 426               	 
 427               	;---------------------------------------------------------------------- 
 428               	; ok ( w1 w2 -- 0 | -1 ) 
 429               	; 
 430 ???? 0000 013C 	HEADER "<", "LTHAN" 
 431 ???? 0000      	    NOOP 
 432 ???? 7991 6991 	    pspull nos_low, nos_high 
 433 ???? 8617      	    cp tos_low, nos_low 
 434 ???? 9707      	    cpc tos_high, nos_high 
 435 ???? 04F0      	    brlt _iftrue 
 436 ???? 00C0      	    rjmp _iffalse 
 437               	 
 438               	;---------------------------------------------------------------------- 
 439               	; ok ( w -- ) ( -- W) 
 440               	;      
 441 ???? 0000 023E 	HEADER ">R", "TOR" 
 441      5220 
 442 ???? 0000      	    NOOP 
 443 ???? 8E93 9E93 	    rspush tos_low, tos_high 
 444 ???? 9991 8991 	    pspull tos_low, tos_high 
 445 ???? 00C0      	    POON 
 446               	 
 447               	;---------------------------------------------------------------------- 
 448               	; ok ( -- w ) ( w -- ) 
 449               	;     
 450 ???? 0000 0252 	HEADER "R>", "RTO" 
 450      3E20 
 451 ???? 0000      	    NOOP 
 452 ???? 8A93 9A93 	    pspush tos_low, tos_high 
 453 ???? 9D91 8D91 	    rspull tos_low, tos_high 
 454 ???? 00C0      	    POON 
 455               	 
 456               	;---------------------------------------------------------------------- 
 457               	; ok ( -- w ) ( w -- w ) 
 458               	;
 459 ???? 0000 0252 	HEADER "R@", "RAT" 
 459      4020 
 460 ???? 0000      	    NOOP 
 461 ???? 8E93 9E93 	    rspush tos_low, tos_high 
 462 ???? 8C91      	    ld tos_low, X
 463 ???? 9C91      	    ld tos_high, X
 464 ???? 00C0      	    POON 
 465               	 
 466               	;---------------------------------------------------------------------- 
 467               	; ok ( rsp -- ) 
 468               	;
 469 ???? 0000 0352 	HEADER "RS!", "RPTO" 
 469      5321 
 470 ???? 0000      	    NOOP 
 471 ???? DC01      	    movw rsp_low, tos_low 
 472 ???? 9991 8991 	    pspull tos_low, tos_high 
 473 ???? 00C0      	    POON 
 474               	 
 475               	;---------------------------------------------------------------------- 
 476               	; ok ( psp -- ) 
 477               	;
 478 ???? 0000 0350 	HEADER "PS!", "SPTO" 
 478      5321 
 479 ???? 0000      	    NOOP 
 480 ???? EC01      	    movw psp_low, tos_low 
 481 ???? 9991 8991 	    pspull tos_low, tos_high 
 482 ???? 00C0      	    POON 
 483               	 
 484               	;---------------------------------------------------------------------- 
 485               	; ok ( w -- ) 
 486               	;     
 487 ???? 0000 0444 	HEADER "DROP", "DROP" 
 487      524F 5020 
 488 ???? 0000      	    NOOP
 489               	PULL: 
 490 ???? 9991 8991 	    pspull tos_low, tos_high 
 491 ???? 00C0      	    POON 
 492               	 
 493               	;---------------------------------------------------------------------- 
 494               	; ok ( w -- w w) 
 495               	;
 496 ???? 0000 0344 	HEADER "DUP", "DUP" 
 496      5550 
 497 ???? 0000      	    NOOP 
 498               	PUSH:
 499 ???? 8A93 9A93 	    pspush tos_low, tos_high 
 500 ???? 00C0      	    POON 
 501               	 
 502               	;---------------------------------------------------------------------- 
 503               	; ok ( w2 w1 -- w1 w2 ) 
 504               	;
 505 ???? 0000 0453 	HEADER "SWAP", "SWAP" 
 505      5741 5020 
 506 ???? 0000      	    NOOP 
 507 ???? 7991 6991 	    pspull nos_low, nos_high 
 508 ???? 8A93 9A93 	    pspush tos_low, tos_high 
 509 ???? CB01      	    movw tos_low, nos_low
 510 ???? 00C0      	    POON 
 511               	 
 512               	;---------------------------------------------------------------------- 
 513               	; ok ( 0 | w -- 0 | w w ) 
 514               	; dup if tos not zero 
 515               	; 
 516 ???? 0000 043F 	HEADER "?DUP", "ZDUP" 
 516      4455 5020 
 517 ???? 0000      	    NOOP 
 518 ???? 282E 292A 	    test_zero tos_low, tos_high, 1f 
 518      01F0 
 519 ???? 8A93 9A93 	    pspush tos_low, tos_high 
 520               	1: 
 521 ???? 00C0      	    POON 
 522               	 
 523               	;---------------------------------------------------------------------- 
 524               	; ok ( u -- ) 
 525               	; branch IF tos IS zero 
 526               	; 
 527 ???? 0000 073F 	HEADER "?BRANCH", "ZBRANCH" 
 527      4252 414E 
 527      4348 
 528 ???? 0000      	    NOOP 
 529 ???? 282E 292A 	    test_zero tos_low, tos_high, _branch 
 529      01F0 
 530 ???? F901      	    movw zpm_low, ips_low 
 531 ???? 3296      	    adiw zpm_low, 2 
 532 ???? 9F01      	    movw ips_low, zpm_low 
 533 ???? 9991 8991 	    pspull tos_low, tos_high 
 534 ???? 00C0      	    POON 
 535               	 
 536               	;---------------------------------------------------------------------- 
 537               	; ok ( branch next reference ) 
 538               	; 
 539               	; doing offsets in bytes 
 540 ???? 0000 0642 	HEADER "BRANCH", "BRANCH" 
 540      5241 4E43 
 540      4820 
 541 ???? 0000      	    NOOP 
 542               	_branch: 
 543 ???? F901      	    movw zpm_low, ips_low 
 544 ???? EE0F FF1F 	    pmload wrk_low, wrk_high 
 544      4591 5591 
 544      F795 E795 
 545 ???? 240F      	    add ips_low, wrk_low 
 546 ???? 351F      	    adc ips_high, wrk_high 
 547 ???? 9991 8991 	    pspull tos_low, tos_high 
 548 ???? 00C0      	    POON 
 549               	 
 550               	;---------------------------------------------------------------------- 
 551               	; ok ( branch next reference ) 
 552               	; is as >R
 553 ???? 0000 0745 	HEADER "EXECUTE", "EXECUTE" 
 553      5845 4355 
 553      5445 
 554 ???? 0000      	    NOOP 
 555 ???? 8E93 9E93 	    rspush tos_low, tos_high 
 556 ???? 9991 8991 	    pspull tos_low, tos_high 
 557 ???? 00C0      	    POON 
 558               	 
 559               	;---------------------------------------------------------------------- 
 560               	; ok ( w1 w2 -- w2-w1 ) 
 561               	; 
 562 ???? 0000 012D 	HEADER "-", "MINUS" 
 563 ???? 0000      	    NOOP 
 564 ???? 7991 6991 	    pspull nos_low, nos_high 
 565 ???? 8894      	    clc 
 566 ???? 861B      	    sub tos_low, nos_low 
 567 ???? 970B      	    sbc tos_high, nos_high 
 568 ???? 00C0      	    POON 
 569               	 
 570               	;---------------------------------------------------------------------- 
 571               	; ok ( w1 w2 -- w2 AND w1 ) 
 572               	; 
 573 ???? 0000 0341 	HEADER "AND", "AND" 
 573      4E44 
 574 ???? 0000      	    NOOP 
 575 ???? 7991 6991 	    pspull nos_low, nos_high 
 576 ???? 8623      	    and  tos_low, nos_low 
 577 ???? 9723      	    and  tos_high, nos_high 
 578 ???? 00C0      	    POON 
 579               	 
 580               	;---------------------------------------------------------------------- 
 581               	; ok ( w1 w2 -- w2 OR w1 ) 
 582               	; 
 583 ???? 0000 024F 	HEADER "OR", "OR" 
 583      5220 
 584 ???? 0000      	    NOOP 
 585 ???? 7991 6991 	    pspull nos_low, nos_high 
 586 ???? 862B      	    or   tos_low, nos_low 
 587 ???? 972B      	    or   tos_high, nos_high 
 588 ???? 00C0      	    POON 
 589               	 
 590               	;---------------------------------------------------------------------- 
 591               	; ok ( w1 w2 -- w2 XOR w1 ) 
 592               	; 
 593 ???? 0000 0358 	HEADER "XOR", "XOR" 
 593      4F52 
 594 ???? 0000      	    NOOP 
 595 ???? 7991 6991 	    pspull nos_low, nos_high 
 596 ???? 8627      	    eor  tos_low, nos_low 
 597 ???? 9727      	    eor  tos_high, nos_high 
 598 ???? 00C0      	    POON 
 599               	 
 600               	;---------------------------------------------------------------------- 
 601               	; ok ( w -- w * 2 ) same as shift left << 1, unsigned 
 602               	; 
 603 ???? 0000 0232 	HEADER "2*", "SHL" 
 603      2A20 
 604 ???? 0000      	    NOOP 
 605               	_shl: 
 606 ???? 8894      	    clc 
 607 ???? 880F      	    lsl   tos_low 
 608 ???? 991F      	    rol   tos_high 
 609 ???? 00C0      	    POON 
 610               	 
 611               	;---------------------------------------------------------------------- 
 612               	; ok ( w -- w / 2 ) same as shift right >> 1, unsigned 
 613               	; 
 614 ???? 0000 0232 	HEADER "2/", "SHR" 
 614      2F20 
 615 ???? 0000      	    NOOP 
 616               	_shr: 
 617 ???? 8894      	    clc 
 618 ???? 8695      	    lsr tos_low 
 619 ???? 9795      	    ror tos_high 
 620 ???? 00C0      	    POON 
 621               	 
 622               	;---------------------------------------------------------------------- 
 623               	; ok ( nAnB -- nBnA ) swap bytes in a word 
 624 ???? 0000 023E 	HEADER "><", "ENDIAN" 
 624      3C20 
 625 ???? 0000      	    NOOP 
 626 ???? 282E      	    mov _work_, tos_low
 627 ???? 892F      	    mov tos_low, tos_high
 628 ???? 922D      	    mov tos_high, _work_
 629 ???? 00C0      	    POON 
 630               	 
 631               	;---------------------------------------------------------------------- 
 632               	;  os DOCON ( -- w ), (IP++) -> Tos
 633               	;   inverse of comma 
 634               	;   from flash to data stack 
 635               	;   was DOLIT
 636 ???? 0000 0544 	HEADER "DOCON", "DOCON" 
 636      4F43 4F4E 
 637 ???? 0000      	    NOOP 
 638 ???? 8A93 9A93 	    pspush tos_low, tos_high
 639 ???? F901      	    movw zpm_low, ips_low 
 640 ???? EE0F FF1F 	    pmload tos_low, tos_high 
 640      8591 9591 
 640      F795 E795 
 641 ???? 9F01      	    movw ips_low, zpm_low 
 642 ???? 00C0      	    POON 
 643               	 
 644               	;---------------------------------------------------------------------- 
 645               	;  os DOVAR ( -- w ), IP++ -> Tos 
 646               	;  from flash to data stack 
 647               	; 
 648 ???? 0000 0544 	HEADER "DOVAR", "DOVAR" 
 648      4F56 4152 
 649 ???? 0000      	    NOOP 
 650 ???? 8A93 9A93 	    pspush tos_low, tos_high
 651 ???? C901      	    movw tos_low, ips_low 
 652 ???? 0296      	    adiw tos_low, 2
 653 ???? 9C01      	    movw ips_low, tos_low
 654 ???? 0297      	    sbiw tos_low, 2
 655 ???? 00C0      	    POON 
 656               	 
 657               	;---------------------------------------------------------------------- 
 658               	; ok C! ( c a -- ) 
 659               	; only works in sram
 660 ???? 0000 0243 	HEADER "C!", "CTO" 
 660      2120 
 661 ???? 0000      	    NOOP 
 662 ???? FC01      	    movw zpm_low, tos_low
 663 ???? 9991 8991 	    pspull tos_low, tos_high
 664 ???? 8083      	    st Z, tos_low
 665 ???? 9991 8991 	    pspull tos_low, tos_high 
 666 ???? 00C0      	    rjmp TO 
 667               	 
 668               	;---------------------------------------------------------------------- 
 669               	; ok C@ ( a -- c ) 
 670               	; only works in sram
 671 ???? 0000 0243 	HEADER "C@", "CAT" 
 671      4020 
 672 ???? 0000      	    NOOP 
 673 ???? FC01      	    movw zpm_low, tos_low
 674 ???? 8081      	    ld tos_low, Z
 675 ???? 9927      	    clr tos_high
 676 ???? 00C0      	    rjmp AT 
 677               	 
 678               	;---------------------------------------------------------------------- 
 679               	; ok INV 
 680 ???? 0000 0649 	HEADER "INVERT", "INVERT" 
 680      4E56 4552 
 680      5420 
 681 ???? 0000      	    NOOP 
 682               	_inv: 
 683 ???? 8095      	    com tos_low 
 684 ???? 9095      	    com tos_high 
 685 ???? 00C0      	    POON 
 686               	 
 687               	;---------------------------------------------------------------------- 
 688               	; ok NEG 
 689 ???? 0000 064E 	HEADER "NEGATE", "NEGATE" 
 689      4547 4154 
 689      4520 
 690 ???? 0000      	    NOOP 
 691               	_neg: 
 692 ???? 8195      	    neg tos_low 
 693 ???? 9195      	    neg tos_high 
 694 ???? 00C0      	    POON 
 695               	 
 696               	;---------------------------------------------------------------------- 
 697               	; ok ( w -- w ) 
 698               	;  data space pointer align to CELL, atmega is always 
 699               	 
 700 ???? 0000 0541 	HEADER "ALIGN", "ALLIGN" 
 700      4C49 474E 
 701 ???? 0000      	    NOOP 
 702 ???? 0196      	    adiw tos_low, 1 
 703 ???? 8F7F      	    cbr tos_low, 0 
 704 ???? 00C0      	    POON 
 705               	 
 706               	;---------------------------------------------------------------------- 
 707               	; ok ( -- CELL ) 
 708               	; CELL is 2 ; size of a cell 
 709               	; 
 710 ???? 0000 0443 	HEADER "CELL", "CELL" 
 710      454C 4C20 
 711 ???? 0000      	    NOOP 
 712 ???? 8A93 9A93 	    pspush tos_low, tos_high
 713 ???? 82E0      	    ldi tos_low, CELL_SIZE 
 714 ???? 9927      	    clr tos_high 
 715 ???? 00C0      	    POON 
 716               	 
 717               	;---------------------------------------------------------------------- 
 718               	; ok ( a1 a2 u -- 0 | 1) 
 719               	; compare bytes from source++ to destination++, decrease count-- 
 720               	; returns 0 if equal (no differ) 
 721               	; 
 722 ???? 0000 0543 	HEADER "CSAME", "CSAME" 
 722      5341 4D45 
 723 ???? 0000      	    NOOP 
 724               	    ; WARNING No bound check and counter equal 0 moves nothing 
 725               	 
 726               	    ; pull address source 
 727 ???? F991 E991 	    pspull zpm_low, zpm_high 
 728               	 
 729               	    ; pull address destin 
 730 ???? 7991 6991 	    pspull nos_low, nos_high 
 731               	 
 732               	    ; no offset 
 733               	 
 734               	    ; free Y
 735 ???? CE93 DE93 	    rspush psp_low, psp_high
 736 ???? EB01      	    movw psp_low, nos_low
 737               	
 738               	1: 
 739 ???? 282E      	    mov _work_, tos_low
 740 ???? 292A      	    or _work_, tos_high
 741 ???? 01F0      	    brbs BIT_ZERO, 2f
 742               	 
 743 ???? 4991      	    ld wrk_low, Y+ 
 744 ???? 5191      	    ld wrk_high, Z+ 
 745 ???? 452B      	    or wrk_low, wrk_high 
 746 ???? 01F4      	    brbc BIT_ZERO, 3f 
 747               	 
 748               	    ; again 
 749 ???? 0197      	    sbiw tos_low, 1
 750 ???? 00C0      	    rjmp 1b 
 751               	 
 752               	2: 
 753               	    ; equal 
 754 ???? 4427      	    clr wrk_low 
 755 ???? 5527      	    clr wrk_high 
 756 ???? 00C0      	    rjmp 4f 
 757               	3: 
 758               	    ; not equal 
 759 ???? 4FEF      	    ser wrk_low 
 760 ???? 5FEF      	    ser wrk_high 
 761               	4: 
 762               	    ; pull psp 
 763 ???? DD91 CD91 	    rspull psp_low, psp_high 
 764 ???? 00C0      	    POON 
 765               	 
 766               	;---------------------------------------------------------------------- 
 767               	; ok ( s d u -- ) 
 768               	; 
 769               	; MOVE (forward) copy bytes from source++ to destination++, decrease count-- 
 770 ???? 0000 0543 	HEADER "CMOVE", "CMOVE" 
 770      4D4F 5645 
 771 ???? 0000      	    NOOP 
 772               	    ; WARNING No bound check and counter equal 0 moves nothing 
 773               	 
 774               	    ; pull address source 
 775 ???? F991 E991 	    pspull zpm_low, zpm_high 
 776               	 
 777               	    ; pull address destin 
 778 ???? 7991 6991 	    pspull nos_low, nos_high 
 779               	 
 780               	    ; free Y
 781 ???? CE93 DE93 	    rspush psp_low, psp_high
 782 ???? EB01      	    movw psp_low, nos_low
 783               	
 784               	    ; no offset 
 785               	 
 786               	1: 
 787 ???? 282E      	    mov _work_, tos_low
 788 ???? 292A      	    or _work_, tos_high
 789 ???? 01F0      	    brbs BIT_ZERO, 2f
 790               	 
 791               	    ; move a cell 
 792 ???? 2990      	    ld _work_, Y+ 
 793 ???? 2192      	    st Z+, _work_ 
 794               	 
 795               	    ; again 
 796 ???? 0197      	    sbiw tos_low, 1
 797 ???? 00C0      	    rjmp 1b 
 798               	 
 799               	2: 
 800               	    ; pull psp 
 801 ???? DD91 CD91 	    rspull psp_low, psp_high 
 802 ???? 00C0      	    POON 
 803               	 
 804               	;---------------------------------------------------------------------- 
 805               	; ok ( s d u -- ) 
 806               	; 
 807               	; MOVE (backward) copy bytes from source-- to destination--, decrease count-- 
 808 ???? 0000 0542 	HEADER "BMOVE", "BMOVE" 
 808      4D4F 5645 
 809 ???? 0000      	    NOOP 
 810               	    ; WARNING No bound check and counter equal 0 moves nothing 
 811               	 
 812               	    ; pull address source 
 813 ???? F991 E991 	    pspull zpm_low, zpm_high 
 814               	 
 815               	    ; pull address destin 
 816 ???? 7991 6991 	    pspull nos_low, nos_high 
 817               	 
 818               	    ; free Y
 819 ???? CE93 DE93 	    rspush psp_low, psp_high
 820 ???? EB01      	    movw psp_low, nos_low
 821               	
 822               	    ; do offset
 823 ???? E80F      	    add zpm_low, tos_low
 824 ???? F91F      	    adc zpm_high, tos_high
 825 ???? C80F      	    add psp_low, tos_low
 826 ???? D91F      	    adc psp_high, tos_high
 827               	 
 828               	    ; move a byte
 829               	1:
 830 ???? 282E      	    mov _work_, tos_low
 831 ???? 292A      	    or _work_, tos_high
 832 ???? 01F0      	    brbs BIT_ZERO, 2f
 833               	 
 834 ???? 2A90      	    ld _work_, -Y
 835 ???? 2292      	    st -Z, _work_
 836               	
 837               	    ; again 
 838 ???? 0197      	    sbiw tos_low, 1
 839 ???? 00C0      	    rjmp 1b 
 840               	
 841               	2:
 842               	    ; pull psp
 843 ???? DD91 CD91 	    rspull psp_low, psp_high
 844 ???? 00C0      	    POON
 845               	
 846               	;********************************************************************** 
 847               	; FORTH
 848               	; 
 849               	;    the follow definitions of compound words 
 850               	;    are as already compiled into a list of references, 
 851               	;    that is a sequence of cells. 
 852               	;    No preorder because the assembler does translation 
 853               	;    of names to address (references) 
 854               	; 
 855               	;    (some adapted from old fig-forth listings) 
 856               	; 
 857               	;---------------------------------------------------------------------- 
 858               	; ok ( w3 w2 w1 -- w2 w3 w1 ) 
 859               	; 
 860 ???? 0000 0342 	HEADER "BIS", "BIS" 
 860      4953 
 861 ???? 0000 0000 	    .word TOR, SWAP, RTO, ENDS 
 861      0000 0000 
 862               	 
 863               	;---------------------------------------------------------------------- 
 864               	; ok ( w2 w1 -- w2 w1 w2 ) 
 865               	; 
 866 ???? 0000 044F 	HEADER "OVER", "OVER" 
 866      5645 5220 
 867 ???? 0000 0000 	    .word SWAP, DUP, BIS, ENDS 
 867      0000 0000 
 868               	 
 869               	;---------------------------------------------------------------------- 
 870               	; ok ( w3 w2 w1 -- w2 w1 w3 ) 
 871               	; 
 872 ???? 0000 0352 	HEADER "ROT", "ROTU" 
 872      4F54 
 873 ???? 0000 0000 	    .word BIS, SWAP, ENDS 
 873      0000 
 874               	 
 875               	;---------------------------------------------------------------------- 
 876               	; ok ( w3 w2 w1 -- w1 w3 w2 ) 
 877               	; 
 878 ???? 0000 042D 	HEADER "-ROT", "ROTD" 
 878      524F 5420 
 879 ???? 0000 0000 	    .word SWAP, BIS, ENDS 
 879      0000 
 880               	 
 881               	;---------------------------------------------------------------------- 
 882               	; ok ( w2 w1 --  w1 w2 w1 ) 
 883               	; 
 884 ???? 0000 0454 	HEADER "TUCK", "TUCK" 
 884      5543 4B20 
 885 ???? 0000 0000 	    .word DUP, BIS, ENDS 
 885      0000 
 886               	 
 887               	;---------------------------------------------------------------------- 
 888               	; ok ( w3 w2 w1 --  w1 w2 w3 ) 
 889               	; 
 890 ???? 0000 0446 	HEADER "FLIP", "FLIP" 
 890      4C49 5020 
 891 ???? 0000 0000 	    .word SWAP, BIS, SWAP, ENDS 
 891      0000 0000 
 892               	
 893               	;---------------------------------------------------------------------- 
 894               	; ok (  -- 2) 
 895 ???? 0000 0132 	HEADER "2", "TWO" 
 896 ???? 0000 0000 	    .word ONE, SHL, ENDS 
 896      0000 
 897               	 
 898               	;---------------------------------------------------------------------- 
 899               	; ok ( w1 w2 -- 0 | -1) 
 900               	; 
 901 ???? 0000 013D 	HEADER "=", "EQUAL" 
 902 ???? 0000 0000 	    .word MINUS, ZEQU, ENDS 
 902      0000 
 903               	 
 904               	;---------------------------------------------------------------------- 
 905               	; ok ( w1 w2 -- 0 | -1) 
 906               	; 
 907 ???? 0000 023C 	HEADER "<>", "NOTEQUAL" 
 907      3E20 
 908 ???? 0000 0000 	    .word EQUAL, INVERT, ENDS 
 908      0000 
 909               	 
 910               	;---------------------------------------------------------------------- 
 911               	; ok ( w1 w2 -- 0 | -1 ) 
 912               	; 
 913 ???? 0000 013E 	HEADER ">", "GTHAN" 
 914 ???? 0000 0000 	    .word SWAP, LTHAN, ENDS 
 914      0000 
 915               	 
 916               	;---------------------------------------------------------------------- 
 917               	;  ok 0>  must be signed 
 918               	; 
 919 ???? 0000 0230 	HEADER "0>", "ZEROGT" 
 919      3E20 
 920 ???? 0000 0000 	     .word ZERO, LTHAN, ENDS 
 920      0000 
 921               	 
 922               	;---------------------------------------------------------------------- 
 923               	;  ok 0< must be signed 
 924               	; 
 925 ???? 0000 0230 	HEADER "0<", "ZEROLT" 
 925      3C20 
 926 ???? 0000 0000 	    .word ZERO, SWAP, LTHAN, ENDS 
 926      0000 0000 
 927               	 
 928               	;---------------------------------------------------------------------- 
 929               	; ok ( w -- w * CELL  ) 
 930               	; CELL is 2, multiply by 2, easy way 
 931               	; 
 932 ???? 0000 0543 	HEADER "CELLS", "CELLS" 
 932      454C 4C53 
 933 ???? 0000 0000 	    .word SHL, ENDS 
 934               	 
 935               	;---------------------------------------------------------------------- 
 936               	; 
 937               	; ok ( w -- w + CELL ) 
 938               	; 
 939 ???? 0000 0543 	HEADER "CELL+", "CELLPLUS" 
 939      454C 4C2B 
 940 ???? 0000 0000 	    .word CELL, PLUS, ENDS 
 940      0000 
 941               	 
 942               	;---------------------------------------------------------------------- 
 943               	; 
 944               	; ok ( w -- w - CELL ) 
 945               	; 
 946 ???? 0000 0543 	HEADER "CELL-", "CELLMINUS" 
 946      454C 4C2D 
 947 ???? 0000 0000 	    .word CELL, MINUS, ENDS 
 947      0000 
 948               	 
 949               	;---------------------------------------------------------------------- 
 950               	; 
 951               	; ok ( w -- w + 1 ) 
 952               	; 
 953 ???? 0000 0231 	HEADER "1+", "ONEPLUS" 
 953      2B20 
 954 ???? 0000 0000 	     .word ONE, PLUS, ENDS 
 954      0000 
 955               	 
 956               	;---------------------------------------------------------------------- 
 957               	; 
 958               	; ok ( w -- w - 1 ) 
 959               	; 
 960 ???? 0000 0231 	HEADER "1-", "ONEMINUS" 
 960      2D20 
 961 ???? 0000 0000 	     .word ONE, MINUS, ENDS 
 961      0000 
 962               	 
 963               	;---------------------------------------------------------------------- 
 964               	; 
 965               	; ok ( w -- w + 2 ) 
 966               	; 
 967 ???? 0000 0232 	HEADER "2+", "TWOPLUS" 
 967      2B20 
 968 ???? 0000 0000 	     .word TWO, PLUS, ENDS 
 968      0000 
 969               	 
 970               	;---------------------------------------------------------------------- 
 971               	; 
 972               	; ok ( w -- w - 2 ) 
 973               	; 
 974 ???? 0000 0232 	HEADER "2-", "TWOMINUS" 
 974      2D20 
 975 ???? 0000 0000 	     .word TWO, MINUS, ENDS 
 975      0000 
 976               	 
 977               	;---------------------------------------------------------------------- 
 978               	; 
 979               	; ok ( u w -- ) 
 980               	; 
 981 ???? 0000 022B 	HEADER "+!", "PLUSTO" 
 981      2120 
 982 ???? 0000 0000 	    .word SWAP, OVER, AT, PLUS, SWAP, TO, ENDS 
 982      0000 0000 
 982      0000 0000 
 982      0000 
 983               	 
 984               	;**********************************************************************
 985               	;---------------------------------------------------------------------- 
 986               	; 
 987               	; ok \] 
 988               	; 
 989 ???? 0000 015D 	HEADER  "]", "RBRAC", 
 990 ???? 0000 0000 	    .word ONE, STATE, TO, ENDS 
 990      0000 0000 
 991               	 
 992               	;---------------------------------------------------------------------- 
 993               	; 
 994               	; ok \[ 
 995               	; 
 996 ???? 0000 815B 	HEADER  "[", "LBRAC", F_IMMEDIATE 
 997 ???? 0000 0000 	    .word ZERO, STATE, TO, ENDS 
 997      0000 0000 
 998               	 
 999               	;---------------------------------------------------------------------- 
 1000               	; 
 1001               	; ok TOGGLE ( a f -- )
 1002               	; 
 1003 ???? 0000 0654 	HEADER  "TOGGLE", "TOGGLE", 
 1003      4F47 474C 
 1003      4520 
 1004 ???? 0000 0000 	    .word OVER, AT, XOR, SWAP, TO, ENDS 
 1004      0000 0000 
 1004      0000 0000 
 1005               	 
 1006               	;---------------------------------------------------------------------- 
 1007               	; 
 1008               	; ok >NFA ( a f -- )
 1009               	; 
 1010 ???? 0000 043E 	HEADER  ">NFA", "TONFA", 
 1010      4E46 4120 
 1011 ???? 0000 0000 	    .word CELL, PLUS, ENDS
 1011      0000 
 1012               	
 1013               	;---------------------------------------------------------------------- 
 1014               	; 
 1015               	; ok >CFA ( a f -- )
 1016               	; 
 1017 ???? 0000 043E 	HEADER  ">CFA", "TOCFA", 
 1017      4346 4120 
 1018 ???? 0000 0000 	    .word CELL, PLUS, DUP, AT, F_UNMASK, AND, PLUS, ENDS
 1018      0000 0000 
 1018      0F00 0000 
 1018      0000 0000 
 1019               	
 1020               	;---------------------------------------------------------------------- 
 1021               	; 
 1022               	; ok HIDDEN 
 1023               	; 
 1024 ???? 0000 0648 	HEADER  "HIDDEN", "HIDDEN", 
 1024      4944 4445 
 1024      4E20 
 1025 ???? 0000 0000 	    .word LATEST, TONFA, F_HIDDEN, TOGGLE, ENDS 
 1025      2000 0000 
 1025      0000 
 1026               	
 1027               	;---------------------------------------------------------------------- 
 1028               	; 
 1029               	; ok IMMEDIATE 
 1030               	; 
 1031 ???? 0000 0949 	HEADER  "IMMEDIATE", "IMMEDIATE", 
 1031      4D4D 4544 
 1031      4941 5445 
 1032 ???? 0000 0000 	    .word LATEST, TONFA, F_IMMEDIATE, TOGGLE, ENDS 
 1032      8000 0000 
 1032      0000 
 1033               	
 1034               	;---------------------------------------------------------------------- 
 1035               	; 
 1036               	; ok COMPILE_ONLY 
 1037               	; 
 1038 ???? 0000 0C43 	HEADER  "COMPILE_ONLY", "COMPILE_ONLY", 
 1038      4F4D 5049 
 1038      4C45 5F4F 
 1038      4E4C 5920 
 1039 ???? 0000 0000 	    .word LATEST, TONFA, F_COMPILE, TOGGLE, ENDS 
 1039      4000 0000 
 1039      0000 
 1040               	
 1041               	;---------------------------------------------------------------------- 
 1042               	; 
 1043               	; ok HERE 
 1044               	; 
 1045 ???? 0000 0448 	HEADER  "HERE", "HERE", 
 1045      4552 4520 
 1046 ???? 0000 0000 	    .word FLASH_LAST, AT, ENDS 
 1046      0000 
 1047               	 
 1048               	;---------------------------------------------------------------------- 
 1049               	; 
 1050               	; ok ALLOT 
 1051               	; 
 1052 ???? 0000 0541 	HEADER  "ALLOT", "ALLOT", 
 1052      4C4C 4F54 
 1053 ???? 0000 0000 	    .word FLASH_LAST, PLUSTO, ENDS 
 1053      0000 
 1054               	 
 1055               	;---------------------------------------------------------------------- 
 1056               	; 
 1057               	; ok COMMMA ( w -- ) 
 1058 ???? 0000 012C 	HEADER  ",", "COMMA", 
 1059 ???? 0000 0000 	    .word HERE, TO, CELL, ALLOT, ENDS 
 1059      0000 0000 
 1059      0000 
 1060               	 
 1061               	;---------------------------------------------------------------------- 
 1062               	; 
 1063               	; ok this puts next cell into stack and compiles into HERE 
 1064               	; 
 1065 ???? 0000 0443 	HEADER  "COMP", "COMP", 
 1065      4F4D 5020 
 1066 ???? 0000 0000 	    .word DOCON, COMMA, ENDS 
 1066      0000 
 1067               	 
 1068               	;----------------------------------------------------------------------
 1069               	; ok compile a eow 
 1070 ???? 0000 0646 	HEADER "FINITE", "FINITE"
 1070      494E 4954 
 1070      4520 
 1071 ???? 0000 0000 	    .word COMP, ENDS, ENDS
 1071      0000 
 1072               	
 1073               	;----------------------------------------------------------------------
 1074               	; ok compile a header 
 1075 ???? 0000 0643 	HEADER "CREATE", "CREATE"
 1075      5245 4154 
 1075      4520 
 1076 ???? 0000      	    .word ENDS
 1077               	
 1078               	;----------------------------------------------------------------------
 1079               	; ok gets a cc<chars>cc from source
 1080               	;   ( -- a n )
 1081 ???? 0000 0550 	HEADER "PARSE", "PARSE"
 1081      4152 5345 
 1082 ???? 0000      	    .word ENDS
 1083               	/*
 1084               	          TOIN @ TIB @ TIB_SIZE PLUS MINUS <0 IF REFILL THEN
 1085               	          TOIN @ 
 1086               	          BEGIN DUP C@ 
 1087               	            DUP ZERO = IF REFILL ??? THEN 
 1088               	            BL = IF 1+ FALSE ELSE TRUE THEN UNTIL
 1089               	          DUP BEGIN DUP C@ 
 1090               	            DUP ZERO = IF REFILL ??? THEN 
 1091               	            BL = INVERT IF 1+ FALSE ELSE TRUE THEN UNTIL
 1092               	          DUP TOIN ! MINUS ENDS
 1093               	*/
 1094               	
 1095               	;---------------------------------------------------------------------- 
 1096               	; ok  
 1097 ???? 0000 013A 	HEADER  ":", "COLON", 
 1098 ???? 0000 0000 	    .word CREATE, RBRAC, ENDS 
 1098      0000 
 1099               	 
 1100               	;---------------------------------------------------------------------- 
 1101               	; ok  
 1102 ???? 0000 013B 	HEADER  ";", "SEMMI", 
 1103 ???? 0000 0000 	    .word FINITE, LBRAC, ENDS 
 1103      0000 
 1104               	  
 1105               	;---------------------------------------------------------------------- 
 1106               	; 
 1107               	; ok BACK 
 1108 ???? 0000 8442 	HEADER  "BACK", "BACK", F_IMMEDIATE 
 1108      4143 4B20 
 1109 ???? 0000 0000 	    .word HERE, SWAP, MINUS, COMMA, ENDS 
 1109      0000 0000 
 1109      0000 
 1110               	 
 1111               	;---------------------------------------------------------------------- 
 1112               	; 
 1113               	; ok MARK 
 1114 ???? 0000 844D 	HEADER  "MARK", "MARK", F_IMMEDIATE 
 1114      4152 4B20 
 1115 ???? 0000 0000 	    .word HERE, 0, COMMA, ENDS 
 1115      0000 0000 
 1116               	 
 1117               	;---------------------------------------------------------------------- 
 1118               	; 
 1119               	; ok BEGIN 
 1120 ???? 0000 8542 	HEADER  "BEGIN", "BEGIN", F_IMMEDIATE 
 1120      4547 494E 
 1121 ???? 0000 0000 	    .word HERE, ENDS 
 1122               	 
 1123               	;---------------------------------------------------------------------- 
 1124               	; 
 1125               	; ok AGAIN resolves a backward branch 
 1126 ???? 0000 8541 	HEADER  "AGAIN", "AGAIN", F_IMMEDIATE 
 1126      4741 494E 
 1127 ???? 0000 0000 	    .word COMP, BRANCH, BACK, ENDS 
 1127      0000 0000 
 1128               	 
 1129               	;---------------------------------------------------------------------- 
 1130               	; 
 1131               	; ok UNTIL 
 1132 ???? 0000 8555 	HEADER  "UNTIL", "UNTIL", F_IMMEDIATE 
 1132      4E54 494C 
 1133 ???? 0000 0000 	    .word COMP, ZBRANCH, BACK, ENDS 
 1133      0000 0000 
 1134               	 
 1135               	;---------------------------------------------------------------------- 
 1136               	; 
 1137               	; ok UNLESS 
 1138 ???? 0000 8655 	HEADER  "UNLESS", "UNLESS", F_IMMEDIATE 
 1138      4E4C 4553 
 1138      5320 
 1139 ???? 0000 0000 	    .word INVERT, UNTIL, ENDS 
 1139      0000 
 1140               	 
 1141               	;---------------------------------------------------------------------- 
 1142               	; 
 1143               	; ok IF 
 1144 ???? 0000 8249 	HEADER  "IF", "IF", F_IMMEDIATE 
 1144      4620 
 1145 ???? 0000 0000 	    .word COMP, ZBRANCH, MARK, ENDS 
 1145      0000 0000 
 1146               	 
 1147               	;---------------------------------------------------------------------- 
 1148               	; 
 1149               	; ok ENDIF resolves a forward branch 
 1150               	; note: use of store if addres is not 'here' 
 1151 ???? 0000 8545 	HEADER  "ENDIF", "ENDIF", F_IMMEDIATE 
 1151      4E44 4946 
 1152 ???? 0000 0000 	    .word DUP, HERE, MINUS, SWAP, TO, ENDS 
 1152      0000 0000 
 1152      0000 0000 
 1153               	 
 1154               	;---------------------------------------------------------------------- 
 1155               	; 
 1156               	; ok THEN 
 1157 ???? 0000 8454 	HEADER  "THEN", "THEN", F_IMMEDIATE 
 1157      4845 4E20 
 1158 ???? 0000 0000 	    .word ENDIF, ENDS 
 1159               	 
 1160               	;---------------------------------------------------------------------- 
 1161               	; 
 1162               	; ok ELSE 
 1163 ???? 0000 8445 	HEADER  "ELSE", "ELSE", F_IMMEDIATE 
 1163      4C53 4520 
 1164 ???? 0000 0000 	    .word COMP, BRANCH, MARK, SWAP, ENDIF, ENDS 
 1164      0000 0000 
 1164      0000 0000 
 1165               	 
 1166               	;---------------------------------------------------------------------- 
 1167               	; 
 1168               	; ok WHILE 
 1169 ???? 0000 8557 	HEADER  "WHILE", "WHILE", F_IMMEDIATE 
 1169      4849 4C45 
 1170 ???? 0000 0000 	    .word IF, ENDS 
 1171               	 
 1172               	;---------------------------------------------------------------------- 
 1173               	; 
 1174               	; ok REPEAT 
 1175 ???? 0000 8652 	HEADER  "REPEAT", "REPEAT", F_IMMEDIATE 
 1175      4550 4541 
 1175      5420 
 1176 ???? 0000 0000 	    .word TOR, TOR, AGAIN, RAT, RAT, MINUS, ENDIF, ENDS 
 1176      0000 0000 
 1176      0000 0000 
 1176      0000 0000 
 1177               	 
 1178               	;---------------------------------------------------------------------- 
 1179               	; does reset 
 1180               	; 
 1181 ???? 0000 0342 	HEADER "BYE", "BYE" 
 1181      5945 
 1182 ???? 0000      	    NOOP 
 1183 ???? 00C0      	    rjmp RESET 
 1184 ???? 00C0      	    POON 
 1185               	 
 1186               	;---------------------------------------------------------------------- 
 1187               	; 
 1188 ???? 0000 0443 	HEADER "COLD", "COLD" 
 1188      4F4C 4420 
 1189 ???? 0000      	    NOOP 
 1190               	; restart return stack 
 1191 ???? A9E3      	    ldi rsp_low, lo8(RSP) 
 1192 ???? B4E0      	    ldi rsp_high, hi8(RSP) 
 1193               	; restart parameter stack 
 1194 ???? C5E1      	    ldi psp_low, lo8(PSP) 
 1195 ???? D4E0      	    ldi psp_high, hi8(PSP) 
 1196               	; restart buffers etc???? 
 1197               	; preload to WARM 
 1198               	    ; next word 
 1199 ???? E0E0      	    ldi zpm_low, lo8(WARM) 
 1200 ???? F0E0      	    ldi zpm_high, hi8(WARM) 
 1201 ???? EE93 FE93 	    rspush zpm_low, zpm_high 
 1202 ???? 00C0      	    POON 
 1203               	 
 1204               	;---------------------------------------------------------------------- 
 1205               	; 
 1206 ???? 0000 0457 	HEADER  "WARM", "WARM" 
 1206      4152 4D20 
 1207 ???? 0000      	    NOOP 
 1208               	    ; verify error code 
 1209               	    ; resets etc 
 1210 ???? 00C0      	    POON 
 1211               	 
  76               	
  77               	;----------------------------------------------------------------------
  78               	;.p2align 1, 0x00
  79               	;#include "inside.S"
  80               	
  81               	;----------------------------------------------------------------------
  82               	.p2align 1, 0x00
  83               	#include "math.S"
   1               	
   2               	/*
   3               	 *  DISCLAIMER"
   4               	 *
   5               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   6               	 *
   7               	 *  Permission is hereby granted, free of charge, to any person obtaining
   8               	 *  a copy of this software and associated documentation files (the
   9               	 *  "Software"), to deal in the Software without restriction, including
  10               	 *  without limitation the rights to use, copy, modify, merge, publish,
  11               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  12               	 *  permit persons to whom the Software is furnished to do so, subject to
  13               	 *  the following conditions"
  14               	 *
  15               	 *  The above copyright notice and this permission notice shall be
  16               	 *  included in all copies or substantial portions of the Software.
  17               	 *
  18               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  19               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  20               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  21               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  22               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  23               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  24               	 *
  25               	 */
  26               	
  27               	;----------------------------------------------------------------------
  28               	;
  29               	; great DJB hash, adapted for 16bits
  30               	;
  31               	; hash = (hash << 5) + str[i]
  32               	; for ascii chars in sram, in bytes not cells
  33               	; ( a u -- h ) djb hash
  34               	.equ djbHASH, 5381
  35 ???? 0000 0448 	HEADER "HASH", "HASH"
  35      4153 4820 
  36 ???? 0000      	    NOOP
  37 ???? 3324      	    clr _zero_
  38 ???? 65E0      	    ldi nos_low, lo8(djbHASH)
  39 ???? 75E1      	    ldi nos_high, hi8(djbHASH)
  40 ???? F991 E991 	    pspull zpm_low, zpm_high
  41               	
  42               	    ; get a char
  43               	1:    
  44               	    
  45 ???? 282E      	    mov _work_, tos_low
  46 ???? 292A      	    or _work_, tos_high
  47 ???? 01F0      	    brbs BIT_ZERO, 2f
  48               	
  49 ???? 2190      	    ld _work_, Z+
  50 ???? 620D      	    add nos_low, _work_
  51 ???? 731D      	    adc nos_high, _zero_
  52 ???? 660F      	    lsl nos_low
  53 ???? 771F      	    rol nos_high
  54 ???? 660F      	    lsl nos_low
  55 ???? 771F      	    rol nos_high
  56 ???? 660F      	    lsl nos_low
  57 ???? 771F      	    rol nos_high
  58 ???? 660F      	    lsl nos_low
  59 ???? 771F      	    rol nos_high
  60 ???? 660F      	    lsl nos_low
  61 ???? 771F      	    rol nos_high
  62               	
  63 ???? 0197      	    sbiw tos_low, 1
  64 ???? 00C0      	    rjmp 1b
  65               	    
  66               	2:
  67 ???? CB01      	    movw tos_low, nos_low
  68 ???? 00C0      	    POON
  69               	
  70               	;----------------------------------------------------------------------
  71               	;
  72               	;     ©2000-2021 by Gerhard Schmidt,
  73               	;      http://www.avr-asm-tutorial.net/avr_en/apps/random_tn13/random_calc_tn13.html
  74               	;
  75               	;    seed ~ 0x02A8
  76               	;
  77               	;     also good seeds
  78               	;
  79               	;    B167 4A3C 9879 B61E 7B26 
  80               	;    A858 1F88 50D5 419D 5537
  81               	;    0224 0527 5EB6 1E6D BCDC
  82               	;    92FF C206 0ECD 9361 2823
  83               	;    BE0B B303 6462 0E4C 3D24
  84               	;
  85 ???? 0000 0652 	HEADER "RANDOM", "RANDOM"
  85      414E 444F 
  85      4D20 
  86 ???? 0000      	    NOOP
  87               	;    load seed
  88 ???? 4091 0000 	    lds wrk_low, SEED
  89 ???? 5091 0000 	    lds wrk_high, SEED
  90               	;    run magics
  91 ???? 4527      	    eor wrk_low, wrk_high
  92 ???? 4295      	    swap wrk_low
  93 ???? 540F      	    add wrk_high, wrk_low
  94 ???? 4A93 5A93 	    pspush wrk_low, wrk_high
  95 ???? 00C0      	    rjmp _seed
  96               	
  97               	;----------------------------------------------------------------------
  98               	;
  99               	; sets seed for rand
 100               	;
 101 ???? 0000 0452 	HEADER "RAND", "RAND"
 101      414E 4420 
 102 ???? 0000      	    NOOP
 103 ???? 5991 4991 	    pspull wrk_low, wrk_high
 104               	_seed:
 105 ???? 4093 0000 	    sts SEED, wrk_low
 106 ???? 5093 0000 	    sts SEED + 1, wrk_high
 107 ???? 00C0      	    POON
 108               	    
 109               	;----------------------------------------------------------------------
 110               	; a 64 bit half number, 7FFF FFFF FFFF FFFF is 9.223.372.036.854.775.807
 111               	;----------------------------------------------------------------------
 112               	;
 113               	; adapted from AVR-200 
 114               	; "mpy16u" "- 16x16 Bit Unsigned Multiplication
 115               	;
 116               	; ok UM*
 117 ???? 0000 0355 	HEADER "UM*", "UMUL"
 117      4D2A 
 118 ???? 0000      	    NOOP
 119               	;
 120               	;    move operanos
 121               	;
 122 ???? 9991 8991 	    pspull tos_low, tos_high    ; pull multiplicand
 123 ???? 7991 6991 	    pspull nos_low, nos_high    ; pull multiplier
 124               	;
 125               	;***** Code
 126               	;
 127               	mul16u: 
 128 ???? 40E1      	    ldi wrk_low, 16
 129 ???? 242E      	    mov _work_, wrk_low     ;init loop counter
 130 ???? 441B      	    sub wrk_low, wrk_low    ;clear high result Low byte
 131 ???? 551B      	    sub wrk_high, wrk_high    ;clear high result High byte and carry
 132               	
 133               	    ; multiplier shift rigth
 134 ???? 7695      	    lsr nos_high
 135 ???? 6795      	    ror nos_low
 136               	
 137               	m16u_1: 
 138 ???? 00F4      	    brcc noad8                 ;if carry, bit 0, of multiplier set
 139 ???? 480F      	    add wrk_low, tos_low     ;add multiplicand Low to byte 2 of res
 140 ???? 591F      	    adc wrk_high, tos_high     ;add multiplicand high to byte 3 of res
 141               	
 142               	noad8: 
 143 ???? 5795      	    ror wrk_high             ;shift right result byte 3
 144 ???? 4795      	    ror wrk_low             ;rotate right result byte 2
 145 ???? 7795      	    ror nos_high            ;rotate result byte 1 and multiplier High
 146 ???? 6795      	    ror nos_low                ;rotate result byte 0 and multiplier Low
 147 ???? 2A94      	    dec _work_                 ;decrement loop counter
 148 ???? 01F4      	    brne m16u_1             ;if not done, loop more
 149               	
 150               	m16ures: 
 151               	m16result:    
 152 ???? 4A93 5A93 	    pspush wrk_low, wrk_high    ; high bytes
 153 ???? 6A93 7A93 	    pspush nos_low, nos_high    ; low bytes
 154 ???? 00C0      	    POON
 155               	
 156               	;----------------------------------------------------------------------
 157               	;
 158               	;     adapted from AVR-200 
 159               	;   "div16u" "- 16/16 Bit Unsigned Division
 160               	;
 161               	; ok UM/MOD
 162 ???? 0000 0655 	HEADER "UM/MOD", "UMBYMOD"
 162      4D2F 4D4F 
 162      4420 
 163 ???? 0000      	    NOOP
 164               	;
 165               	;    move operanos
 166               	;
 167 ???? 9991 8991 	    pspull tos_low, tos_high    ; pull divisor
 168 ???? 7991 6991 	    pspull nos_low, nos_high    ; pull dividend
 169               	;
 170               	;***** Code
 171               	
 172               	div16u: 
 173 ???? 41E1      	    ldi wrk_low, 17
 174 ???? 242E      	    mov _work_, wrk_low     ;init loop counter
 175 ???? 441B      	    sub wrk_low, wrk_low    ;clear remainder Low byte
 176 ???? 551B      	    sub wrk_high, wrk_high    ;clear remainder High byte and carry
 177               	
 178               	d16u_1: 
 179 ???? 661F      	    rol nos_low             ;shift left dividend
 180 ???? 771F      	    rol nos_high
 181 ???? 2A94      	    dec _work_                 ;decrement counter
 182 ???? 01F0      	    breq d16ures             ;if done
 183               	
 184               	d16u_2: 
 185 ???? 441F      	    rol wrk_low             ;shift dividend into remainder
 186 ???? 551F      	    rol wrk_high
 187 ???? 481B      	    sub wrk_low, tos_low     ;remainder = remainder - divisor
 188 ???? 590B      	    sbc wrk_high, tos_high     ;
 189 ???? 00F4      	    brcc d16u_3             ;if result negative
 190 ???? 480F      	    add wrk_low, tos_low     ; restore remainder
 191 ???? 591F      	    adc wrk_high, tos_high
 192 ???? 8894      	    clc                     ; clear carry to be shifted into result
 193 ???? 00C0      	    rjmp d16u_1             ;else
 194               	d16u_3: 
 195 ???? 0894      	    sec                      ; set carry to be shifted into result
 196 ???? 00C0      	    rjmp d16u_1
 197               	
 198               	d16ures:
 199 ???? 00C0      	    rjmp m16result
 200               	
 201               	;----------------------------------------------------------------------
 202               	;
 203               	;     adapted from AVR-200 
 204               	;     "mpy16s" "- 16x16 Bit Signed Multiplication
 205               	; ok *
 206 ???? 0000 012A 	HEADER "*", "SMUL"
 207 ???? 0000      	    NOOP
 208               	;
 209               	;***** Code
 210               	;
 211               	;    move operanos
 212               	;
 213 ???? 9991 8991 	    pspull tos_low, tos_high        ; pull multiplicand
 214 ???? 7991 6991 	    pspull nos_low, nos_high        ; pull multiplier
 215               	;
 216               	;***** Code
 217               	mpy16s: 
 218 ???? 40E1      	    ldi wrk_low, 16
 219 ???? 242E      	    mov _work_, wrk_low     ;init loop counter
 220 ???? 441B      	    sub wrk_low, wrk_low    ;clear high result Low byte
 221 ???? 551B      	    sub wrk_high, wrk_high  ;clear high result High byte and carry
 222               	
 223               	m16s_1: 
 224 ???? 00F4      	    brcc m16s_2                ;if carry (previous bit) set
 225 ???? 480F      	    add  wrk_low, tos_low   ;    add multiplicand Low to result byte 2
 226 ???? 591F      	    adc  wrk_high, tos_high ;    add multiplicand High to result byte 3
 227               	m16s_2: 
 228 ???? 60FD      	    sbrc nos_low, 0          ;if current bit set
 229 ???? 481B      	    sub  wrk_low, tos_low   ;    sub multiplicand Low from result byte 2
 230 ???? 60FD      	    sbrc nos_low, 0            ;if current bit set
 231 ???? 590B      	    sbc  wrk_high, tos_high ;    sub multiplicand High from result byte 3
 232 ???? 5595      	    asr  wrk_high           ;shift right result and multiplier
 233 ???? 4795      	    ror  wrk_low
 234 ???? 7795      	    ror  nos_high
 235 ???? 6795      	    ror  nos_low
 236 ???? 2A94      	    dec  _work_                ;decrement counter
 237 ???? 01F4      	    brne m16s_1                ;if not done, loop more
 238               	
 239               	m16sres:
 240 ???? 00C0      	    rjmp m16result
 241               	
 242               	;----------------------------------------------------------------------
 243               	;
 244               	;     adapted from AVR-200 
 245               	;   "div16s" "- 16/16 Bit Signed Division
 246               	;
 247               	; ok /
 248 ???? 0000 012F 	HEADER "/", "SDIV"
 249 ???? 0000      	    NOOP
 250               	;
 251               	;***** Subroutine Register Variables
 252               	;
 253               	;    move operanos
 254               	;
 255 ???? 9991 8991 	    pspull tos_low, tos_high        ; pull divisor
 256 ???? 7991 6991 	    pspull nos_low, nos_high        ; pull dividend
 257               	;
 258               	;***** Code
 259               	;
 260               	div16s: 
 261 ???? 272E      	    mov    _work_, nos_high   ;move dividend High to sign register
 262 ???? 2926      	    eor    _work_, tos_high   ;xor divisor High with sign register
 263 ???? 27FA      	    bst _work_, 7                ;save it, but could be BST
 264               	
 265               	d16s_0:
 266 ???? 77FF      	    sbrs   nos_high, 7          ;if MSB in dividend set
 267 ???? 00C0      	    rjmp   d16s_1
 268               	    
 269 ???? 7095      	    com    nos_high            ;    change sign of dividend
 270 ???? 6095      	    com    nos_low
 271 ???? 6F5F      	    subi   nos_low, lo8(-1)
 272 ???? 6F4F      	    sbci   nos_low, hi8(-1)
 273               	
 274               	d16s_1: 
 275 ???? 97FF      	    sbrs   tos_high, 7    ;if MSB in divisor set
 276 ???? 00C0      	    rjmp   d16s_2
 277               	    
 278 ???? 9095      	    com    tos_high    ;    change sign of divisor
 279 ???? 8095      	    com    tos_low
 280 ???? 8F5F      	    subi   tos_low, lo8(-1)
 281 ???? 8F4F      	    sbci   tos_low, hi8(-1)
 282               	
 283               	d16s_2: 
 284               	
 285 ???? 41E1      	    ldi wrk_low, 17
 286 ???? 242E      	    mov _work_, wrk_low     ;init loop counter
 287 ???? 441B      	    sub wrk_low, wrk_low    ;clear high remainder Low byte
 288 ???? 551B      	    sub wrk_high, wrk_high  ;clear high remainder High byte and carry
 289               	
 290               	d16s_3: 
 291 ???? 661F      	    rol    nos_low    ;shift left dividend
 292 ???? 771F      	    rol    nos_high
 293 ???? 2A94      	    dec    _work_     ;decrement counter
 294 ???? 01F4      	    brne    d16s_5    ;if done
 295               	
 296 ???? 27F8      	    bld _work_, 7           ;save it, but could be BST
 297 ???? 27FE      	    sbrs    _work_, 7    ;    if MSB in sign register set
 298 ???? 00C0      	    rjmp    d16sres
 299 ???? 7095      	    com    nos_high      ;    change sign of result
 300 ???? 6095      	    com    nos_low
 301 ???? 6F5F      	    subi   nos_low,lo8(-1)
 302 ???? 7F4F      	    sbci   nos_high,hi8(-1)
 303               	
 304               	d16sres:
 305 ???? 00C0      	    rjmp m16result
 306               	
 307               	d16s_5: 
 308 ???? 441F      	    rol    wrk_low    ;shift dividend into remainder
 309 ???? 551F      	    rol    wrk_high
 310 ???? 481B      	    sub    wrk_low, tos_low ;remainder = remainder - divisor
 311 ???? 590B      	    sbc    wrk_high, tos_high ;
 312 ???? 00F4      	    brcc    d16s_6    ;if result negative
 313               	
 314 ???? 480F      	    add    wrk_low, tos_low ;    restore remainder
 315 ???? 591F      	    adc    wrk_high, tos_high
 316 ???? 8894      	    clc     ;    clear carry to be shifted into result
 317 ???? 00C0      	    rjmp    d16s_3    ;else
 318               	d16s_6: 
 319 ???? 0894      	    sec     ;    set carry to be shifted into result
 320 ???? 00C0      	    rjmp    d16s_3
 321               	
 322               	;----------------------------------------------------------------------
 323               	; 
 324               	;   by Peter Dannegger 
 325               	;     https://www.avrfreaks.net/forum/smallest-and-fastest-binary-bcd-conversion?page=all
 326               	;
 327               	; input 16 bit value 0 ... 65535
 328               	; output  5 digits (ASCII)
 329               	;
 330 ???? 0000 0475 	HEADER "utoa", "utoa" 
 330      746F 6120 
 331 ???? 0000      	    NOOP
 332               	
 333 ???? E0E0      	    ldi zpm_low, lo8(PIC)
 334 ???? F0E0      	    ldi zpm_high, hi8(PIC)
 335 ???? BF01      	    movw nos_low, zpm_low
 336 ???? 5991 4991 	    pspull wrk_low, wrk_high
 337               	    
 338               	itoa:
 339               	
 340 ???? 8FE2      	    ldi tos_low, -1 + '0'
 341 ???? 8395      	1:  inc tos_low
 342 ???? 4051      	    subi wrk_low, lo8(10000)    
 343 ???? 5742      	    sbci wrk_high, hi8(10000)
 344 ???? 00F4      	    brcc 1b
 345 ???? 4193      	    st    Z+, wrk_low
 346               	
 347 ???? 8AE3      	    ldi tos_low, 10 + '0'
 348 ???? 8A95      	2:  dec tos_low
 349 ???? 4851      	    subi wrk_low, lo8(-1000)  
 350 ???? 5C4F      	    sbci wrk_high, hi8(-1000)
 351 ???? 00F0      	    brcs 2b
 352 ???? 4193      	    st Z+, wrk_low
 353               	
 354 ???? 8FE2      	    ldi tos_low, -1 + '0'
 355 ???? 8395      	3:  inc tos_low
 356 ???? 4456      	    subi wrk_low, lo8(100)   
 357 ???? 5040      	    sbci wrk_high, hi8(100)
 358 ???? 00F4      	    brcc 3b
 359 ???? 4193      	    st Z+, wrk_low
 360               	
 361 ???? 5AE3      	    ldi wrk_high, 10 + '0'
 362 ???? 5A95      	4:  dec wrk_high
 363 ???? 465F      	    subi wrk_low, -10     
 364 ???? 00F0      	    brcs 4b
 365               	
 366 ???? 405D      	    subi wrk_low, -'0'
 367 ???? 4193      	    st Z+, wrk_low
 368               	
 369               	; append \0
 370 ???? 4427      	    clr wrk_low
 371 ???? 4193      	    st Z+, wrk_low
 372               	
 373 ???? 6A93 7A93 	    pspush nos_low, nos_high
 374 ???? 00C0      	    POON
 375               	
  84               	
  85               	;----------------------------------------------------------------------
  86               	.p2align 1, 0x00
  87               	#include "flush.S"
   1               	
   2               	
   3               	/*
   4               	 *  DISCLAIMER"
   5               	 *
   6               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   7               	 *
   8               	 *  Permission is hereby granted, free of charge, to any person obtaining
   9               	 *  a copy of this software and associated documentation files (the
  10               	 *  "Software"), to deal in the Software without restriction, including
  11               	 *  without limitation the rights to use, copy, modify, merge, publish,
  12               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  13               	 *  permit persons to whom the Software is furnished to do so, subject to
  14               	 *  the following conditions"
  15               	 *
  16               	 *  The above copyright notice and this permission notice shall be
  17               	 *  included in all copies or substantial portions of the Software.
  18               	 *
  19               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  20               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  21               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  22               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  23               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  24               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  25               	 *
  26               	 */
  27               	
  28               	/*
  29               	
  30               	routines for flush flash memory
  31               	
  32               	SPM_PAGE, page size
  33               	page_old = 0;
  34               	
  35               	void flush (int value, int address) {
  36               	
  37               	// define flash page and position
  38               	
  39               	    int pos = address AND (SPM_PAGE - 1);
  40               	    int page = address AND ~(SPM_PAGE - 1);
  41               	
  42               	    if ( page != page_old ) {
  43               	            if (page_old) save_page(page_old);
  44               	            load_page(page);
  45               	            page_old = page;
  46               	            }
  47               	
  48               	    buffer[pos] = lo8(value)
  49               	    pos += 1;
  50               	    buffer[pos] = hi8(value)
  51               	}
  52               	
  53               	: FLUSH
  54               	    
  55               	    PAGE_OLD @ DUP PAGE @
  56               	    = INVERT IF 
  57               	        IF SAVE_PAGE THEN
  58               	        LOAD_PAGE 
  59               	        PAGE @ PAGE_OLD !
  60               	        THEN
  61               	     
  62               	*/
  63               	;
  64               	;   to flash (w a -- )
  65               	;
  66               	
  67               	;----------------------------------------------------------------------
  68               	;
  69               	;   load a flash memory page (fa sa -- )
  70               	;   copy one flash page from flash address fa to sram address sa
  71               	;
  72 ???? 0000 0C28 	HEADER "(load_flash)", "LDFLASH"
  72      6C6F 6164 
  72      5F66 6C61 
  72      7368 2920 
  73 ???? 0000      	    NOOP
  74               	
  75               	    ; destin
  76 ???? 7991 6991 	    pspull nos_low, nos_high
  77               	
  78               	    ; origin
  79 ???? F991 E991 	    pspull zpm_low, zpm_high
  80               	
  81               	    ; preserve stack
  82 ???? CE93 DE93 	    rspush psp_low, psp_high
  83               	
  84 ???? EB01      	    movw psp_low, nos_low
  85               	
  86               	    ; make round down pagesize, pagemask is ~pagesize
  87               	    ; andi zpm_high, hi8(pagemask) ; not need if pagesize < 256
  88 ???? EF7F      	    andi zpm_low, lo8(pagemask)
  89               	
  90               	    ; adjust address for lpm
  91 ???? E695      	    lsr zpm_low
  92 ???? FF1F      	    rol zpm_high
  93               	
  94               	    ; how many bytes
  95 ???? 4091 0000 	    lds wrk_low, SPM_PAGE
  96               	
  97               	1:
  98 ???? 2590      	    lpm _work_, Z+
  99 ???? 2D92      	    st X+, _work_
 100 ???? 4A95      	    dec wrk_low
 101 ???? 01F4      	    brne 1b
 102               	
 103 ???? DD91 CD91 	    rspull psp_low, psp_high
 104 ???? 00C0      	    POON
 105               	
 106               	;----------------------------------------------------------------------
 107               	;
 108               	;   save a flash memory page (sa fa -- )
 109               	;   copy one flash page from sram address sa to flash address fa
 110               	;   registers exposed are used for optiboot compiled with gcc
 111               	;
 112 ???? 0000 0C28 	HEADER "(save_flash)", "SVFLASH"
 112      7361 7665 
 112      5F66 6C61 
 112      7368 2920 
 113 ???? 0000      	    NOOP
 114               	
 115               	    ; from sram
 116 ???? 7991 6991 	    pspull nos_low, nos_high
 117               	
 118               	    ; into flash
 119 ???? 9991 8991 	    pspull r24, r25
 120               	
 121               	    ; save psp 
 122 ???? CE93 DE93 	    rspush psp_low, psp_high
 123               	
 124 ???? EB01      	    movw psp_low, nos_low
 125               	
 126               	    ; mask to match correct address
 127               	    ; andi r25, hi8(pagemask) ; not need if pagesize < 256
 128 ???? 8F7F      	    andi r24, lo8(pagemask)
 129               	
 130               	    ; save address
 131 ???? 8E93 9E93 	    rspush r24, r25
 132               	
 133               	    ; erase page
 134               	    ; r0:r1 is ignored, ATmega8L datasheet, pg 209
 135 ???? 63E0      	    ldi r22, (1<<PGERS) | (1<<SPMEN)
 136 ???? 00D0      	    rcall _does_spm
 137               	
 138               	    ; how many bytes, less than 256!
 139 ???? 70E0      	    ldi r23, SPM_PAGE
 140               	
 141               	    ; copy page, word by word
 142               	2:
 143               	    ; fill page flash from sram
 144 ???? 4D91      	    ld r20, X+
 145 ???? 5D91      	    ld r21, X+
 146 ???? 61E0      	    ldi r22, (1<<SPMEN)
 147 ???? 00D0      	    rcall _does_spm
 148 ???? 3296      	    adiw zpm_low, 2
 149               	
 150               	    ; count down
 151 ???? 7A95      	    dec r23
 152 ???? 7A95      	    dec r23
 153 ???? 01F4      	    brne 2b
 154               	
 155               	    ; load address
 156 ???? 9D91 8D91 	    rspull r24, r25
 157               	
 158               	    ; write page
 159               	    ; r0:r1 is ignored, ATmega8L datasheet, pg 209
 160 ???? 65E0      	    ldi r22, (1<<PGWRT) | (1<<SPMEN)
 161 ???? 00D0      	    rcall _does_spm
 162               	
 163               	    ; clean house
 164 ???? DD91 CD91 	    rspull psp_low, psp_high
 165 ???? 00C0      	    POON
 166               	
 167               	;----------------------------------------------------------------------
 168               	;
 169               	; wrapper around optiboot code
 170               	;
 171               	
 172               	#define OPTI_DO_SPM 0x1fb0
 173               	
 174               	_does_spm:
 175 ???? 5FB6      	    in _sreg_, __SREG__
 176 ???? F894      	    cli
 177 ???? 8DD8      	    rcall OPTI_DO_SPM
 178 ???? 5FBE      	    out __SREG__, _sreg_
 179 ???? 0895      	    ret
 180               	
 181               	;----------------------------------------------------------------------
 182               	/* from optiboot version 8.2 listing, extra comments added
  88               	
  89               	;----------------------------------------------------------------------
  90               	.equ free_flash, .
  91               	
  92               	;----------------------------------------------------------------------
  93               	.p2align 1, 0x00
  94               	#include "newff.S"
   1               	
   2               	
   3               	/*
   4               	 *  DISCLAIMER"
   5               	 *
   6               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   7               	 *
   8               	 *  Permission is hereby granted, free of charge, to any person obtaining
   9               	 *  a copy of this software and associated documentation files (the
  10               	 *  "Software"), to deal in the Software without restriction, including
  11               	 *  without limitation the rights to use, copy, modify, merge, publish,
  12               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  13               	 *  permit persons to whom the Software is furnished to do so, subject to
  14               	 *  the following conditions"
  15               	 *
  16               	 *  The above copyright notice and this permission notice shall be
  17               	 *  included in all copies or substantial portions of the Software.
  18               	 *
  19               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  20               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  21               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  22               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  23               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  24               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  25               	 *
  26               	 */
  27               	
  28               	;---------------------------------------------------------------------
  29               	;	for easy using spm from optiboot 
  30               	;
  31               	;	spm instruction uses r31:r30 for address and r1:r0 for data
  32               	;
  33               	;	when erase or write, r0:r1 is ignored, 
  34               	;   ATmega8L datasheet, pg 209
  35               	;
  36               	;   command passed in r24
  37               	;
  38               	;   in optiboot.c version 8.3 :
  39               	;
  40               	;    __boot_rww_enable_short();
  41               	;    7fd2:       87 bf           out     0x37, r24       ; 55
  42               	;    7fd4:       e8 95           spm
  43               	;    7fd6:       08 95           ret
  44               	;
  45               	;	do not expeculate, only one page to "flash flush"
  46               	;   minimal optiboot uses last 256 words at 7e00 ( 3F00 words) 
  47               	;   and the sequence: bf 87 95 e8 95 08
  48               	;
  49               	;   commands are: 0x03 erase page, 0x01 fill buffer, 0x05 write page
  50               	;   set SPMCR and do a SPM whithin 4 cycles
  51               	;---------------------------------------------------------------------
  52               	;    
  53               	; ok copy a flash page into sram buffer  
  54               	;
  55 ???? 0000 0728 	HEADER "(flash)", "flash"
  55      666C 6173 
  55      6829 
  56               	
  57               	    ; preserve stack
  58 ???? CE93 DE93 	    rspush psp_low, psp_high
  59               	
  60               	    ; where it is ?    
  61 ???? E091 0000 	    lds zpm_low, (HERE+0)
  62 ???? F091 0000 	    lds zpm_high, (HERE+1)
  63               	
  64               	    ; make round down pagesize, pagemask is ~pagesize
  65 ???? EF7F      	    andi zpm_low, lo8(pagemask)
  66 ???? FF7F      	    andi zpm_high, hi8(pagemask) ; not need if pagesize < 256
  67               	    
  68               	    ; prepare loop
  69 ???? C1EB      	    ldi psp_low, lo8(FIB)
  70 ???? D3E0      	    ldi psp_high, hi8(FIB)
  71               	
  72               		; how many bytes
  73 ???? 4091 0000 		lds wrk_low, SPM_PAGESIZE
  74               	
  75               	    ; adjust address for lpm
  76 ???? E695      	    lsr zpm_low
  77 ???? FF1F      	    rol zpm_high
  78               	
  79               	2:
  80 ???? 2590      	    lpm _work_, Z+
  81 ???? 2D92      	    st X+, _work_
  82 ???? 4A95      	    dec wrk_low
  83 ???? 01F4      	    brne 2b
  84               	
  85               	4:    
  86               	    ; update where
  87 ???? C093 0000 	    sts THIS+0, psp_low
  88 ???? D093 0000 	    sts THIS+1, psp_high
  89               	
  90               	    ; restore data stack
  91 ???? DD91 CD91 	    rspull psp_low, psp_high
  92 ???? 00C0      	    POON
  93               	    
  94               	;----------------------------------------------------------------------
  95               	;
  96               	;
  97               	;   ok copy sram buffer into flash page, 
  98               	;
  99               	;
 100 ???? 0000 0728 	HEADER "(flush)", "flush"
 100      666C 7573 
 100      6829 
 101 ???? 0000      	    NOOP
 102               	
 103               		; save psp for index
 104 ???? CE93 DE93 	    rspush psp_low, psp_high
 105               	
 106               	    ; into flash page
 107 ???? 8091 0000 	    lds r24, HERE+0
 108 ???? 9091 0000 	    lds r25, HERE+1
 109               	
 110               		; mask to match correct address
 111 ???? 8F7F      	    andi r24, lo8(pagemask)
 112 ???? 9F7F      	    andi r25, hi8(pagemask) ; not need if pagesize < 256
 113               	
 114               		; save address
 115 ???? 8E93 9E93 		rspush r24, r25
 116               	
 117               	    ; erase page
 118 ???? 63E0      	    ldi r22, (1<<PGERS) | (1<<SPMEN)
 119 ???? 00D0      	    rcall does_spm
 120               	
 121               	    ; enable 
 122 ???? 61E1      	    ldi r22, 0x11
 123 ???? 00D0      	    rcall does_spm
 124               	
 125               	    ; from sram buffer
 126 ???? C1EB      	    ldi psp_low, lo8(FIB)
 127 ???? D3E0      	    ldi psp_high, hi8(FIB)
 128               	
 129               		; how many bytes
 130 ???? 70E0      	    ldi r23, SPM_PAGESIZE
 131               	
 132               	    ; copy page
 133               	20:
 134               	    ; fill page flash from sram
 135 ???? 4D91      	    ld r20, X+
 136 ???? 5D91      	    ld r21, X+
 137 ???? 61E0      	    ldi r22, (1<<SPMEN)
 138 ???? 00D0      	    rcall does_spm
 139 ???? 3296      	    adiw zpm_low, 2
 140               		; count down
 141 ???? 7A95      	    dec r23
 142 ???? 7A95      	    dec r23
 143 ???? 01F4      	    brne 20b
 144               	
 145               		; load address
 146 ???? 9D91 8D91 		rspull r24, r25
 147               	
 148               	    ; write page
 149 ???? 65E0      	    ldi r22, (1<<PGWRT) | (1<<SPMEN)
 150 ???? 00D0      	    rcall _does_spm
 151               	
 152               	    ; enable 
 153 ???? 61E1      	    ldi r22, 0x11
 154 ???? 00D0      	    rcall does_spm
 155               	
 156               	    ; from sram buffer
 157               	    ; clean house
 158 ???? DD91 CD91 	    rspull psp_low, psp_high
 159 ???? 00C0      	    POON
 160               	
 161               	;----------------------------------------------------------------------
 162               	;
 163               	; wrapper around optiboot code
 164               	;
 165               	
 166               	#define OPTI_DO_SPM 0x1fb0
 167               	
 168               	_does_spm:
 169 ???? 5FB6      		in _sreg_, __SREG__
 170 ???? F894      		cli
 171 ???? 42D8      		rcall OPTI_DO_SPM 
 172 ???? 5FBE      		out __SREG__, _sreg_
 173 ???? 0895      		ret
 174               	
 175               	;----------------------------------------------------------------------
 176               	/* from optiboot version 8.2 listing, extra comments added 
  95               	
  96               	.equ nrww_flash, .
DEFINED SYMBOLS
              main.S:36     *ABS*:000000000000000c version
             newff.S:100    .text:0000000000000ed6 _link_
            macros.S:282    *ABS*:0000000000000048 TIB_SIZE
            macros.S:285    *ABS*:0000000000000024 STACK_SIZE
            macros.S:288    *ABS*:0000000000000002 CELL_SIZE
            macros.S:291    *ABS*:000000000000000f WORD_SIZE
            macros.S:294    *ABS*:0000000000000010 BASE_DEFAULT
            macros.S:299    *ABS*:0000000000000000 eeprom
            macros.S:300    *ABS*:0000000000000000 e_void
            macros.S:301    *ABS*:0000000000000002 e_seed
            macros.S:302    *ABS*:0000000000000004 e_turn
            macros.S:303    *ABS*:0000000000000006 e_rest
            macros.S:304    *ABS*:0000000000000008 e_last
            macros.S:305    *ABS*:000000000000000a e_here
            macros.S:306    *ABS*:000000000000000c e_sram
            macros.S:307    *ABS*:000000000000000e e_erom
            macros.S:320    *ABS*:0000000000000080 F_IMMEDIATE
            macros.S:321    *ABS*:0000000000000040 F_COMPILE
            macros.S:322    *ABS*:0000000000000020 F_HIDDEN
            macros.S:323    *ABS*:0000000000000010 F_TOGGLE
            macros.S:324    *ABS*:0000000000000000 F_COMMON
            macros.S:326    *ABS*:00000000000000f0 F_TOMASK
            macros.S:327    *ABS*:000000000000000f F_UNMASK
            macros.S:333    *ABS*:0000000000000000 BIT_COMPILE
            macros.S:334    *ABS*:0000000000000000 BIT_EXECUTE
            macros.S:347    *ABS*:0000000000000000 NO_ERROR
            macros.S:348    *ABS*:fffffffffffffff7 INVALID_MEMORY
            macros.S:349    *ABS*:fffffffffffffff5 OVERFLOW
            macros.S:350    *ABS*:ffffffffffffffec WRITE_TO_READ_ONLY
            macros.S:351    *ABS*:ffffffffffffffe8 NOT_A_NUMBER
            macros.S:360    *ABS*:0000000000000011 XON_
            macros.S:362    *ABS*:0000000000000013 XOFF_
            macros.S:364    *ABS*:000000000000000d CR_
            macros.S:366    *ABS*:000000000000000a LF_
            macros.S:368    *ABS*:0000000000000008 BS_
            macros.S:370    *ABS*:0000000000000020 BL_
            macros.S:372    *ABS*:0000000000000001 BIT_ZERO
            macros.S:374    *ABS*:0000000000000000 BIT_CARRY
            macros.S:380    *ABS*:0000000000000040 SPM_SIZE
            macros.S:382    *ABS*:0000000000000060 SRAM_START
            macros.S:384    *ABS*:000000000000045e SRAM_END
            macros.S:386    *ABS*:0000000000000000 FLASH_RWW
            macros.S:388    *ABS*:0000000000001e00 FLASH_NRWW
            macros.S:390    *ABS*:0000000000001fff FLASH_END
            macros.S:414    *ABS*:0000000000000004 E2P_PAGESIZE
            macros.S:416    *ABS*:0000000000000000 E2P_START
            macros.S:418    *ABS*:00000000000001ff E2P_END
            macros.S:424    *ABS*:0000000000000040 FIB_SIZE
            macros.S:428    *ABS*:ffffffffffffffff pagemask
            macros.S:432    *ABS*:000000000000045f FORTH_INI
              main.S:44     data:0000000000000060 VOID
              main.S:45     data:0000000000000062 SEED
              main.S:46     data:0000000000000064 TURN
              main.S:47     data:0000000000000066 REST
              main.S:48     data:0000000000000068 WORD_LAST
              main.S:49     data:000000000000006a FLASH_LAST
              main.S:50     data:000000000000006c SRAM_LAST
              main.S:51     data:000000000000006e EEPROM_LAST
              main.S:54     data:0000000000000070 STAT
              main.S:55     data:0000000000000072 RADX
              main.S:56     data:0000000000000074 TOIN
              main.S:57     data:0000000000000076 TOPG
              main.S:58     data:0000000000000078 FAGE
              main.S:60     *ABS*:000000000000045d SPZ
              main.S:61     *ABS*:0000000000000439 RSP
              main.S:62     *ABS*:0000000000000415 PSP
              main.S:63     *ABS*:00000000000003f1 END
              main.S:64     *ABS*:00000000000003b1 FIB
              main.S:65     *ABS*:0000000000000369 TIB
              bios.S:38     .text:0000000000000000 boot
              bios.S:44     *ABS*:000000000000003f __SREG__
              bios.S:45     *ABS*:000000000000003e __SP_H__
              bios.S:46     *ABS*:000000000000003d __SP_L__
              bios.S:49     *ABS*:0000000000000009 UBRRL
              bios.S:50     *ABS*:0000000000000020 UCSRC
              bios.S:51     *ABS*:000000000000000a UCSRB
              bios.S:52     *ABS*:000000000000000b UCSRA
              bios.S:55     *ABS*:0000000000000021 WDTCR
              bios.S:58     *ABS*:0000000000000032 TCNT0
              bios.S:59     *ABS*:0000000000000033 TCCR0
              bios.S:60     *ABS*:0000000000000039 TIMSK
              bios.S:63     *ABS*:0000000000000037 SPMCR
              bios.S:66     *ABS*:0000000000000007 SPMIE
              bios.S:67     *ABS*:0000000000000006 RWWSB
              bios.S:69     *ABS*:0000000000000004 RWWSRE
              bios.S:70     *ABS*:0000000000000003 BLBSET
              bios.S:71     *ABS*:0000000000000002 PGWRT
              bios.S:72     *ABS*:0000000000000001 PGERS
              bios.S:73     *ABS*:0000000000000000 SPMEN
              bios.S:103    .text:0000000000000026 RESET
              bios.S:140    .text:0000000000000038 TIM0_OVF
              bios.S:178    .text:0000000000000052 BOOT
              bios.S:156    *ABS*:000000000000008d OFFSETCNT
              bios.S:187    .text:0000000000000054 TIMER0_SET
              bios.S:207    .text:0000000000000066 WATCHDOG_SET
              bios.S:218    .text:000000000000006e USART_SET
              bios.S:234    .text:0000000000000086 GOOD
             forth.S:1188   .text:0000000000000c24 COLD
              bios.S:274    .text:000000000000008a bios_end
             forth.S:87     .text:000000000000045f _forth_
             forth.S:93     .text:000000000000045f is_ENDS
             forth.S:93     .text:0000000000000468 ENDS
             forth.S:98     .text:000000000000046a _exit
             forth.S:102    .text:000000000000046e _next
             forth.S:106    .text:000000000000047a _void
             forth.S:118    .text:0000000000000488 _jump
             forth.S:112    .text:0000000000000480 _enter
             forth.S:125    .text:0000000000000490 _link
             forth.S:141    .text:0000000000000494 is_ZEQU
             forth.S:141    .text:000000000000049a ZEQU
             forth.S:149    .text:00000000000004a6 _ftrue
             forth.S:145    .text:00000000000004a0 _ffalse
             forth.S:157    .text:00000000000004ac is_TO
             forth.S:157    .text:00000000000004b0 TO
             forth.S:174    .text:00000000000004ca _isflash_to
             forth.S:168    .text:00000000000004c0 _isram_to
             forth.S:181    .text:00000000000004cc is_AT
             forth.S:181    .text:00000000000004d0 AT
             forth.S:196    .text:00000000000004e2 _isflash_at
             forth.S:191    .text:00000000000004dc _isram_at
             forth.S:203    .text:00000000000004f0 is_RPAT
             forth.S:203    .text:00000000000004f6 RPAT
             forth.S:212    .text:0000000000000500 is_SPAT
             forth.S:212    .text:0000000000000506 SPAT
             forth.S:221    .text:0000000000000510 is_NAND
             forth.S:221    .text:0000000000000518 NAND
             forth.S:232    .text:0000000000000528 is_PLUS
             forth.S:232    .text:000000000000052c PLUS
             forth.S:252    .text:000000000000053a is_tib_
             forth.S:252    .text:0000000000000540 tib_
             forth.S:262    .text:000000000000054c is_LATEST
             forth.S:262    .text:0000000000000556 LATEST
             forth.S:272    .text:0000000000000562 is_STATE
             forth.S:272    .text:000000000000056a STATE
             forth.S:282    .text:0000000000000576 is_BASE
             forth.S:282    .text:000000000000057e BASE
             forth.S:292    .text:000000000000058a is_sram_
             forth.S:292    .text:0000000000000594 sram_
             forth.S:302    .text:00000000000005a0 is_eeprom_
             forth.S:302    .text:00000000000005ac eeprom_
             forth.S:312    .text:00000000000005b8 is_flash_
             forth.S:312    .text:00000000000005c2 flash_
             forth.S:327    .text:00000000000005ce is_key_
             forth.S:327    .text:00000000000005d4 key_
             forth.S:342    .text:00000000000005e4 is_qkey_
             forth.S:342    .text:00000000000005ec qkey_
             forth.S:353    .text:00000000000005f4 is_emit_
             forth.S:353    .text:00000000000005fc emit_
             forth.S:367    .text:000000000000060a is_qemit_
             forth.S:367    .text:0000000000000612 qemit_
             forth.S:378    .text:000000000000061a is_millis_
             forth.S:378    .text:0000000000000624 millis_
             forth.S:388    .text:000000000000062e is_FTRUE
             forth.S:388    .text:0000000000000636 FTRUE
             forth.S:391    .text:000000000000063c _iftrue
             forth.S:399    .text:0000000000000642 is_FFALSE
             forth.S:399    .text:000000000000064a FFALSE
             forth.S:402    .text:0000000000000650 _iffalse
             forth.S:410    .text:0000000000000656 is_ZERO
             forth.S:410    .text:000000000000065a ZERO
             forth.S:419    .text:0000000000000666 is_ONE
             forth.S:419    .text:000000000000066a ONE
             forth.S:430    .text:0000000000000678 is_LTHAN
             forth.S:430    .text:000000000000067c LTHAN
             forth.S:441    .text:000000000000068a is_TOR
             forth.S:441    .text:0000000000000690 TOR
             forth.S:450    .text:000000000000069c is_RTO
             forth.S:450    .text:00000000000006a2 RTO
             forth.S:459    .text:00000000000006ae is_RAT
             forth.S:459    .text:00000000000006b4 RAT
             forth.S:469    .text:00000000000006c0 is_RPTO
             forth.S:469    .text:00000000000006c6 RPTO
             forth.S:478    .text:00000000000006d0 is_SPTO
             forth.S:478    .text:00000000000006d6 SPTO
             forth.S:487    .text:00000000000006e0 is_DROP
             forth.S:487    .text:00000000000006e8 DROP
             forth.S:489    .text:00000000000006ea PULL
             forth.S:496    .text:00000000000006f0 is_DUP
             forth.S:496    .text:00000000000006f6 DUP
             forth.S:498    .text:00000000000006f8 PUSH
             forth.S:505    .text:00000000000006fe is_SWAP
             forth.S:505    .text:0000000000000706 SWAP
             forth.S:516    .text:0000000000000714 is_ZDUP
             forth.S:516    .text:000000000000071c ZDUP
             forth.S:527    .text:000000000000072a is_ZBRANCH
             forth.S:527    .text:0000000000000734 ZBRANCH
             forth.S:542    .text:0000000000000754 _branch
             forth.S:540    .text:0000000000000748 is_BRANCH
             forth.S:540    .text:0000000000000752 BRANCH
             forth.S:553    .text:000000000000076c is_EXECUTE
             forth.S:553    .text:0000000000000776 EXECUTE
             forth.S:562    .text:0000000000000782 is_MINUS
             forth.S:562    .text:0000000000000786 MINUS
             forth.S:573    .text:0000000000000794 is_AND
             forth.S:573    .text:000000000000079a AND
             forth.S:583    .text:00000000000007a6 is_OR
             forth.S:583    .text:00000000000007ac OR
             forth.S:593    .text:00000000000007b8 is_XOR
             forth.S:593    .text:00000000000007be XOR
             forth.S:603    .text:00000000000007ca is_SHL
             forth.S:603    .text:00000000000007d0 SHL
             forth.S:605    .text:00000000000007d2 _shl
             forth.S:614    .text:00000000000007da is_SHR
             forth.S:614    .text:00000000000007e0 SHR
             forth.S:616    .text:00000000000007e2 _shr
             forth.S:624    .text:00000000000007ea is_ENDIAN
             forth.S:624    .text:00000000000007f0 ENDIAN
             forth.S:636    .text:00000000000007fa is_DOCON
             forth.S:636    .text:0000000000000802 DOCON
             forth.S:648    .text:000000000000081a is_DOVAR
             forth.S:648    .text:0000000000000822 DOVAR
             forth.S:660    .text:0000000000000832 is_CTO
             forth.S:660    .text:0000000000000838 CTO
             forth.S:671    .text:0000000000000848 is_CAT
             forth.S:671    .text:000000000000084e CAT
             forth.S:680    .text:0000000000000858 is_INVERT
             forth.S:680    .text:0000000000000862 INVERT
             forth.S:682    .text:0000000000000864 _inv
             forth.S:689    .text:000000000000086a is_NEGATE
             forth.S:689    .text:0000000000000874 NEGATE
             forth.S:691    .text:0000000000000876 _neg
             forth.S:700    .text:000000000000087c is_ALLIGN
             forth.S:700    .text:0000000000000884 ALLIGN
             forth.S:710    .text:000000000000088c is_CELL
             forth.S:710    .text:0000000000000894 CELL
             forth.S:722    .text:00000000000008a0 is_CSAME
             forth.S:722    .text:00000000000008a8 CSAME
             forth.S:770    .text:00000000000008da is_CMOVE
             forth.S:770    .text:00000000000008e2 CMOVE
             forth.S:808    .text:0000000000000906 is_BMOVE
             forth.S:808    .text:000000000000090e BMOVE
             forth.S:860    .text:000000000000093a is_BIS
             forth.S:860    .text:0000000000000940 BIS
             forth.S:866    .text:0000000000000948 is_OVER
             forth.S:866    .text:0000000000000950 OVER
             forth.S:872    .text:0000000000000958 is_ROTU
             forth.S:872    .text:000000000000095e ROTU
             forth.S:878    .text:0000000000000964 is_ROTD
             forth.S:878    .text:000000000000096c ROTD
             forth.S:884    .text:0000000000000972 is_TUCK
             forth.S:884    .text:000000000000097a TUCK
             forth.S:890    .text:0000000000000980 is_FLIP
             forth.S:890    .text:0000000000000988 FLIP
             forth.S:895    .text:0000000000000990 is_TWO
             forth.S:895    .text:0000000000000994 TWO
             forth.S:901    .text:000000000000099a is_EQUAL
             forth.S:901    .text:000000000000099e EQUAL
             forth.S:907    .text:00000000000009a4 is_NOTEQUAL
             forth.S:907    .text:00000000000009aa NOTEQUAL
             forth.S:913    .text:00000000000009b0 is_GTHAN
             forth.S:913    .text:00000000000009b4 GTHAN
             forth.S:919    .text:00000000000009ba is_ZEROGT
             forth.S:919    .text:00000000000009c0 ZEROGT
             forth.S:925    .text:00000000000009c6 is_ZEROLT
             forth.S:925    .text:00000000000009cc ZEROLT
             forth.S:932    .text:00000000000009d4 is_CELLS
             forth.S:932    .text:00000000000009dc CELLS
             forth.S:939    .text:00000000000009e0 is_CELLPLUS
             forth.S:939    .text:00000000000009e8 CELLPLUS
             forth.S:946    .text:00000000000009ee is_CELLMINUS
             forth.S:946    .text:00000000000009f6 CELLMINUS
             forth.S:953    .text:00000000000009fc is_ONEPLUS
             forth.S:953    .text:0000000000000a02 ONEPLUS
             forth.S:960    .text:0000000000000a08 is_ONEMINUS
             forth.S:960    .text:0000000000000a0e ONEMINUS
             forth.S:967    .text:0000000000000a14 is_TWOPLUS
             forth.S:967    .text:0000000000000a1a TWOPLUS
             forth.S:974    .text:0000000000000a20 is_TWOMINUS
             forth.S:974    .text:0000000000000a26 TWOMINUS
             forth.S:981    .text:0000000000000a2c is_PLUSTO
             forth.S:981    .text:0000000000000a32 PLUSTO
             forth.S:989    .text:0000000000000a40 is_RBRAC
             forth.S:989    .text:0000000000000a44 RBRAC
             forth.S:996    .text:0000000000000a4c is_LBRAC
             forth.S:996    .text:0000000000000a50 LBRAC
             forth.S:1003   .text:0000000000000a58 is_TOGGLE
             forth.S:1003   .text:0000000000000a62 TOGGLE
             forth.S:1010   .text:0000000000000a6e is_TONFA
             forth.S:1010   .text:0000000000000a76 TONFA
             forth.S:1017   .text:0000000000000a7c is_TOCFA
             forth.S:1017   .text:0000000000000a84 TOCFA
             forth.S:1024   .text:0000000000000a94 is_HIDDEN
             forth.S:1024   .text:0000000000000a9e HIDDEN
             forth.S:1031   .text:0000000000000aa8 is_IMMEDIATE
             forth.S:1031   .text:0000000000000ab4 IMMEDIATE
             forth.S:1038   .text:0000000000000abe is_COMPILE_ONLY
             forth.S:1038   .text:0000000000000ace COMPILE_ONLY
             forth.S:1045   .text:0000000000000ad8 is_HERE
             forth.S:1045   .text:0000000000000ae0 HERE
             forth.S:1052   .text:0000000000000ae6 is_ALLOT
             forth.S:1052   .text:0000000000000aee ALLOT
             forth.S:1058   .text:0000000000000af4 is_COMMA
             forth.S:1058   .text:0000000000000af8 COMMA
             forth.S:1065   .text:0000000000000b02 is_COMP
             forth.S:1065   .text:0000000000000b0a COMP
             forth.S:1070   .text:0000000000000b10 is_FINITE
             forth.S:1070   .text:0000000000000b1a FINITE
             forth.S:1075   .text:0000000000000b20 is_CREATE
             forth.S:1075   .text:0000000000000b2a CREATE
             forth.S:1081   .text:0000000000000b2c is_PARSE
             forth.S:1081   .text:0000000000000b34 PARSE
             forth.S:1097   .text:0000000000000b36 is_COLON
             forth.S:1097   .text:0000000000000b3a COLON
             forth.S:1102   .text:0000000000000b40 is_SEMMI
             forth.S:1102   .text:0000000000000b44 SEMMI
             forth.S:1108   .text:0000000000000b4a is_BACK
             forth.S:1108   .text:0000000000000b52 BACK
             forth.S:1114   .text:0000000000000b5c is_MARK
             forth.S:1114   .text:0000000000000b64 MARK
             forth.S:1120   .text:0000000000000b6c is_BEGIN
             forth.S:1120   .text:0000000000000b74 BEGIN
             forth.S:1126   .text:0000000000000b78 is_AGAIN
             forth.S:1126   .text:0000000000000b80 AGAIN
             forth.S:1132   .text:0000000000000b88 is_UNTIL
             forth.S:1132   .text:0000000000000b90 UNTIL
             forth.S:1138   .text:0000000000000b98 is_UNLESS
             forth.S:1138   .text:0000000000000ba2 UNLESS
             forth.S:1144   .text:0000000000000ba8 is_IF
             forth.S:1144   .text:0000000000000bae IF
             forth.S:1151   .text:0000000000000bb6 is_ENDIF
             forth.S:1151   .text:0000000000000bbe ENDIF
             forth.S:1157   .text:0000000000000bca is_THEN
             forth.S:1157   .text:0000000000000bd2 THEN
             forth.S:1163   .text:0000000000000bd6 is_ELSE
             forth.S:1163   .text:0000000000000bde ELSE
             forth.S:1169   .text:0000000000000bea is_WHILE
             forth.S:1169   .text:0000000000000bf2 WHILE
             forth.S:1175   .text:0000000000000bf6 is_REPEAT
             forth.S:1175   .text:0000000000000c00 REPEAT
             forth.S:1181   .text:0000000000000c10 is_BYE
             forth.S:1181   .text:0000000000000c16 BYE
             forth.S:1188   .text:0000000000000c1c is_COLD
             forth.S:1206   .text:0000000000000c40 WARM
             forth.S:1206   .text:0000000000000c38 is_WARM
              math.S:34     *ABS*:0000000000001505 djbHASH
              math.S:35     .text:0000000000000c44 is_HASH
              math.S:35     .text:0000000000000c4c HASH
              math.S:85     .text:0000000000000c80 is_RANDOM
              math.S:85     .text:0000000000000c8a RANDOM
              math.S:104    .text:0000000000000cae _seed
              math.S:101    .text:0000000000000ca0 is_RAND
              math.S:101    .text:0000000000000ca8 RAND
              math.S:117    .text:0000000000000cb8 is_UMUL
              math.S:117    .text:0000000000000cbe UMUL
              math.S:127    .text:0000000000000cc8 mul16u
              math.S:137    .text:0000000000000cd4 m16u_1
              math.S:142    .text:0000000000000cda noad8
              math.S:150    .text:0000000000000ce6 m16ures
              math.S:151    .text:0000000000000ce6 m16result
              math.S:162    .text:0000000000000cf0 is_UMBYMOD
              math.S:162    .text:0000000000000cfa UMBYMOD
              math.S:172    .text:0000000000000d04 div16u
              math.S:178    .text:0000000000000d0c d16u_1
              math.S:198    .text:0000000000000d2a d16ures
              math.S:184    .text:0000000000000d14 d16u_2
              math.S:194    .text:0000000000000d26 d16u_3
              math.S:206    .text:0000000000000d2c is_SMUL
              math.S:206    .text:0000000000000d30 SMUL
              math.S:217    .text:0000000000000d3a mpy16s
              math.S:223    .text:0000000000000d42 m16s_1
              math.S:227    .text:0000000000000d48 m16s_2
              math.S:239    .text:0000000000000d5c m16sres
              math.S:248    .text:0000000000000d5e is_SDIV
              math.S:248    .text:0000000000000d62 SDIV
              math.S:260    .text:0000000000000d6c div16s
              math.S:265    .text:0000000000000d72 d16s_0
              math.S:274    .text:0000000000000d7e d16s_1
              math.S:283    .text:0000000000000d8a d16s_2
              math.S:290    .text:0000000000000d92 d16s_3
              math.S:307    .text:0000000000000daa d16s_5
              math.S:304    .text:0000000000000da8 d16sres
              math.S:318    .text:0000000000000dbc d16s_6
              math.S:330    .text:0000000000000dc0 is_utoa
              math.S:330    .text:0000000000000dc8 utoa
              math.S:338    .text:0000000000000dd4 itoa
             flush.S:72     .text:0000000000000e0e is_LDFLASH
             flush.S:72     .text:0000000000000e1e LDFLASH
             flush.S:112    .text:0000000000000e46 is_SVFLASH
             flush.S:112    .text:0000000000000e56 SVFLASH
             flush.S:174    .text:0000000000000e90 _does_spm
              main.S:90     .text:0000000000000e9a free_flash
             newff.S:55     .text:0000000000000e9a is_flash
             newff.S:55     .text:0000000000000ea4 flash
             newff.S:100    .text:0000000000000ed6 is_flush
             newff.S:100    .text:0000000000000ee0 flush
              main.S:96     .text:0000000000000f30 nrww_flash

UNDEFINED SYMBOLS
SPM_PAGE
forth
LAST
PIC
SPM_PAGESIZE
THIS
does_spm
