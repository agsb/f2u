   1               	# 1 "main.S"
   1               	
   0               	
   0               	
   2               	/*
   3               	 *  DISCLAIMER
   4               	 *
   5               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   6               	 *
   7               	 *  Permission is hereby granted, free of charge, to any person obtaining
   8               	 *  a copy of this software and associated documentation files (the
   9               	 *  "Software"), to deal in the Software without restriction, including
  10               	 *  without limitation the rights to use, copy, modify, merge, publish,
  11               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  12               	 *  permit persons to whom the Software is furnished to do so, subject to
  13               	 *  the following conditions:
  14               	 *
  15               	 *  The above copyright notice and this permission notice shall be
  16               	 *  included in all copies or substantial portions of the Software.
  17               	 *
  18               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  19               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  20               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  21               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  22               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  23               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  24               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  25               	 *
  26               	 */
  27               	
  28               	;---------------------------------------------------------------------
  29               	; atmega8 avr
  30               	;
  31               	; UPDATE: 10/2022 to include stuff for atmega328 
  32               	;---------------------------------------------------------------------- 
  33               	;
  34               	; version information
  35               	;
  36               	.equ version, 12 ; 0.00.10
  37               	
  38               	#include "macros.S"
   1               	
   2               	/*
   3               	 *  DISCLAIMER
   4               	 *
   5               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   6               	 *
   7               	 *  Permission is hereby granted, free of charge, to any person obtaining
   8               	 *  a copy of this software and associated documentation files (the
   9               	 *  "Software"), to deal in the Software without restriction, including
  10               	 *  without limitation the rights to use, copy, modify, merge, publish,
  11               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  12               	 *  permit persons to whom the Software is furnished to do so, subject to
  13               	 *  the following conditions:
  14               	 *
  15               	 *  The above copyright notice and this permission notice shall be
  16               	 *  included in all copies or substantial portions of the Software.
  17               	 *
  18               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  19               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  20               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  21               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  22               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  23               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  24               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  25               	 *
  26               	 */
  27               	
  28               	;----------------------------------------------------------------------
  29               	;
  30               	;   MUST use gnu cpp 
  31               	;   use with .S (upper S) or
  32               	;   use with -x assembler-with-cpp
  33               	;
  34               	;     can't use alias 
  35               	;----------------------------------------------------------------------
  36               	;
  37               	; all defines, equs, macros are defined in this file
  38               	;
  39               	
  40               	#define atmega328
  41               	
  42               	;----------------------------------------------------------------------
  43               	;
  44               	;    about registers 
  45               	;
  46               	; r1:r0 reserved and used in internal atmega8
  47               	;   instructions, as spm, mul, des, etc
  48               	;   do not use inside interrupts
  49               	
  50               	#define _reserved_r0_ r0
  51               	#define _reserved_r1_ r1
  52               	
  53               	;----------------------------------------------------------------------
  54               	;
  55               	;  reserved for use inside timer0 interrupt
  56               	;
  57               	; sreg keep in interrupts
  58               	#define _sreg_ r2
  59               	
  60               	; offset for adjust timer0 interrupt counter
  61               	#define _offs_ r3
  62               	
  63               	; ticks counter for timer0 at 1 ms, (count 65 sec)
  64               	#define ticks_low r4
  65               	#define ticks_high r5
  66               	
  67               	;-----------------------------------------------------------------------
  68               	;
  69               	; forth model (like pdp-11)
  70               	;
  71               	; must be 16bits (16 to 31) registers
  72               	;
  73               	; Z generic pointer for access sram and flash memory, lpm, spm, index, etc
  74               	#define zpm_low r30
  75               	#define zpm_high r31
  76               	
  77               	; Y parameter stack pointer for access sram
  78               	#define psp_low r28
  79               	#define psp_high r29
  80               	
  81               	; X return stack pointer for access sram
  82               	#define rsp_low r26
  83               	#define rsp_high r27
  84               	
  85               	; top, Top parameter stack
  86               	#define tos_low r24
  87               	#define tos_high r25
  88               	
  89               	; nos, Next temporary
  90               	#define nos_low r22
  91               	#define nos_high r23
  92               	
  93               	; wrk, Work temporary 
  94               	#define wrk_low r20
  95               	#define wrk_high r21
  96               	
  97               	; extras
  98               	#define _zero_ r6
  99               	#define _work_ r7
 100               	
 101               	; registers r8 to r19 free
 102               	
 103               	;----------------------------------------------------------------------
 104               	;
 105               	;  trick adapted from amforth-6.9
 106               	;
 107               	.macro STRINGS string
 108               	;    .word DOSCON
 109               	    .byte 8f - 7f
 110               	7:  .ascii "\\string"
 111               	8:  .balign 2
 112               	.endm
 113               	
 114               	;----------------------------------------------------------------------
 115               	;
 116               	; header of leaf word in dictionary
 117               	;    flags must be 0x80, 0x40, 0x20, 0x10
 118               	;    size  must be 1 to 15
 119               	;
 120               	;----------------------------------------------------------------------
 121               	;
 122               	; set start reverse linked list
 123               	;
 124               	.set _link_, 0x0
 125               	.set _list_, 0x0
 126               	.set _last_, 0x0
 127               	
 128               	.macro HEADER name, label, flags=0x0
 129               	is_\label:
 130               	10:
 131               	    .p2align 1, 0x00
 132               	7:    
 133               	    .word _link_
 134               	    .set _link_, 7b
 135               	    .byte (9f - 8f) + \flags
 136               	8:    
 137               	    .ascii "\name"
 138               	9:    
 139               	    .p2align 1, 0x20
 140               	\label:
 141               	11:
 142               	    .set _last_, _list_
 143               	    .set _list_, _last_ + (11b - 10b + 1)
 144               	.endm
 145               	
 146               	;----------------------------------------------------------------------
 147               	; little endian !!! AVR
 148               	;
 149               	;    A    Z (r31:r30) is used as generic address pointer, deed by avr ISA
 150               	;
 151               	;    RSP  Y (r29:r28) used as return stack pointer    
 152               	;    PSP  X (r27:r26) used as data/parameter stack pointer
 153               	;    TOS  T (r25:r24) used as top in stack
 154               	;    NOS  N (r22:r23) used as second in stack
 155               	;    WRK  W (r20:r21) used as work            
 156               	;
 157               	;   all stacks grows downwards.
 158               	;
 159               	;----------------------------------------------------------------------
 160               	;    push into return stack, 
 161               	.macro rspush low, high 
 162               	    st -X, \low
 163               	    st -X, \high
 164               	.endm
 165               	
 166               	;----------------------------------------------------------------------
 167               	;    pull from return stack, 
 168               	.macro rspull low, high
 169               	    ld \high, X+
 170               	    ld \low, X+
 171               	.endm
 172               	
 173               	;----------------------------------------------------------------------
 174               	;    push into data stack, 
 175               	.macro pspush low, high
 176               	    st -Y, \low
 177               	    st -Y, \high
 178               	.endm
 179               	
 180               	;----------------------------------------------------------------------
 181               	;    pull from data stack, 
 182               	.macro pspull low, high
 183               	    ld \high, Y+
 184               	    ld \low, Y+
 185               	.endm
 186               	
 187               	;----------------------------------------------------------------------
 188               	;    load a word from program memory (flash)
 189               	;    ( only works with TWO lpm !!! )
 190               	;    Z address in bytes!
 191               	.macro pmload low, high
 192               	    lsl zpm_low
 193               	    rol zpm_high
 194               	    lpm \low, Z+
 195               	    lpm \high, Z+
 196               	    ror zpm_high
 197               	    ror zpm_low
 198               	.endm
 199               	
 200               	;----------------------------------------------------------------------
 201               	;    load from static memory (sram), increments pointer
 202               	;
 203               	.macro srload byte
 204               	    ld \byte, Z+
 205               	.endm
 206               	
 207               	;----------------------------------------------------------------------
 208               	;    save to static memory (sram), increments pointer
 209               	;
 210               	.macro srsave byte
 211               	    st Z+, \byte 
 212               	.endm
 213               	
 214               	;----------------------------------------------------------------------
 215               	;
 216               	; for Atmega8:
 217               	;
 218               	
 219               	;----------------------------------------------------------------------
 220               	; all primitives must start with NOOP and end with POON
 221               	;    a  nop (0x0000) is used as a null reference, and marks all primitives
 222               	;    as they are really a branch and link mark
 223               	
 224               	.macro NOOP
 225               	    nop
 226               	.endm
 227               	
 228               	.macro POON
 229               	;	for atmega8 could use rjmp
 230               	    jmp _link
 231               	.endm
 232               	
 233               	;**********************************************************************
 234               	;  constant values
 235               	;
 236               	;    %s/#define *\([^ ]*\) */ \1 = /
 237               	;    %s/ *\([^ ]*\) *= */#define \1 /
 238               	
 239               	;----------------------------------------------------------------------
 240               	;    sizes
 241               	;
 242               	; "Column 72 means Continue", 72 always \0
 243               	; Readability is good standart is 80
 244               	;
 245               	TIB_SIZE = 72
 246               	
 247               	; PAD minimum size
 248               	;
 249               	PAD_SIZE = TIB_SIZE
 250               	
 251               	; HDS minimum size, 16bits (16*2+2) +2 
 252               	;
 253               	HDS_SIZE = 36
 254               	
 255               	; stacks 18 words deep. WISE as M00re said.
 256               	;
 257               	STACK_SIZE = 36
 258               	
 259               	; default cell size
 260               	;
 261               	CELL_SIZE = 2
 262               	
 263               	; maximum word size
 264               	;
 265               	WORD_SIZE = 15
 266               	
 267               	; default base
 268               	;
 269               	BASE_DEFAULT = 16
 270               	
 271               	;----------------------------------------------------------------------
 272               	;   words can be 1 to 15 chars lenght, 
 273               	;
 274               	;   almost over for normal english ~10 letters words 
 275               	;   http://norvig.com/mayzner.html
 276               	;
 277               	;   flags 
 278               	;
 279               	;   tradicional:
 280               	;
 281               	;       IMMEDIATE, COMPILE, SMUDGE, LEAP
 282               	;
 283               	;   IMMEDIATE is mandatory execute words.
 284               	;
 285               	;   COMPILE is for compile only words.
 286               	;
 287               	;   HIDDEN or SMUDGE is not used, free to reassign any words but not change already compliled
 288               	;
 289               	;   LEAP is to mark as pure assembler routines, no calls inside.
 290               	;
 291               	;   RESERVED as 0x80, marks the byte as size+flag byte and allow
 292               	;   backtrace to name from execute address, names are ASCII < 0x80
 293               	;
 294               	;   if need 32 chars ANSI names, forget HIDDEN
 295               	;
 296               	F_RESERVED = 0x80
 297               	F_IMMEDIATE = 0x40
 298               	F_COMPILE = 0x20
 299               	F_HIDDEN = 0x10
 300               	
 301               	F_TOMASK = 0xF0
 302               	F_UNMASK = 0x0F
 303               	
 304               	; not flags but usefull to remember
 305               	F_LEAP = 0x00	; for primitives, pure assembler no calls for forth words
 306               	F_CORE = 0x00	; for core words
 307               	
 308               	;---------------------------------------------------------------------
 309               	;
 310               	; minimal error codes from forth 2012
 311               	;
 312               	NO_ERROR = 0
 313               	INVALID_MEMORY = -9
 314               	OUT_OF_RANGE = -11
 315               	INVALID_WORD = -13
 316               	TO_READ_ONLY = -20
 317               	NOT_A_NUMBER = -24
 318               	
 319               	;---------------------------------------------------------------------
 320               	; ASCII constants
 321               	;
 322               	; Flow Control
 323               	; assumes that all line edit is done at remote!
 324               	; no backspace, no delete, no moving cursor, just a static line.
 325               	; works as a screen or block, just receives a line till a CR or CR LF
 326               	; uses BS, for edit last char
 327               	;
 328               	;XON_   =   0x11    ; ascii DC1 ^Q
 329               	;XOFF_  =   0x13    ; ascii DC3 ^S
 330               	;NAK_   =   0x15    ; ascii NAK ^U
 331               	
 332               	CR_    =   0x0d    ; ascci carriage return ^M
 333               	LF_    =   0x0a    ; ascii line feed ^J
 334               	BS_    =   0x08    ; ascii backspace ^H
 335               	BL_    =   0x20    ; ascii space 
 336               	
 337               	;----------------------------------------------------------------------
 338               	; AVR SREG constants
 339               	;
 340               	
 341               	BIT_CARRY = 0
 342               	
 343               	BIT_ZERO = 1
 344               	
 345               	BIT_NEG = 2
 346               	
 347               	;----------------------------------------------------------------------
 348               	
 349               	#ifdef atmega8
 350               	
 351               	; atmega8 have flash memory of 128 pages of 32 words
 352               	
 353               	SPM_SIZE = 64
 354               	
 355               	SRAM_START = 0x060  ; SRAM from AVR manual
 356               	
 357               	SRAM_END = 0x45F    ; SRAM from AVR manual 
 358               	
 359               	FLASH_RWW = 0x0000
 360               	
 361               	FLASH_NRWW = 0x1E00    ; using optiboot in 512 bytes !!!!
 362               	
 363               	FLASH_END = 0x1FFF 
 364               	
 365               	E2P_END = 0x1FF
 366               	
 367               	#endif
 368               	
 369               	#ifdef atmega328
 370               	
 371               	; atmega328 have flash memory of 256 pages of 64 words
 372               	
 373               	SPM_SIZE = 128
 374               	
 375               	SRAM_START = 0x0100  ; SRAM from AVR manual
 376               	
 377               	SRAM_END = 0x08FF  ; SRAM from AVR manual
 378               	
 379               	FLASH_RWW = 0x0000
 380               	
 381               	FLASH_NRWW = 0x3E00    ; using optiboot in 512 bytes !!!!
 382               	
 383               	FLASH_END = 0x3FFF 
 384               	
 385               	E2P_END = 0x3FF
 386               	
 387               	#endif
 388               	
 389               	/* for eeprom use */
 390               	
 391               	E2P_PAGESIZE = 4
 392               	
 393               	E2P_START = 0x000
 394               	
 395               	/* avr signature bytes */
 396               	
 397               	SIGNATURE_000	= 0x1e
 398               	SIGNATURE_001	= 0x95
 399               	
 400               	; for atmega328
 401               	SIGNATURE_002	= 0x0f
 402               	; for atmega328P
 403               	SIGNATURE_003	= 0x0f
 404               	; for atmega328PB
 405               	SIGNATURE_004	= 0x16
 406               	
 407               	/* task states, QNX */
 408               	
 409               	HALT = 0x0
 410               	IDLE = 0x1
 411               	BUSY = 0x2
 412               	WAIT = 0x3
 413               	
 414               	GIVE = 0x4
 415               	TAKE = 0x8
 416               	
 417               	;----------------------------------------------------------------------
 418               	/* temporary where start forth */
 419               	
 420               	;----------------------------------------------------------------------
 421               	...
  39               	;----------------------------------------------------------------------
  40               	;
  41               	; for sake stacks grows down, heaps grows up
  42               	;
  43               	;----------------------------------------------------------------------
  44               	.section .eeprom
  45               	.org 0x000
  46               	
  47 0000 0000      	e_void:	.word 0 ; always zero
  48 0002 0000      	e_live:	.word 0 ; seed for random
  49 0004 0000      	e_turn:	.word 0 ; routine after boot
  50 0006 0000      	e_rest:	.word 0 ; routine before reset
  51 0008 0000      	e_last:	.word 0 ; link to last word in dictionary
  52 000a 0000      	e_dp:	.word 0 ; next free flash address for dictionary
  53 000c 0000      	e_up:	.word 0 ; next free sram address for variables, backwards
  54 000e 0000      	e_ep:	.word 0 ; next free eprom address for values, 
  55               	
  56               	EP0 = .
  57               	
  58               	;----------------------------------------------------------------------
  59               	.section data
  60 0000 0000 0000 	.org SRAM_START
  60      0000 0000 
  60      0000 0000 
  60      0000 0000 
  60      0000 0000 
  61               	
  62               	;----------------------------------------------------------------------
  63               	; Terminal input buffer
  64 0100 0000 0000 	TIB0:	.space TIB_SIZE, 0x0
  64      0000 0000 
  64      0000 0000 
  64      0000 0000 
  64      0000 0000 
  65               	
  66               	;----------------------------------------------------------------------
  67               	; Stacks
  68 0148 0000 0000 	SPZ:    .space STACK_SIZE, 0x0
  68      0000 0000 
  68      0000 0000 
  68      0000 0000 
  68      0000 0000 
  69               	SP0 = .
  70 016c 0000 0000 	PSZ:    .space STACK_SIZE, 0x0
  70      0000 0000 
  70      0000 0000 
  70      0000 0000 
  70      0000 0000 
  71               	PS0 = .
  72 0190 0000 0000 	RSZ:    .space STACK_SIZE, 0x0
  72      0000 0000 
  72      0000 0000 
  72      0000 0000 
  72      0000 0000 
  73               	RS0 = .
  74               	
  75               	;----------------------------------------------------------------------
  76               	; non volatile, must be saved in eeprom
  77 01b4 0000      	VOID:	.word 0		; always 0x0000
  78 01b6 0000      	LIVE:   .word 0     ; count boots
  79               	
  80 01b8 0000      	TURN:	.word 0		; routine to run after boot
  81 01ba 0000      	REST:	.word 0		; routine to run before reset
  82               	
  83 01bc 0000      	LAST:	.word 0		; reference to latest word in dictionary
  84 01be 0000      	VDP:	.word 0		; next free cell in flash dictionary
  85               	
  86 01c0 0000      	VUP:    .word 0     ; next free cell in static ram, backwards
  87 01c2 0000      	VEP: 	.word 0		; next free cell in eeprom
  88               	
  89               	;----------------------------------------------------------------------
  90               	; those are volatile, dont care
  91 01c4 0000      	VHP:    .word 0     ; next free cell in static ram, forward
  92 01c6 0000      	SEED:   .word 0     ; random seed
  93               	
  94 01c8 0000      	STAT:	.word 0		; state of interpreter, 0 interprete, 1 compile
  95 01ca 0000      	RADX:	.word 0		; numeric radix for convertion
  96               	
  97 01cc 0000      	TOIN:   .word 0     ; offset in TIB
  98 01ce 0000      	SPAN:   .word 0     ; offset in user buffer
  99               	
 100 01d0 0000      	SCRS:   .word 0     ; screen number
 101 01d2 0000      	BLKS:   .word 0     ; block number
 102               	
 103 01d4 0000      	HAND:   .word 0     ; handler for catch and throw
 104 01d6 0000      	CSPP:   .word 0     ; keep last ps
 105               	
 106 01d8 0000      	CURR:   .word 0     ; reference to current vocabulary
 107 01da 0000      	CTXT:   .word 0     ; reference to context vocabulary
 108               	
 109 01dc 0000      	HLD:    .word 0     ; picture number buffer
 110 01de 0000      	HLDS:   .word 0     ; picture number cursor
 111               	
 112 01e0 0000      	WARN:   .word 0     ; warning number
 113 01e2 0000      	ERRN:   .word 0     ; error number
 114               	
 115 01e4 0000      	TMP0:   .word 0     ; temporary
 116 01e6 0000      	TMP1:   .word 0     ; temporary
 117 01e8 0000      	TMP2:   .word 0     ; temporary
 118 01ea 0000      	TMP3:   .word 0     ; temporary
 119               	
 120               	;----------------------------------------------------------------------
 121               	UH0 = .
 122               	
 123               	US0 = SRAM_END
 124               	
 125               	;.equ is_free_sram,  US0 - UH0
 126               	
 127               	;----------------------------------------------------------------------
 128               	;
 129               	; code segment, flash
 130               	;
 131               	; all start text segment is in bios.S
 132               	;----------------------------------------------------------------------
 133               	.p2align 1, 0x00
 134               	#include "bios.S"
   1               	
   2               	/*
   3               	 *  DISCLAIMER
   4               	 *
   5               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   6               	 *
   7               	 *  Permission is hereby granted, free of charge, to any person obtaining
   8               	 *  a copy of this software and associated documentation files (the
   9               	 *  "Software"), to deal in the Software without restriction, including
  10               	 *  without limitation the rights to use, copy, modify, merge, publish,
  11               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  12               	 *  permit persons to whom the Software is furnished to do so, subject to
  13               	 *  the following conditions:
  14               	 *
  15               	 *  The above copyright notice and this permission notice shall be
  16               	 *  included in all copies or substantial portions of the Software.
  17               	 *
  18               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  19               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  20               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  21               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  22               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  23               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  24               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  25               	 *
  26               	 */
  27               	
  28               	;----------------------------------------------------------------------
  29               	; review for atmega328
  30               	;   10/2022 @agsb
  31               	
  32               	
  33               	;---------------------------------------------------------------------
  34               	; from avr manual, do not change 
  35               	; reserved I/O Memory address
  36               	;
  37               	__SREG__ = 0x3f
  38               	__SP_H__ = 0x3e
  39               	__SP_L__ = 0x3d
  40               	
  41               	/* USART */
  42               	UBRRL = 0x09
  43               	UCSRC = 0x20
  44               	UCSRB = 0x0a
  45               	UCSRA = 0x0b
  46               	
  47               	/* Watch dog */
  48               	WDTCR = 0x21
  49               	
  50               	/* timer0 */
  51               	TCNT0 = 0x32
  52               	TCCR0 = 0x33
  53               	TIMSK = 0x39
  54               	
  55               	/* SPMCR */
  56               	SPMCR = 0x37
  57               	
  58               	/* SPM BITS */
  59               	SPMIE = 7
  60               	RWWSB = 6
  61               	/* bit 5 reserved */
  62               	RWWSRE = 4
  63               	BLBSET = 3
  64               	PGWRT = 2
  65               	PGERS = 1
  66               	SPMEN = 0
  67               	
  68               	;----------------------------------------------------------------------
  69               	;792486AA–AVR–02/2013 ATmega8(L)Note:1.   See “About Code Examples” on page 8
  70               	;
  71               	; from atmeg8 datasheet
  72               	;
  73               	EEARH =  0x1F
  74               	EEARL =  0x1E
  75               	EEDR  =  0x1D
  76               	EECR  =  0x1C
  77               	EEWE  =  1
  78               	EEMWE =  2
  79               	EERE  =  0
  80               	
  81               	;----------------------------------------------------------------------
  82               	; sleep register
  83               	MCUCR = 0x35 
  84               	
  85               	;----------------------------------------------------------------------
  86               	;
  87               	; classic interrup vector table
  88               	;
  89               	;----------------------------------------------------------------------
  90               	
  91               	
  92               	;----------------------------------------------------------------------
  93               	;
  94               	; code segment, flash
  95               	;
  96               	.section .text
  97               	.org 0x000
  98               	.global boot
  99               	
 100               	boot:
 101               	
 102 0000 00C0      	    rjmp RESET ; Reset Handler
 103 0002 1895      	    reti ; rjmp EXT_INT0 ; IRQ0 Handler
 104 0004 1895      	    reti ; rjmp EXT_INT1 ; IRQ1 Handler
 105 0006 1895      	    reti ; rjmp TIM2_COMP ; Timer2 Compare Handler
 106 0008 1895      	    reti ; rjmp TIM2_OVF ; Timer2 Overflow Handler
 107 000a 1895      	    reti ; rjmp TIM1_CAPT ; Timer1 Capture Handler
 108 000c 1895      	    reti ; rjmp TIM1_COMPA ; Timer1 CompareA Handler
 109 000e 1895      	    reti ; rjmp TIM1_COMPB ; Timer1 CompareB Handler
 110 0010 1895      	    reti ; rjmp TIM1_OVF ; Timer1 Overflow Handler
 111 0012 00C0      	    rjmp TIM0_OVF ; Timer0 Overflow Handler
 112 0014 1895      	    reti ; rjmp SPI_STC ; SPI Transfer Complete Handler
 113 0016 1895      	    reti ; rjmp USART_RXC ; USART RX Complete Handler
 114 0018 1895      	    reti ; rjmp USART_UDRE ; ((0x0C) + 0x20) Empty Handler
 115 001a 1895      	    reti ; rjmp USART_TXC ; USART TX Complete Handler
 116 001c 1895      	    reti ; rjmp ADC ; ADC Conversion Complete Handler
 117 001e 1895      	    reti ; rjmp EE_RDY ; EEPROM Ready Handler
 118 0020 1895      	    reti ; rjmp ANA_COMP ; Analog Comparator Handler
 119 0022 1895      	    reti ; rjmp TWSI ; Two-wire Serial Interface Handler
 120 0024 1895      	    reti ; rjmp SPM_RDY ; Store Program Memory Ready Handler;
 121               	
 122               	; todo: use USART_RXC to allow ^C, ^S, ^Q, ^D controls
 123               	
 124               	;----------------------------------------------------------------------
 125               	; 
 126               	RESET:
 127               	;   yes, is a nop. 
 128 0026 0000      	    nop
 129               	; clear interrupts
 130 0028 F894      	    cli
 131               	; init _zero_ as zero
 132 002a 6624      	    clr _zero_
 133 002c 6FBE      	    out __SREG__, _zero_ ; clear sreg
 134               	; init real sp at end of sram
 135 002e 8FEF      	    ldi r24, lo8(SRAM_END)
 136 0030 98E0      	    ldi r25, hi8(SRAM_END)
 137               	; reserve
 138 0032 8DBF      	    out __SP_L__, r24
 139 0034 9EBF      	    out __SP_H__, r25
 140               	
 141               	;----------------------------------------------------------------------
 142               	/*
 143               	
 144               	OSCAL calibration,
 145               	from atmel 2555 note:
 146               	for atmega8 theorical for 25oC at 5V, value is 168.
 147               	for optiboot, value is 143 as sample better for 38400 bauds, maybe less for 40oC
 148               	CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DOSC_CAL=142' '-DNUM_LED_FLASHES=2' -DBAUD_RATE=38400
 149               	*/
 150               	
 151               	;----------------------------------------------------------------------
 152               	; init timer0, with internal clock 8MHz, 
 153               	;   from gcc public code, io ports as constants
 154               	;
 155               	; preset of timer0, with internal clock 8MHz ; cycle 64 ; offset 131
 156               	; timer cycle * offset / clock = 8k/8M = 1ms
 157               	;
 158               	; so it counts 125 clocks inside the interrup routines
 159               	;
 160               	; offset counter 256 - 125 = 131
 161               	; but was 8 clocks in routine timer0, 
 162               	; then 131 + 12 = 143
 163               	OFFSETCNT = 143
 164               	;
 165               	TIMER0_SET:
 166               	; enable pre-escaler
 167 0036 03B7      	    in r16, TCCR0
 168 0038 0360      	    ori r16, (1 << 1) | (1 << 0)
 169 003a 03BF      	    out TCCR0, r16
 170               	; offset counter
 171 003c 0FE8      	    ldi r16, OFFSETCNT
 172               	; preserve offset
 173 003e 302E      	    mov r3, r16
 174 0040 02BF      	    out TCNT0, r16
 175               	; enable counter
 176 0042 09B7      	    in r16, TIMSK
 177 0044 0160      	    ori r16, (1 << 0) 
 178 0046 09BF      	    out TIMSK, r16
 179               	;   clear click counter
 180 0048 4424      	    clr r4
 181 004a 5524      	    clr r5
 182               	
 183               	;----------------------------------------------------------------------
 184               	; init watch dog, from avr-gcc public code, io ports as constants
 185               	; write logical one to WDCE and WDE, set WDP2, WDP1, WDP0 to ~ 2.0 s
 186               	;
 187               	WATCHDOG_SET:
 188 004c 01B5      	    in r16, WDTCR
 189 004e 0861      	    ori r16, (1 << 4) | (1 << 3)
 190 0050 0760      	    ori r16, (1 << 2) | (1 << 1) | (1 << 0)
 191 0052 01BD      	    out WDTCR, r16
 192               	
 193               	;----------------------------------------------------------------------
 194               	; init usart, from avr-gcc public code
 195               	;
 196               	;   defaults to 9600, 8N1, no control
 197               	;
 198               	USART_SET:
 199 0054 0027      	    clr r16
 200 0056 00BD      	    out UCSRC, r16
 201 0058 04E3      	    ldi r16, lo8(52)
 202 005a 09B9      	    out UBRRL, r16
 203 005c 0AB1      	    in r16, UCSRB
 204 005e 0861      	    ori r16, lo8(24)
 205 0060 0AB9      	    out UCSRB, r16
 206 0062 0EE8      	    ldi r16, lo8(-114)
 207 0064 00BD      	    out UCSRC, r16
 208 0066 00B5      	    in r16, UCSRC
 209 0068 0064      	    ori r16,lo8(64)
 210 006a 00BD      	    out UCSRC, r16
 211               	
 212               	;----------------------------------------------------------------------
 213               	; enable interrupts
 214               	GOOD:
 215 006c 7894      	    sei
 216               	;    rjmp COLD 
 217 006e C8CF      	    rjmp HALT
 218               	
 219               	;----------------------------------------------------------------------
 220               	;
 221               	;   do not use r0 and r1 are scratch registers used in spm, mul, des, etc
 222               	;
 223               	;   generic:
 224               	;   r2 , save_SREG
 225               	;   r3 , offset prescale timer0
 226               	;   r4 , counter each 1ms low byte
 227               	;   r5 , counter each 1ms high byte
 228               	;   r6 , _zero_
 229               	
 230               	;   timer0 prescale 
 231               	;   for 8 MHz, prescale 64, offset 131, results about 1 ms
 232               	;   64 * 125 = 8000 ; 
 233               	;   256 - 125 = 131 ; offset for miliseconds
 234               	;   plus 12 cycles inside routine
 235               	;
 236               	;   ticks counts till 65 seconds
 237               	;
 238               	;   60000 is EA60
 239               	;
 240               	; interrupt routine
 241               	TIM0_OVF:
 242               	; disable interrups
 243 0070 F894      	    cli
 244               	; save flags
 245 0072 2FB6      	    in r2, __SREG__
 246               	; increase counter and also clear 
 247 0074 4394      	    inc r4
 248 0076 01F0      	    brbs BIT_ZERO, TIM0_ADJ
 249 0078 5394      	    inc r5
 250               	TIM0_ADJ:
 251 007a 32BE      	    out TCNT0, r3
 252               	;  reset watch dog
 253 007c A895      	    wdr
 254               	; clear _zero_  
 255 007e 6624      	    clr r6
 256               	; load flags and return
 257 0080 2FBE      	    out __SREG__, r2
 258               	; enable interrups
 259 0082 7894      	    sei
 260 0084 1895      	    reti
 261               	
 262               	;----------------------------------------------------------------------
 263               	;
 264               	;   do not use r0 and r1 are scratch registers used in spm, mul, des, etc
 265               	;
 266               	HALT:
 267 0086 0000      	    nop
 268 0088 7894      	    sei
 269 008a 00E8      	    ldi r16, 0x80 ; Enable sleep mode
 270 008c 05BF      	    out MCUCR, r16
 271 008e 8895      	    sleep           ; Put MCU in sleep mode
 272 0090 00C0      	    rjmp RESET
 273               	
 135               	
 136               	;----------------------------------------------------------------------
 137               	.p2align 1, 0x00
 138               	#include "messages.S"
   1               	
   2               	/*
   3               	 *  DISCLAIMER
   4               	 *
   5               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   6               	 *
   7               	 *  Permission is hereby granted, free of charge, to any person obtaining
   8               	 *  a copy of this software and associated documentation files (the
   9               	 *  "Software"), to deal in the Software without restriction, including
  10               	 *  without limitation the rights to use, copy, modify, merge, publish,
  11               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  12               	 *  permit persons to whom the Software is furnished to do so, subject to
  13               	 *  the following conditions:
  14               	 *
  15               	 *  The above copyright notice and this permission notice shall be
  16               	 *  included in all copies or substantial portions of the Software.
  17               	 *
  18               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  19               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  20               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  21               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  22               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  23               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  24               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  25               	 *
  26               	 */
  27               	
  28               	 disclaimer : 
  29 0092 4449 5343 	 .ascii "DISCLAIMER\nthis software is provided \"AS IS\".\n"
  29      4C41 494D 
  29      4552 0A74 
  29      6869 7320 
  29      736F 6674 
  30 00c0 436F 7079 	 .ascii "Copyright © 2020, Alvaro Gomes Sobral Barcellos,\n"
  30      7269 6768 
  30      7420 C2A9 
  30      2032 3032 
  30      302C 2041 
  31 00f2 4C69 6365 	 .ascii "Licence Creative Commons,f8f98284-589e-4290-867c-0ac3824721ac,\n"
  31      6E63 6520 
  31      4372 6561 
  31      7469 7665 
  31      2043 6F6D 
  32 0131 4174 7472 	 .ascii "Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)\n"
  32      6962 7574 
  32      696F 6E2D 
  32      4E6F 6E43 
  32      6F6D 6D65 
  33               	 
  34 016c 04        	 .byte 4
  35               	 prompt : ; 4
  36 016d 204F 6B00 	 .asciz " Ok"
  37               	 
  38 0171 04        	 .byte 4
  39               	 question : ; 4
  40 0172 203F 3F00 	 .asciz " ??"
  41               	 
  42 0176 0C        	 .byte 12
  43               	 undefined : ; 12
  44 0177 2075 6E64 	 .asciz " undefined?"
  44      6566 696E 
  44      6564 3F00 
  45               	 
  46 0183 0C        	 .byte 12
  47               	 exception : ; 12
  48 0184 2065 7863 	 .asciz " exception!"
  48      6570 7469 
  48      6F6E 2100 
  49               	 
  50 0190 0A        	 .byte 10
  51               	 abort : ; 10
  52 0191 2061 626F 	 .asciz " aborted."
  52      7274 6564 
  52      2E00 
  53               	 
  54               	 roullete: ; 37, Pascal
  55               	 ; french: 0-32-15-19-4-21-2-25-17-34-6-27-13-36-11-30-8-23-10-5-24-16-33-1-20-14-31-9-22-18-29-7-2
  56               	 ; double: 0-28-9-26-30-11-7-20-32-17-5-22-34-15-3-24-36-13-1-00-27-10-25-29-12-8-19-31-18-6-21-33-
  57               	 ; triple: 0-000-00-32-15-19-4-21-2-25-17-34-6-27-13-36-11-30-8-23-10-5-24-16-33-1-20-14-31-9-22-18
  58 019b 0000      	 .word  0
  59 019d 2000 0F00 	 .word 32, 15, 19,  4, 21,  2, 25, 17, 34 
  59      1300 0400 
  59      1500 0200 
  59      1900 1100 
  59      2200 
  60 01af 0600 1B00 	 .word  6, 27, 13, 36, 11, 30,  8, 23, 10
  60      0D00 2400 
  60      0B00 1E00 
  60      0800 1700 
  60      0A00 
  61 01c1 0500 1800 	 .word  5, 24, 16, 33,  1, 20, 14, 31,  9
  61      1000 2100 
  61      0100 1400 
  61      0E00 1F00 
  61      0900 
  62 01d3 1600 1200 	 .word 22, 18, 29,  7, 28, 12, 35,  3, 26
  62      1D00 0700 
  62      1C00 0C00 
  62      2300 0300 
  62      1A00 
  63               	
 139               	
 140               	;----------------------------------------------------------------------
 141 01e5 00        	.p2align 1, 0x00
 142               	#include "forth-leafs.S"
   1               	
   2               	/*
   3               	 *  DISCLAIMER
   4               	 *
   5               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   6               	 *
   7               	 *  Permission is hereby granted, free of charge, to any person obtaining
   8               	 *  a copy of this software and associated documentation files (the
   9               	 *  "Software"), to deal in the Software without restriction, including
  10               	 *  without limitation the rights to use, copy, modify, merge, publish,
  11               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  12               	 *  permit persons to whom the Software is furnished to do so, subject to
  13               	 *  the following conditions:
  14               	 *
  15               	 *  The above copyright notice and this permission notice shall be
  16               	 *  included in all copies or substantial portions of the Software.
  17               	 *
  18               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  19               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  20               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  21               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  22               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  23               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  24               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  25               	 *
  26               	 */
  27               	
  28               	;---------------------------------------------------------------------
  29               	;
  30               	;    A small Forth for ATmega8 
  31               	;
  32               	;---------------------------------------------------------------------
  33               	; dictionary structure 
  34               	;
  35               	; cell size is a word of 16 bits 
  36               	;
  37               	; .word  link    link to previous 
  38               	; .byte  size    sizeof name (1..15) OR flags 
  39               	; .ascii "name"  name, plus a pad byte with BL (0x32) if size is even 
  40               	; .word  param,  many references 
  41               	;
  42               	;----------------------------------------------------------------------
  43               	 
  44               	;
  45               	; classics 
  46               	;
  48               	.LIST 
  49               	 
  50               	;----------------------------------------------------------------------
  51               	; start of dictionary 
  52               	;
  53               	 
  54               	;----------------------------------------------------------------------
  55               	;
  56               	; this is the forth inner engine, 
  57               	;
  58               	; a compound word, aka twig, must end with a reference to ENDS 
  59               	;
  60               	; a primitive work, aka leaf, must start with NOOP and ends with POON 
  61               	;
  62               	; the size byte must be masked by: or 0xF0 
  63               	;
  64               	; memory pointer r30:r31 as Z 
  65               	; parameter stack pointer r28:r29 as Y 
  66               	; return stack pointer r26:r27 as X 
  67               	; top of stack r24:r25 
  68               	; nos, temporary next of stack r22:r23 
  69               	; wrk, temporary working r20:r21 
  70               	;
  71               	; _zero_, always zero, keeped by timer0
  72               	; _work_, scratch
  73               	;
  74               	; Can only use LPM to access flash memory ? YES! 
  75               	;
  76               	; forth: all constants in flash
  77               	;
  78               	; user: no constants and variables in sdram 
  79               	;
  80               	; why ? flash memory suports only 10.000 cycles 
  81               	;
  82               	;----------------------------------------------------------------------
  83               	; starts just above sram ends 
  84               	;
  85               	; use the address to determine if is flash or is sram, above is flash :)
  86               	;
  87               	.section .text 
  88               	__forth__: 
  89               	
  90               	;----------------------------------------------------------------------
  91               	; inner interpreter, 
  92               	; it is also a primitive word 
  93               	;
  94               	; on AVR use Z for access flash
  95               	;
  96               	;   temporary use zpm, wrk, _word_
  97               	;
  98 01e6 0000 0445 	HEADER "ENDS", "ENDS", F_LEAP | F_CORE
  98      4E44 5320 
  99               	; does nothing and mark as primitive 
 100 01ee 0000      	    NOOP 
 101               	 
 102               	; pull ips from rsp 
 103               	_unnest:  
 104 01f0 FD91 ED91 	    rspull zpm_low, zpm_high 
 105               	    ; rjump _next
 106               	 
 107               	; load w with contents of cell at ips 
 108               	_next: 
 109 01f4 EE0F FF1F 	    pmload wrk_low, wrk_high ; also increments zpm 
 109      4591 5591 
 109      F795 E795 
 110               	 
 111               	; if zero (NULL) is a primitive word 
 112               	_void:
 113 0200 742E      	    mov _work_, wrk_low 
 114 0202 752A      	    or _work_, wrk_high 
 115 0204 01F0      	    brbs BIT_ZERO, _jump
 116               	
 117               	; else is a reference ( 2 extra cycles )
 118               	_nest: 
 119 0206 EE93 FE93 	    rspush zpm_low, zpm_high ; push next reference 
 120 020a FA01      	    movw zpm_low, wrk_low ; point to this reference 
 121 020c 00C0      	    rjmp _next 
 122               	 
 123               	; then jump, for exec it 
 124               	_jump: 
 125 020e 0994      	    ijmp 
 126               	 
 127               	; then link, for continue 
 128               	_link: 
 129 0210 00C0      	    rjmp _unnest 
 130               	 
 131               	;----------------------------------------------------------------------
 132               	;
 133               	; ok ( -- ) 
 134               	;
 135 0212 0000 044E 	HEADER "NOOP", "NO_OP", F_LEAP 
 135      4F4F 5020 
 136 021a 0000      	    NOOP
 137 021c 0C94 0000 	    POON
 138               	
 139               	;********************************************************************** 
 140               	;
 141               	;   bios i/O 
 142               	;
 143               	;----------------------------------------------------------------------
 144               	;
 145               	; ok ( -- w) 
 146               	; beware, it blocks while test if can receive a char 
 147               	;
 148 0220 0000 034B 	HEADER "KEY", "KEY", F_LEAP | F_CORE
 148      4559 
 149 0226 0000      	    NOOP 
 150               	1: 
 151 0228 5F9B      	    sbis 0x0b, 7 
 152 022a 00C0      	    rjmp 1b 
 153               	2: 
 154 022c 8A93 9A93 	    pspush tos_low, tos_high
 155 0230 8CB1      	    in tos_low, 0x0c 
 156 0232 9927      	    clr tos_high 
 157 0234 0C94 0000 	    POON 
 158               	 
 159               	;----------------------------------------------------------------------
 160               	;
 161               	; ok ( -- FALSE | TRUE ) 
 162               	; test if can receive a char, or return FALSE 
 163               	;
 164 0238 0000 044B 	HEADER "KEY?", "QKEY", F_LEAP | F_CORE
 164      4559 3F20 
 165 0240 0000      	    NOOP 
 166               	3: 
 167 0242 5F9B      	    sbis 0x0b, 7 
 168 0244 00C0      	    rjmp _iffalse 
 169 0246 00C0      	    rjmp _iftrue 
 170               	 
 171               	;----------------------------------------------------------------------
 172               	;
 173               	; ok ( w -- ) 
 174               	; beware, it blocks while test if can send a char 
 175               	;
 176 0248 0000 0445 	HEADER "EMIT", "EMIT", F_LEAP | F_CORE
 176      4D49 5420 
 177 0250 0000      	    NOOP 
 178               	1: 
 179 0252 5D9B      	    sbis 0x0b, 5 
 180 0254 00C0      	    rjmp 1b 
 181               	2: 
 182 0256 8CB9      	    out 0x0c, tos_low 
 183 0258 9991 8991 	    pspull tos_low, tos_high
 184 025c 0C94 0000 	    POON 
 185               	 
 186               	;----------------------------------------------------------------------
 187               	;
 188               	; ok ( -- FALSE | TRUE ) 
 189               	; test if can send a char, or return FALSE 
 190               	;
 191 0260 0000 0545 	HEADER "EMIT?", "QEMIT", F_LEAP | F_CORE
 191      4D49 543F 
 192 0268 0000      	    NOOP 
 193               	3: 
 194 026a 5D9B      	    sbis 0x0b, 5 
 195 026c 00C0      	    rjmp _iffalse 
 196 026e 00C0      	    rjmp _iftrue 
 197               	 
 198               	;----------------------------------------------------------------------
 199               	;
 200               	; ok ( c e -- ) 
 201               	;   pull up port 
 202               	;   zzzz
 203               	;
 204 0270 0000 0750 	HEADER "PULLUP!", "PUPTO", F_LEAP 
 204      554C 4C55 
 204      5021 
 205 027a 0000      	    NOOP 
 206 027c 0C94 0000 	    POON
 207               	
 208               	;----------------------------------------------------------------------
 209               	;
 210               	; ok ( c e -- ) 
 211               	;   pull down port 
 212               	;   zzzz
 213               	;
 214 0280 0000 0750 	HEADER "PULLDN!", "PDNTO", F_LEAP 
 214      554C 4C44 
 214      4E21 
 215 028a 0000      	    NOOP 
 216 028c 0C94 0000 	    POON
 217               	
 218               	;----------------------------------------------------------------------
 219               	;
 220               	; ok ( c e -- ) 
 221               	;   write a byte to eprom 
 222               	;
 223 0290 0000 0345 	HEADER "EC!", "ECTO", F_LEAP 
 223      4321 
 224 0296 0000      	    NOOP 
 225 0298 7991 6991 	    pspull nos_low, nos_high
 226               	
 227               	_ee_write:
 228               	; Wait for completion of previous write
 229 029c E199      	    sbic EECR, EEWE
 230 029e 00C0      	    rjmp _ee_write
 231               	
 232               	; Set up address  in address register
 233 02a0 9FBB      	    out EEARH, tos_high
 234 02a2 8EBB      	    out EEARL, tos_low
 235               	
 236               	; Write data to Data Register
 237 02a4 6DBB      	    out EEDR, nos_low
 238               	
 239               	; prepare    
 240 02a6 F894      	    cli
 241 02a8 2FB6      	    in r2, __SREG__
 242               	
 243               	; Write logical one to EEMPE
 244 02aa E29A      	    sbi EECR, EEMWE
 245               	; Start eeprom write by setting EEWE
 246 02ac E19A      	    sbi EECR, EEWE
 247               	
 248               	; restore
 249 02ae 2FBE      	    out __SREG__, r2
 250 02b0 7894      	    sei
 251 02b2 0C94 0000 	    POON
 252               	
 253               	;----------------------------------------------------------------------
 254               	;
 255               	; ok ( e -- u ) 
 256               	;   read eeprom
 257               	;
 258 02b6 0000 0345 	HEADER "EC@", "ECAT", F_LEAP
 258      4340 
 259 02bc 0000      	    NOOP 
 260 02be 7991 6991 	    pspull nos_low, nos_high
 261               	
 262               	_ee_read:
 263               	; Wait for completion of previous write
 264 02c2 E199      	    sbic EECR, EEWE
 265 02c4 00C0      	    rjmp _ee_read
 266               	
 267               	; Set up address in address register
 268 02c6 9FBB      	    out EEARH, tos_high
 269 02c8 8EBB      	    out EEARL, tos_low
 270               	
 271               	; Start eeprom read by writing EERE
 272 02ca E09A      	    sbi EECR, EERE
 273               	; Read data from Data Register
 274 02cc 8DB3      	    in tos_low, EEDR
 275 02ce 9927      	    clr tos_high
 276 02d0 0C94 0000 	    POON
 277               	
 278               	;----------------------------------------------------------------------
 279               	;
 280               	; ok ( w -- u ) 
 281               	; also io@
 282               	; only sram
 283               	;
 284 02d4 0000 0350 	HEADER "PC@", "PCAT", F_LEAP 
 284      4340 
 285 02da 0000      	    NOOP 
 286               	_peek:
 287 02dc FC01      	    movw zpm_low, tos_low  
 288 02de 8081      	    ld tos_low, Z
 289 02e0 9927      	    clr tos_high
 290 02e2 0C94 0000 	    POON
 291               	
 292               	;----------------------------------------------------------------------
 293               	;
 294               	; ok ( u w -- ) 
 295               	; also io!
 296               	; only sram
 297               	;
 298 02e6 0000 0350 	HEADER "PC!", "PCTO", F_LEAP
 298      4321 
 299 02ec 0000      	    NOOP
 300               	_poke:
 301 02ee FC01      	    movw zpm_low, tos_low  
 302 02f0 8083      	    st Z, tos_low
 303 02f2 9991 8991 	    pspull tos_low, tos_high
 304 02f6 0C94 0000 	    POON
 305               	    
 306               	;----------------------------------------------------------------------
 307               	;
 308               	; ok ( -- w) 
 309               	; push timer counter 
 310               	;
 311 02fa 0000 064D 	HEADER "MILLIS", "MILLIS", F_LEAP
 311      494C 4C49 
 311      5320 
 312 0304 0000      	    NOOP 
 313 0306 8A93 9A93 	    pspush tos_low, tos_high 
 314 030a 842D      	    mov tos_low, ticks_low 
 315 030c 952D      	    mov tos_high, ticks_high 
 316 030e 0C94 0000 	    POON 
 317               	 
 318               	/*
 319               	;----------------------------------------------------------------------
 320               	;
 321               	; ok ( -- w) 
 322               	; strat watchdog 
 323               	;
 324               	HEADER "WDCLR", "WDCLR", F_LEAP 
 325               	    NOOP 
 326               	    wdr
 327               	    POON
 328               	
 329               	HEADER "WDON", "WDON", F_LEAP
 330               	    NOOP 
 331               	    in r16, WDTCR
 332               	    ori r16, (WDE)|(WDP2)|(WDP1)|WDP0)
 333               	    out WDTCR, r16
 334               	    POON
 335               	
 336               	HEADER "WDOFF", "WDOFF", F_LEAP
 337               	    NOOP 
 338               		wdr
 339               	    in r16, WDTCR
 340               	    ori r16, (WDTOE)|(WDE)
 341               	    out WDTCR, r16
 342               	    clr r16
 343               	    out WDTCR, r16
 344               	    POON
 345               	*/
 346               	
 347               	;********************************************************************** 
 348               	;
 349               	;   primitive words 
 350               	;
 351               	;----------------------------------------------------------------------
 352               	 
 353               	;----------------------------------------------------------------------
 354               	;
 355               	; ok ( -- -1 ) 
 356               	;
 357 0312 0000 0454 	HEADER "TRUE", "FTRUE", F_LEAP | F_CORE
 357      5255 4520 
 358 031a 0000      	    NOOP 
 359 031c 8A93 9A93 	    pspush tos_low, tos_high 
 360               	_iftrue: 
 361 0320 8FEF      	    ser tos_low 
 362 0322 9FEF      	    ser tos_high 
 363 0324 0C94 0000 	    POON 
 364               	 
 365               	;----------------------------------------------------------------------
 366               	;
 367               	; ok ( -- 0 ) 
 368               	;
 369 0328 0000 0546 	HEADER "FALSE", "FFALSE", F_LEAP | F_CORE
 369      414C 5345 
 370 0330 0000      	    NOOP 
 371 0332 8A93 9A93 	    pspush tos_low, tos_high 
 372               	_iffalse: 
 373 0336 8827      	    clr tos_low 
 374 0338 9927      	    clr tos_high 
 375 033a 0C94 0000 	    POON 
 376               	 
 377               	;----------------------------------------------------------------------
 378               	;
 379               	; ok 0= 
 380               	;
 381 033e 0000 0230 	HEADER "0=", "ZEQU", F_LEAP | F_CORE
 381      3D20 
 382 0344 0000      	    NOOP 
 383 0346 892B      	    or tos_low, tos_high
 384 0348 01F0      	    brbs BIT_ZERO, _iftrue
 385 034a 01F4      	    brbc BIT_ZERO, _iffalse
 386 034c 0C94 0000 	    POON
 387               	 
 388               	;----------------------------------------------------------------------
 389               	;
 390               	; ok 0< 
 391               	;   using 2's complement, negative always have 0x8000
 392 0350 0000 0230 	HEADER "0<", "ZLTH", F_LEAP | F_CORE
 392      3C20 
 393 0356 0000      	    NOOP 
 394               	    ; 0x80
 395 0358 9078      	    andi tos_high, 0x80
 396 035a 01F4      	    brbc BIT_ZERO, _iftrue
 397 035c 01F0      	    brbs BIT_ZERO, _iffalse
 398 035e 0C94 0000 	    POON
 399               	
 400               	;----------------------------------------------------------------------
 401               	;
 402               	; ok ( u1 u2 -- f ) 
 403               	;   unsigned lessthan 
 404               	;   if u1 < u2, true, else, false
 405               	;
 406 0362 0000 0255 	HEADER "U<", "UMLESS", F_LEAP | F_CORE
 406      3C20 
 407 0368 0000      	    NOOP 
 408 036a 7991 6991 	    pspull nos_low, nos_high 
 409 036e 8894      	    clc 
 410 0370 6817      	    cp  nos_low, tos_low 
 411 0372 7907      	    cpc nos_high, tos_high 
 412               	1:    
 413 0374 04F0      	    brlt 2f 
 414 0376 00C0      	    rjmp _iffalse
 415               	2:
 416 0378 00C0      	    rjmp _iftrue
 417 037a 0C94 0000 	    POON
 418               	
 419               	;----------------------------------------------------------------------
 420               	;
 421               	; ok ( w1 w2 -- w3 c ) 
 422               	;   unsigned plus 
 423               	;
 424 037e 0000 0355 	HEADER "UM+", "UMPLUS", F_LEAP | F_CORE
 424      4D2B 
 425 0384 0000      	    NOOP 
 426 0386 7991 6991 	    pspull nos_low, nos_high 
 427 038a 8894      	    clc 
 428 038c 860F      	    add tos_low, nos_low 
 429 038e 971F      	    adc tos_high, nos_high 
 430 0390 8A93 9A93 	    pspush tos_low, tos_high
 431               	    ; preserve carry
 432               	1:
 433 0394 9927      	    clr tos_high
 434 0396 8827      	    clr tos_low
 435               	2:    
 436 0398 00F4      	    brcc 3f
 437 039a 8395      	    inc tos_low
 438               	3:
 439 039c 0C94 0000 	    POON 
 440               	 
 441               	;----------------------------------------------------------------------
 442               	;
 443               	; ok ! to (w a -- ) 
 444               	; only in sram 
 445               	;
 446 03a0 0000 0121 	HEADER "!", "TO", F_LEAP | F_CORE
 447 03a4 0000      	    NOOP 
 448 03a6 FC01      	    movw  zpm_low, tos_low
 449 03a8 9991 8991 	    pspull tos_low, tos_high 
 450 03ac 8193      	    srsave tos_low 
 451 03ae 9193      	    srsave tos_high
 452 03b0 9991 8991 	    pspull tos_low, tos_high 
 453 03b4 0C94 0000 	    POON 
 454               	 
 455               	;----------------------------------------------------------------------
 456               	;
 457               	; ok @ at ( a -- w ) 
 458               	; only in sram 
 459               	;
 460 03b8 0000 0140 	HEADER "@", "AT", F_LEAP | F_CORE
 461 03bc 0000      	    NOOP 
 462 03be FC01      	    movw zpm_low, tos_low 
 463 03c0 8191      	    srload tos_low 
 464 03c2 9191      	    srload tos_high 
 465 03c4 0C94 0000 	    POON
 466               	 
 467               	;----------------------------------------------------------------------
 468               	;
 469               	; ok @@ at ( a -- a' ) 
 470               	; only in flash, fetches a reference to sram 
 471               	;	that could be used by @ and ! 
 472               	;
 473 03c8 0000 0240 	HEADER "@@", "ATAT", F_LEAP 
 473      4020 
 474 03ce 0000      	    NOOP 
 475 03d0 FC01      	    movw zpm_low, tos_low
 476 03d2 EE0F FF1F 	    pmload tos_low, tos_high
 476      8591 9591 
 476      F795 E795 
 477 03de 0C94 0000 		POON
 478               	    
 479               	;----------------------------------------------------------------------
 480               	; 
 481               	; Note on return stack operations:
 482               	;
 483               	;   the values in ( >R R@ R> ) are placed onto/from second cell of return stack.
 484               	;
 485               	;   this keeps the adjacent reference for inner interpreter, "where it comes" 
 486               	;
 487               	;   that's a side effect of MITC, there is no IP keeped.
 488               	;
 489               	;   that's transparent for user.
 490               	
 491               	;----------------------------------------------------------------------
 492               	;
 493               	; ok ( w -- ) ( -- w) 
 494               	;   vide note above
 495               	;
 496 03e2 0000 223E 	HEADER ">R", "TOR", F_COMPILE | F_LEAP | F_CORE
 496      5220 
 497 03e8 0000      	    NOOP 
 498 03ea 7D91 6D91 	    rspull nos_low, nos_high
 499 03ee 8E93 9E93 	    rspush tos_low, tos_high 
 500 03f2 6E93 7E93 	    rspush nos_low, nos_high
 501 03f6 9991 8991 	    pspull tos_low, tos_high 
 502 03fa 0C94 0000 	    POON 
 503               	 
 504               	;----------------------------------------------------------------------
 505               	;
 506               	; ok ( -- w ) ( w -- ) 
 507               	;   vide note above
 508               	;
 509 03fe 0000 2252 	HEADER "R>", "RTO", F_COMPILE | F_LEAP | F_CORE
 509      3E20 
 510 0404 0000      	    NOOP 
 511 0406 8A93 9A93 	    pspush tos_low, tos_high 
 512 040a 7D91 6D91 	    rspull nos_low, nos_high
 513 040e 9D91 8D91 	    rspull tos_low, tos_high 
 514 0412 6E93 7E93 	    rspush nos_low, nos_high
 515 0416 0C94 0000 	    POON 
 516               	 
 517               	;----------------------------------------------------------------------
 518               	;
 519               	; ok ( -- w ) ( w -- w ) 
 520               	;   vide note above
 521               	;
 522 041a 0000 2252 	HEADER "R@", "RAT", F_COMPILE | F_LEAP | F_CORE
 522      4020 
 523 0420 0000      	    NOOP 
 524 0422 8A93 9A93 	    pspush tos_low, tos_high 
 525 0426 7D91 6D91 	    rspull nos_low, nos_high
 526 042a 9D91 8D91 	    rspull tos_low, tos_high 
 527 042e 8E93 9E93 	    rspush tos_low, tos_high 
 528 0432 6E93 7E93 	    rspush nos_low, nos_high
 529 0436 0C94 0000 	    POON 
 530               	 
 531               	;----------------------------------------------------------------------
 532               	;
 533               	; ok ( rsp -- w )  
 534               	;
 535 043a 0000 0352 	HEADER "RS!", "RSTO", F_LEAP | F_CORE
 535      5321 
 536 0440 0000      	    NOOP 
 537 0442 DC01      	    movw rsp_low, tos_low 
 538 0444 9991 8991 	    pspull tos_low, tos_high 
 539 0448 0C94 0000 	    POON 
 540               	 
 541               	;----------------------------------------------------------------------
 542               	;
 543               	; ok ( psp -- w ) 
 544               	;
 545 044c 0000 0350 	HEADER "PS!", "PSTO", F_LEAP | F_CORE
 545      5321 
 546 0452 0000      	    NOOP 
 547 0454 EC01      	    movw psp_low, tos_low 
 548 0456 9991 8991 	    pspull tos_low, tos_high 
 549 045a 0C94 0000 	    POON 
 550               	 
 551               	;----------------------------------------------------------------------
 552               	;
 553               	; ok ( -- rsp) 
 554               	; put the address to top of return stack at tos
 555               	;
 556 045e 0000 0352 	HEADER "RS@", "RSAT", F_LEAP | F_CORE
 556      5340 
 557 0464 0000      	    NOOP 
 558 0466 8A93 9A93 	    pspush tos_low, tos_high 
 559 046a CD01      	    movw tos_low, rsp_low 
 560 046c 0C94 0000 	    POON 
 561               	 
 562               	;----------------------------------------------------------------------
 563               	;
 564               	; ok ( -- psp ) 
 565               	; put the address to top of parameter stack at tos
 566               	;
 567 0470 0000 0350 	HEADER "PS@", "PSAT", F_LEAP | F_CORE
 567      5340 
 568 0476 0000      	    NOOP 
 569 0478 8A93 9A93 	    pspush tos_low, tos_high 
 570 047c CE01      	    movw tos_low, psp_low 
 571 047e 0C94 0000 	    POON 
 572               	
 573               	;----------------------------------------------------------------------
 574               	;
 575               	; ok ( w -- ) 
 576               	;     
 577               	;
 578 0482 0000 0444 	HEADER "DROP", "DROP", F_LEAP | F_CORE
 578      524F 5020 
 579 048a 0000      	    NOOP
 580               	PULL: 
 581 048c 9991 8991 	    pspull tos_low, tos_high 
 582 0490 0C94 0000 	    POON 
 583               	 
 584               	;----------------------------------------------------------------------
 585               	;
 586               	; ok ( w -- w w) 
 587               	;
 588 0494 0000 0344 	HEADER "DUP", "DUP", F_LEAP | F_CORE
 588      5550 
 589 049a 0000      	    NOOP 
 590               	PUSH:
 591 049c 8A93 9A93 	    pspush tos_low, tos_high 
 592 04a0 0C94 0000 	    POON 
 593               	 
 594               	;----------------------------------------------------------------------
 595               	;
 596               	; ok ( w1 w2 -- w2 w1 ) 
 597               	;
 598 04a4 0000 0453 	HEADER "SWAP", "SWAP", F_LEAP | F_CORE
 598      5741 5020 
 599 04ac 0000      	    NOOP 
 600 04ae 7991 6991 	    pspull nos_low, nos_high ; w1
 601 04b2 8A93 9A93 	    pspush tos_low, tos_high ; w2
 602 04b6 CB01      	    movw tos_low, nos_low    ; w1
 603 04b8 0C94 0000 	    POON 
 604               	 
 605               	;----------------------------------------------------------------------
 606               	;
 607               	; ok ( w1 w2 -- w1 w2 w1 ) 
 608               	;
 609 04bc 0000 044F 	HEADER "OVER", "OVER", F_LEAP | F_CORE
 609      5645 5220 
 610 04c4 0000      	    NOOP 
 611 04c6 7991 6991 	    pspull nos_low, nos_high ; w1
 612 04ca 6A93 7A93 	    pspush nos_low, nos_high ; w1
 613 04ce 8A93 9A93 	    pspush tos_low, tos_high ; w2
 614 04d2 CB01      	    movw tos_low, nos_low    ; w1
 615 04d4 0C94 0000 	    POON 
 616               	 
 617               	;----------------------------------------------------------------------
 618               	;
 619               	; ok ( w1 w2 w3 -- w2 w3 w1 ) 
 620               	;
 621 04d8 0000 0352 	HEADER "ROT", "ROT", F_LEAP | F_CORE
 621      4F54 
 622 04de 0000      	    NOOP 
 623 04e0 7991 6991 	    pspull nos_low, nos_high ; w2
 624 04e4 5991 4991 	    pspull wrk_low, wrk_high ; w1
 625 04e8 6A93 7A93 	    pspush nos_low, nos_high ; w2
 626 04ec 8A93 9A93 	    pspush tos_low, tos_high ; w3
 627 04f0 CA01      	    movw tos_low, wrk_low    ; w1
 628 04f2 0C94 0000 	    POON
 629               	
 630               	;----------------------------------------------------------------------
 631               	;
 632               	; ok ( 0 | w -- 0 | w w ) 
 633               	; dup if tos not zero 
 634               	;
 635 04f6 0000 043F 	HEADER "?DUP", "ZDUP", F_LEAP | F_CORE
 635      4455 5020 
 636 04fe 0000      	    NOOP 
 637 0500 892B      	    or tos_low, tos_high
 638 0502 01F0      	    brbs BIT_ZERO, 1f 
 639 0504 8A93 9A93 	    pspush tos_low, tos_high 
 640               	1: 
 641 0508 0C94 0000 	    POON 
 642               	
 643               	;----------------------------------------------------------------------
 644               	;
 645               	; ok ( w1 w2 -- 0 | -1 ) ; w2 < w1
 646               	;   
 647 050c 0000 013C 	HEADER "<", "LTHAN", F_LEAP | F_CORE
 648 0510 0000      	    NOOP 
 649 0512 7991 6991 	    pspull nos_low, nos_high 
 650 0516 8617      	    cp tos_low, nos_low 
 651 0518 9707      	    cpc tos_high, nos_high 
 652 051a 04F0      	    brlt 1f 
 653 051c 00C0      	    rjmp _iffalse
 654               	1:
 655 051e 00C0      	    rjmp _iftrue
 656 0520 0C94 0000 	    POON
 657               	 
 658               	;----------------------------------------------------------------------
 659               	;
 660               	; ok ( w1 w2 -- w3 ) ; w3 = w1 + w2
 661               	;   signed plus
 662               	;
 663 0524 0000 012B 	HEADER "+", "PLUS", F_LEAP | F_CORE
 664 0528 0000      	    NOOP 
 665 052a 7991 6991 	    pspull nos_low, nos_high 
 666 052e 8894      	    clc 
 667 0530 860F      	    add tos_low, nos_low 
 668 0532 971F      	    adc tos_high, nos_high 
 669 0534 0C94 0000 	    POON 
 670               	 
 671               	;----------------------------------------------------------------------
 672               	;
 673               	; ok ( w1 w2 -- w3 ) ; w3 = w1 - w2 
 674               	;   signed minus, 0 5 -- -5
 675               	;
 676 0538 0000 012D 	HEADER "-", "MINUS", F_LEAP | F_CORE
 677 053c 0000      	    NOOP 
 678 053e 7991 6991 	    pspull nos_low, nos_high 
 679 0542 8894      	    clc 
 680 0544 681B      	    sub nos_low, tos_low 
 681 0546 790B      	    sbc nos_high, tos_high 
 682 0548 CB01      	    movw tos_low, nos_low
 683 054a 0C94 0000 	    POON 
 684               	 
 685               	;----------------------------------------------------------------------
 686               	;
 687               	; ok ( w1 w2 -- w3 ) ; w3 = w1 NAND w2 
 688               	;
 689 054e 0000 044E 	HEADER "NAND", "NAND", F_LEAP | F_CORE
 689      414E 4420 
 690 0556 0000      	    NOOP 
 691 0558 7991 6991 	    pspull nos_low, nos_high 
 692 055c 8623      	    and tos_low, nos_low 
 693 055e 9723      	    and tos_high, nos_high 
 694 0560 6095      	    com nos_low 
 695 0562 7095      	    com nos_high 
 696 0564 0C94 0000 	    POON 
 697               	
 698               	;----------------------------------------------------------------------
 699               	;
 700               	; ok ( w1 w2 -- w3 ) ; w3 = w1 AND w2 ) 
 701               	;
 702 0568 0000 0341 	HEADER "AND", "AND", F_LEAP | F_CORE
 702      4E44 
 703 056e 0000      	    NOOP 
 704 0570 7991 6991 	    pspull nos_low, nos_high 
 705 0574 8623      	    and  tos_low, nos_low 
 706 0576 9723      	    and  tos_high, nos_high 
 707 0578 0C94 0000 	    POON 
 708               	 
 709               	;----------------------------------------------------------------------
 710               	;
 711               	; ok ( w1 w2 -- w3 ) ; w3 = w1 OR w2 ) 
 712               	;
 713 057c 0000 024F 	HEADER "OR", "OR", F_LEAP | F_CORE
 713      5220 
 714 0582 0000      	    NOOP 
 715 0584 7991 6991 	    pspull nos_low, nos_high 
 716 0588 862B      	    or   tos_low, nos_low 
 717 058a 972B      	    or   tos_high, nos_high 
 718 058c 0C94 0000 	    POON 
 719               	 
 720               	;----------------------------------------------------------------------
 721               	;
 722               	; ok ( w1 w2 -- w3 ) ; w3 = w1 XOR w2 ) 
 723               	;
 724 0590 0000 0358 	HEADER "XOR", "XOR", F_LEAP | F_CORE
 724      4F52 
 725 0596 0000      	    NOOP 
 726 0598 7991 6991 	    pspull nos_low, nos_high 
 727 059c 8627      	    eor  tos_low, nos_low 
 728 059e 9727      	    eor  tos_high, nos_high 
 729 05a0 0C94 0000 	    POON 
 730               	 
 731               	;----------------------------------------------------------------------
 732               	;
 733               	; ok ( w1 -- w2 ) ; arithmetic inverse 
 734               	;   by 2's complement, eg 0x0002 to 0xFFFE 
 735               	;
 736 05a4 0000 0649 	HEADER "INVERT", "INVERT", F_LEAP | F_CORE
 736      4E56 4552 
 736      5420 
 737 05ae 0000      	    NOOP 
 738               	_inv: 
 739 05b0 8095      	    com tos_low 
 740 05b2 9095      	    com tos_high 
 741 05b4 0C94 0000 	    POON 
 742               	 
 743               	;----------------------------------------------------------------------
 744               	;
 745               	; ok ( w1 -- w2 ) ; logic inverse 
 746               	;   by 1's complement, eg 0x0000 to 0xFFFF
 747               	;
 748 05b8 0000 064E 	HEADER "NEGATE", "NEGATE", F_LEAP | F_CORE
 748      4547 4154 
 748      4520 
 749 05c2 0000      	    NOOP 
 750               	_neg: 
 751 05c4 8195      	    neg tos_low 
 752 05c6 9195      	    neg tos_high 
 753 05c8 0C94 0000 	    POON 
 754               	 
 755               	;----------------------------------------------------------------------
 756               	;
 757               	; ok ( w -- w * 2 ) same as shift left << 1, unsigned 
 758               	;
 759 05cc 0000 0232 	HEADER "2*", "SHL", F_LEAP | F_CORE
 759      2A20 
 760 05d2 0000      	    NOOP 
 761               	_shl: 
 762 05d4 8894      	    clc 
 763 05d6 880F      	    lsl   tos_low 
 764 05d8 991F      	    rol   tos_high 
 765 05da 0C94 0000 	    POON 
 766               	 
 767               	;----------------------------------------------------------------------
 768               	;
 769               	; ok ( w -- w / 2 ) same as shift right >> 1, unsigned 
 770               	;
 771 05de 0000 0232 	HEADER "2/", "SHR", F_LEAP | F_CORE
 771      2F20 
 772 05e4 0000      	    NOOP 
 773               	_shr: 
 774 05e6 8894      	    clc 
 775 05e8 8695      	    lsr tos_low 
 776 05ea 9795      	    ror tos_high 
 777 05ec 0C94 0000 	    POON 
 778               	 
 779               	;----------------------------------------------------------------------
 780               	;
 781               	; ok ( nAnB -- nBnA ) swap bytes in a word 
 782               	;
 783 05f0 0000 023E 	HEADER "><", "ENDIAN", F_LEAP
 783      3C20 
 784 05f6 0000      	    NOOP 
 785 05f8 482F      	    mov wrk_low, tos_low
 786 05fa 892F      	    mov tos_low, tos_high
 787 05fc 942F      	    mov tos_high, wrk_low
 788 05fe 0C94 0000 	    POON 
 789               	 
 790               	;----------------------------------------------------------------------
 791               	;
 792               	; ok ( -- ) ( branch next reference ) 
 793               	;   no more offsets then no more branch
 794 0602 0000 0642 	HEADER "BRANCH", "BRANCH", F_LEAP | F_CORE
 794      5241 4E43 
 794      4820 
 795 060c 0000      	    NOOP 
 796               	_branch: 
 797 060e FD91 ED91 	    rspull zpm_low, zpm_high 
 798 0612 EE0F FF1F 	    pmload nos_low, nos_high 
 798      6591 7591 
 798      F795 E795 
 799 061e 6E93 7E93 	    rspush nos_low, nos_high 
 800 0622 0C94 0000 	    POON 
 801               	 
 802               	;----------------------------------------------------------------------
 803               	;
 804               	; ok ( u -- ) 
 805               	; if tos is not zero, skip next 
 806               	; 
 807 0626 0000 0730 	HEADER "0BRANCH", "ZBRANCH", F_LEAP | F_CORE
 807      4252 414E 
 807      4348 
 808 0630 0000      	    NOOP 
 809 0632 BC01      	    movw nos_low, tos_low
 810 0634 9991 8991 	    pspull tos_low, tos_high
 811 0638 672B      	    or nos_low, nos_high
 812 063a 01F0      	    breq _branch 
 813               	    ; skips
 814 063c FD91 ED91 	    rspull zpm_low, zpm_high 
 815 0640 3296      	    adiw zpm_low, 2 
 816 0642 EE93 FE93 	    rspush zpm_low, zpm_high 
 817 0646 0C94 0000 	    POON
 818               	 
 819               	;----------------------------------------------------------------------
 820               	;
 821               	;  ok LIT ( -- w ), 
 822               	;  push a value from flash to data stack 
 823               	;  note auto increment in pmload
 824               	;
 825 064a 0000 034C 	HEADER "LIT", "LIT", F_LEAP | F_CORE
 825      4954 
 826 0650 0000      	    NOOP 
 827 0652 8A93 9A93 	    pspush tos_low, tos_high
 828 0656 FD91 ED91 	    rspull zpm_low, zpm_high
 829 065a EE0F FF1F 	    pmload tos_low, tos_high 
 829      8591 9591 
 829      F795 E795 
 830 0666 EE93 FE93 	    rspush zpm_low, zpm_high
 831 066a 0C94 0000 	    POON 
 832               	 
 833               	;----------------------------------------------------------------------
 834               	;
 835               	; ok ( w -- w ) 
 836               	;  data space pointer align to CELL, atmega is always 
 837               	;   eg. 0x05 to 0x06, two steps: 
 838               	;   1) round a cell down, 2) add one cell 
 839               	;
 840               	rounds = -1 * CELL_SIZE
 841               	
 842 066e 0000 0741 	HEADER "ALIGNED", "ALIGNED", F_LEAP | F_CORE
 842      4C49 474E 
 842      4544 
 843 0678 0000      	    NOOP 
 844 067a 8E7F      	    andi tos_low, -1 * CELL_SIZE 
 845 067c 0296      	    adiw tos_low, CELL_SIZE 
 846 067e 0C94 0000 	    POON 
 847               	 
 848               	;----------------------------------------------------------------------
 849               	;
 850               	; ok ( -- CELL ) 
 851               	; CELL is 2 ; size of a cell 
 852               	;
 853 0682 0000 0443 	HEADER "CELL", "CELL", F_LEAP | F_CORE
 853      454C 4C20 
 854 068a 0000      	    NOOP 
 855 068c 8A93 9A93 	    pspush tos_low, tos_high
 856 0690 82E0      	    ldi tos_low, CELL_SIZE 
 857 0692 9927      	    clr tos_high 
 858 0694 0C94 0000 	    POON 
 859               	 
 860               	;----------------------------------------------------------------------
 861               	;
 862               	; ok C! ( c a -- ) 
 863               	; only works in sram
 864               	;
 865 0698 0000 0243 	HEADER "C!", "CTO", F_LEAP | F_CORE
 865      2120 
 866 069e 0000      	    NOOP 
 867 06a0 FC01      	    movw zpm_low, tos_low
 868 06a2 9991 8991 	    pspull tos_low, tos_high
 869 06a6 8083      	    st Z, tos_low
 870 06a8 9991 8991 	    pspull tos_low, tos_high 
 871 06ac 0C94 0000 	    POON 
 872               	 
 873               	;----------------------------------------------------------------------
 874               	;
 875               	; ok C@ ( a -- c ) 
 876               	; only works in sram
 877               	;
 878 06b0 0000 0243 	HEADER "C@", "CAT", F_LEAP | F_CORE
 878      4020 
 879 06b6 0000      	    NOOP 
 880 06b8 FC01      	    movw zpm_low, tos_low
 881 06ba 8081      	    ld tos_low, Z
 882 06bc 9927      	    clr tos_high
 883 06be 0C94 0000 	    POON 
 884               	
 885               	;----------------------------------------------------------------------
 886               	;
 887               	; ok ( -- ) does a real absolute jump to address in TOS
 888               	;       how return from ? jmp _link
 889               	;
 890 06c2 0000 044A 	HEADER "JUMP", "JUMP", F_LEAP
 890      554D 5020 
 891 06ca 0000      	    NOOP 
 892               	; prepare, as LIT ???
 893               	;    rspull zpm_low, zpm_high
 894               	;    pmload tos_low, tos_high 
 895               	;    rspush zpm_low, zpm_high
 896               	; does it    
 897 06cc FC01      	    movw zpm_low, tos_low
 898 06ce 0994      	    ijmp 
 899               	
 900               	;----------------------------------------------------------------------
 901               	;
 902               	; ok ( -- 0 ) 
 903               	;
 904 06d0 0000 0130 	HEADER "0", "ZERO", F_LEAP | F_CORE
 905 06d4 0000      	    NOOP 
 906 06d6 8A93 9A93 	    pspush tos_low, tos_high 
 907 06da 8827      	    clr tos_low 
 908 06dc 9927      	    clr tos_high 
 909 06de 0C94 0000 	    POON 
 910               	 
 911               	;----------------------------------------------------------------------
 912               	;
 913               	; ok ( -- 1 ) 
 914               	;
 915 06e2 0000 0131 	HEADER "1", "ONE", F_LEAP | F_CORE
 916 06e6 0000      	    NOOP 
 917 06e8 8A93 9A93 	    pspush tos_low, tos_high 
 918 06ec 9927      	    clr tos_high 
 919 06ee 81E0      	    ldi tos_low, 1
 920 06f0 0C94 0000 	    POON 
 921               	
 922               	;----------------------------------------------------------------------
 923               	;
 924               	; ok ( -- 0 ) 
 925               	;
 926 06f4 0000 0132 	HEADER "2", "TWO", F_LEAP | F_CORE
 927 06f8 0000      	    NOOP 
 928 06fa 8A93 9A93 	    pspush tos_low, tos_high 
 929 06fe 9927      	    clr tos_high 
 930 0700 82E0      	    ldi tos_low, 2
 931 0702 0C94 0000 	    POON 
 932               	 
 933               	;----------------------------------------------------------------------
 934               	 
 143               	
 144               	;----------------------------------------------------------------------
 145               	.p2align 1, 0x00
 146               	#include "forth-twigs.S"
   1               	
   2               	/*
   3               	 *  DISCLAIMER
   4               	 *
   5               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   6               	 *
   7               	 *  Permission is hereby granted, free of charge, to any person obtaining
   8               	 *  a copy of this software and associated documentation files (the
   9               	 *  "Software"), to deal in the Software without restriction, including
  10               	 *  without limitation the rights to use, copy, modify, merge, publish,
  11               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  12               	 *  permit persons to whom the Software is furnished to do so, subject to
  13               	 *  the following conditions:
  14               	 *
  15               	 *  The above copyright notice and this permission notice shall be
  16               	 *  included in all copies or substantial portions of the Software.
  17               	 *
  18               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  19               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  20               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  21               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  22               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  23               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  24               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  25               	 *
  26               	 */
  27               	
  28               	;---------------------------------------------------------------------
  29               	;
  30               	;    A small Forth for ATmega8 
  31               	;
  32               	;---------------------------------------------------------------------
  33               	; dictionary structure 
  34               	;
  35               	; cell size is a word of 16 bits 
  36               	;
  37               	; .word  link    link to previous 
  38               	; .byte  size    sizeof name OR flags 
  39               	; .ascii "name"  name, plus a pad byte with BL (0x32) if size is even 
  40               	; .word  param,  many references 
  41               	;
  42               	;----------------------------------------------------------------------
  43               	 
  44               	;
  45               	; classics 
  46               	;
  48               	.LIST 
  49               	 
  50               	;********************************************************************** 
  51               	; FORTH
  52               	;
  53               	;    the follow definitions of compound words 
  54               	;    are as already compiled into a list of references, 
  55               	;    that is a sequence of cells. 
  56               	;    No preorder because the assembler does translation 
  57               	;    of names to address (references) 
  58               	;
  59               	;    (some adapted from old fig-forth and eforth istings) 
  60               	;
  61               	;********************************************************************** 
  62               	
  63               	;----------------------------------------------------------------------
  64               	;
  65               	; ok ( w a -- ) 
  66               	;	w = b1b2 ~~ [a] = b1, [a+1] = b2
  67               	; just write a word
  68               	;
  69 0706 0000 0245 	HEADER "E!", "ETO", F_LEAP
  69      2120 
  70 070c 0000 0000 	    .word OVER, OVER, ECTO, ONE, PLUS, TOR, ENDIAN, RTO, ECTO, ENDS   
  70      0000 0000 
  70      0000 0000 
  70      0000 0000 
  70      0000 0000 
  71               	
  72               	;----------------------------------------------------------------------
  73               	;
  74               	; ok ( a -- w ) 
  75               	;   [a] = b1, [a+1] = b2 ~~ w = b1b2
  76               	;   w1 0x00ff and, w2 0x00ff and, 
  77               	;   w1 = b100, w2 = b300, w2 endian, w2 = 00b3
  78               	;   w1 w2 or
  79               	;
  80 0720 0000 0245 	HEADER "E@", "EAT", F_LEAP
  80      4020 
  81 0726 0000 0000 	    .word DUP, ECAT, SWAP, ECAT
  81      0000 0000 
  82 072e 0000 FF00 	    .word LIT, 0x00FF, AND
  82      0000 
  83 0734 0000 0000 	    .word ENDIAN, SWAP
  84 0738 0000 FF00 	    .word LIT, 0x00FF, AND
  84      0000 
  85 073e 0000 0000 	    .word OR, ENDS
  86               	
  87               	;********************************************************************** 
  88               	;
  89               	;   stack words
  90               	;
  91               	;----------------------------------------------------------------------
  92               	;
  93               	; ok ( w2 w1 -- w1 ) 
  94               	;
  95 0742 0000 034E 	HEADER "NIP", "NIP",
  95      4950 
  96 0748 0000 0000 	    .word SWAP, DROP, ENDS 
  96      0000 
  97               	 
  98               	;----------------------------------------------------------------------
  99               	;
 100               	; ok ( w3 w2 w1 -- w2 w3 w1 ) 
 101               	;
 102 074e 0000 0453 	HEADER "SWIP", "SWIP",
 102      5749 5020 
 103 0756 0000 0000 	    .word TOR, SWAP, RTO, ENDS 
 103      0000 0000 
 104               	 
 105               	;----------------------------------------------------------------------
 106               	;
 107               	; ok ( w2 w1 -- w2 w1 w2 ) 
 108               	; moved to primitives
 109               	;HEADER "OVER", "OVER",
 110               	;    .word TOR, DUP, RTO, SWAP, ENDS 
 111               	 
 112               	;----------------------------------------------------------------------
 113               	;
 114               	; ok ( w3 w2 w1 -- w2 w1 w3 ) 
 115               	;
 116 075e 0000 0352 	HEADER "ROT", "ROTU",
 116      4F54 
 117 0764 0000 0000 	    .word SWIP, SWAP, ENDS 
 117      0000 
 118               	 
 119               	;----------------------------------------------------------------------
 120               	;
 121               	; ok ( w3 w2 w1 -- w1 w3 w2 ) 
 122               	;
 123 076a 0000 042D 	HEADER "-ROT", "ROTD",
 123      524F 5420 
 124 0772 0000 0000 	    .word SWAP, SWIP, ENDS 
 124      0000 
 125               	 
 126               	;----------------------------------------------------------------------
 127               	;
 128               	; ok ( w2 w1 --  w1 w2 w1 ) 
 129               	;
 130 0778 0000 0454 	HEADER "TUCK", "TUCK",
 130      5543 4B20 
 131 0780 0000 0000 	    .word SWAP, OVER, ENDS 
 131      0000 
 132               	 
 133               	;----------------------------------------------------------------------
 134               	;
 135               	; ok ( w3 w2 w1 --  w1 w2 w3 ) 
 136               	;
 137 0786 0000 0446 	HEADER "FLIP", "FLIP",
 137      4C49 5020 
 138 078e 0000 0000 	    .word SWAP, SWIP, SWAP, ENDS 
 138      0000 0000 
 139               	
 140               	;----------------------------------------------------------------------
 141               	;
 142               	; ok ( w1 w2 -- 0 | -1) 
 143               	;
 144 0796 0000 013D 	HEADER "=", "EQUAL",
 145 079a 0000 0000 	    .word MINUS, ZEQU, ENDS 
 145      0000 
 146               	 
 147               	;----------------------------------------------------------------------
 148               	;
 149               	; ok ( w1 w2 -- 0 | -1) 
 150               	;
 151 07a0 0000 023C 	HEADER "<>", "NOTEQUAL",
 151      3E20 
 152 07a6 0000 0000 	    .word EQUAL, INVERT, ENDS 
 152      0000 
 153               	 
 154               	;----------------------------------------------------------------------
 155               	;
 156               	; ok ( w1 w2 -- 0 | -1 ) 
 157               	; w1 > w2
 158 07ac 0000 013E 	HEADER ">", "GTHAN",
 159 07b0 0000 0000 	    .word SWAP, LTHAN, ENDS 
 159      0000 
 160               	 
 161               	;----------------------------------------------------------------------
 162               	;  ok 0>  must be signed 
 163               	;
 164 07b6 0000 0230 	HEADER "0>", "ZEROGT",
 164      3E20 
 165 07bc 0000 0000 	     .word ZERO, LTHAN, ENDS 
 165      0000 
 166               	 
 167               	;----------------------------------------------------------------------
 168               	;  ok 0< must be signed 
 169               	;
 170 07c2 0000 0230 	HEADER "0<", "ZEROLT",
 170      3C20 
 171 07c8 0000 0000 	    .word ZERO, SWAP, LTHAN, ENDS 
 171      0000 0000 
 172               	 
 173               	;----------------------------------------------------------------------
 174               	;
 175               	; ok ( w -- w * CELL  ) 
 176               	; CELL is 2, multiply by 2, easy way 
 177               	;
 178 07d0 0000 0543 	HEADER "CELLS", "CELLS",
 178      454C 4C53 
 179 07d8 0000 0000 	    .word SHL, ENDS 
 180               	 
 181               	;----------------------------------------------------------------------
 182               	;
 183               	; ok ( w -- w + CELL ) 
 184               	;
 185 07dc 0000 0543 	HEADER "CELL+", "CELLPLUS",
 185      454C 4C2B 
 186 07e4 0000 0000 	    .word CELL, PLUS, ENDS 
 186      0000 
 187               	 
 188               	;----------------------------------------------------------------------
 189               	;
 190               	; ok ( w -- w - CELL ) 
 191               	;
 192 07ea 0000 0543 	HEADER "CELL-", "CELLMINUS",
 192      454C 4C2D 
 193 07f2 0000 0000 	    .word CELL, MINUS, ENDS 
 193      0000 
 194               	 
 195               	;----------------------------------------------------------------------
 196               	;
 197               	; ok ( w -- w + 1 ) 
 198               	;
 199 07f8 0000 0231 	HEADER "1+", "ONEPLUS",
 199      2B20 
 200 07fe 0000 0000 	     .word ONE, PLUS, ENDS 
 200      0000 
 201               	 
 202               	;----------------------------------------------------------------------
 203               	;
 204               	; ok ( w -- w - 1 ) 
 205               	;
 206 0804 0000 0231 	HEADER "1-", "ONEMINUS",
 206      2D20 
 207 080a 0000 0000 	     .word ONE, MINUS, ENDS 
 207      0000 
 208               	 
 209               	;----------------------------------------------------------------------
 210               	;
 211               	; ok ( w -- w + 2 ) 
 212               	;
 213 0810 0000 0232 	HEADER "2+", "TWOPLUS",
 213      2B20 
 214 0816 0000 0000 	     .word TWO, PLUS, ENDS 
 214      0000 
 215               	 
 216               	;----------------------------------------------------------------------
 217               	;
 218               	; ok ( w -- w - 2 ) 
 219               	;
 220 081c 0000 0232 	HEADER "2-", "TWOMINUS",
 220      2D20 
 221 0822 0000 0000 	     .word TWO, MINUS, ENDS 
 221      0000 
 222               	 
 223               	;----------------------------------------------------------------------
 224               	;
 225               	; ok ( u w -- ) 
 226               	;
 227 0828 0000 022B 	HEADER "+!", "PLUSTO",
 227      2120 
 228 082e 0000 0000 	    .word DUP, TOR, AT, PLUS, RTO, TO, ENDS 
 228      0000 0000 
 228      0000 0000 
 228      0000 
 229               	 
 230               	;----------------------------------------------------------------------
 231               	;
 232               	; ok ( w -- w + 1 ) 
 233               	;
 234 083c 0000 0543 	HEADER "CHAR+", "CHARPLUS",
 234      4841 522B 
 235 0844 0000 0000 	    .word ONEPLUS, ENDS 
 236               	 
 237               	;----------------------------------------------------------------------
 238               	;
 239               	; ok ( w -- w - 1 ) 
 240               	;
 241 0848 0000 0543 	HEADER "CHAR-", "CHARMINUS",
 241      4841 522D 
 242 0850 0000 0000 	    .word ONEMINUS, ENDS 
 243               	 
 244               	;----------------------------------------------------------------------
 245               	;
 246               	; ok ( w -- w ) 
 247               	;   char is 1, then does nothing
 248               	;
 249 0854 0000 0543 	HEADER "CHARS", "CHARS",
 249      4841 5253 
 250 085c 0000      	    .word ENDS 
 251               	 
 252               	;********************************************************************** 
 253               	;
 254               	;    load variables 
 255               	;
 256               	;----------------------------------------------------------------------
 257               	;
 258               	; ok ( -- w) 
 259               	;
 260 085e 0000 0354 	HEADER "TIB", "TIB",
 260      4942 
 261 0864 0000 0000 	    .word LIT, TIB0, ENDS
 261      0000 
 262 086a 0C94 0000 	    POON 
 263               	 
 264               	;----------------------------------------------------------------------
 265               	;
 266               	; ok ( -- w) 
 267               	;
 268 086e 0000 0553 	HEADER "STATE", "STATE",
 268      5441 5445 
 269 0876 0000 0000 	    .word LIT, STAT, ENDS 
 269      0000 
 270               	 
 271               	;----------------------------------------------------------------------
 272               	;
 273               	; ok ( -- w) 
 274               	;
 275 087c 0000 0442 	HEADER "BASE", "BASE",
 275      4153 4520 
 276 0884 0000 0000 	    .word LIT, BASE, ENDS
 276      0000 
 277               	 
 278               	;----------------------------------------------------------------------
 279               	;
 280               	; ok ( -- w) 
 281               	;   keep PS for checks
 282 088a 0000 0343 	HEADER "CSP", "CSP",
 282      5350 
 283 0890 0000 0000 	    .word LIT, CSPP, ENDS
 283      0000 
 284               	 
 285               	;----------------------------------------------------------------------
 286               	;
 287               	; ok ( -- w) 
 288               	;
 289 0896 0000 0245 	HEADER "EP", "EPP",
 289      5020 
 290 089c 0000 0000 	    .word LIT, VEP, ENDS
 290      0000 
 291               	 
 292               	;----------------------------------------------------------------------
 293               	;
 294               	; ok ( -- w) 
 295               	;
 296 08a2 0000 0244 	HEADER "DP", "DPP",
 296      5020 
 297 08a8 0000 0000 	    .word LIT, VDP, ENDS
 297      0000 
 298               	 
 299               	;----------------------------------------------------------------------
 300               	;
 301               	; ok ( -- w) 
 302               	;
 303 08ae 0000 0248 	HEADER "HP", "HPP",
 303      5020 
 304 08b4 0000 0000 	    .word LIT, VHP, ENDS
 304      0000 
 305               	 
 306               	;----------------------------------------------------------------------
 307               	;
 308               	; ok ( -- w) 
 309               	; stack for variables from end of stacks
 310               	;
 311 08ba 0000 0255 	HEADER "UP", "UPP",
 311      5020 
 312 08c0 0000 0000 	    .word LIT, VUP, ENDS
 312      0000 
 313               	 
 314               	;----------------------------------------------------------------------
 315               	;
 316               	; ok ( -- w) 
 317               	; buffer for user, att not updates UP
 318               	;
 319 08c6 0000 0442 	HEADER "BUFF", "BUFF",
 319      5546 4620 
 320 08ce 0000 0000 	    .word UPP, SWAP, MINUS, ENDS
 320      0000 0000 
 321               	 
 322               	;----------------------------------------------------------------------
 323               	;
 324               	; ok ( -- w) 
 325               	; buffer for user, shares variables
 326               	;
 327 08d6 0000 0350 	HEADER "PAD", "PAD",
 327      4144 
 328 08dc 0000 4800 	    .word LIT, PAD_SIZE, BUFF, ENDS
 328      0000 0000 
 329               	 
 330               	;----------------------------------------------------------------------
 331               	;
 332               	; ok ( -- w) 
 333               	;
 334               	;HEADER "RS$", "RSIS",
 335               	;    .word LIT, RS0, ENDS
 336               	 
 337               	;----------------------------------------------------------------------
 338               	;
 339               	; ok ( -- w) 
 340               	;
 341               	;HEADER "PS$", "PSIS",
 342               	;    .word LIT, PS0, ENDS
 343               	 
 344               	
 345               	;----------------------------------------------------------------------
 346               	;
 347               	; ok ( -- w) 
 348               	;
 349 08e4 0000 0544 	HEADER "DEPTH", "DEPTH",
 349      4550 5448 
 350 08ec 0000 0000 	    .word PSAT, LIT, PS0, MINUS, ENDS
 350      0000 0000 
 350      0000 
 351               	 
 352               	;----------------------------------------------------------------------
 353               	;
 354               	; ok ( -- w) 
 355               	;
 356 08f6 0000 0652 	HEADER "RDEPTH", "RDEPTH",
 356      4445 5054 
 356      4820 
 357 0900 0000 0000 	    .word RSAT, LIT, RS0, MINUS, ENDS
 357      0000 0000 
 357      0000 
 358               	 
 359               	
 360               	;********************************************************************** 
 361               	; 
 362               	;   vocabulary words
 363               	;
 364               	;   just a hook, not using, in AVR only one vocabulary
 365               	;
 366               	;----------------------------------------------------------------------
 367 090a 0000 0743 	HEADER "CURRENT", "CURRENT",
 367      5552 5245 
 367      4E54 
 368 0914 0000 0000 	    .word LIT, CURR, ENDS
 368      0000 
 369               	
 370               	;----------------------------------------------------------------------
 371 091a 0000 0743 	HEADER "CONTEXT", "CONTEXT",
 371      4F4E 5445 
 371      5854 
 372 0924 0000 0000 	    .word LIT, CTXT, ENDS
 372      0000 
 373               	
 374               	;----------------------------------------------------------------------
 375 092a 0000 0B44 	HEADER "DEFINITIONS", "DEFINITIONS",
 375      4546 494E 
 375      4954 494F 
 375      4E53 
 376 0938 0000 0000 	    .word CONTEXT, AT, CURRENT, TO, ENDS
 376      0000 0000 
 376      0000 
 377               	
 378               	;----------------------------------------------------------------------
 379 0942 0000 064C 	HEADER "LATEST", "LATEST",
 379      4154 4553 
 379      5420 
 380 094c 0000 0000 	    .word LIT, LAST, ENDS
 380      0000 
 381               	 
 382               	;********************************************************************** 
 383               	; 
 384               	;   basic words
 385               	;
 386               	;----------------------------------------------------------------------
 387               	;   strange changes ?
 388               	;   all compilation is done in sram, then need a trick
 389               	;
 390               	;   up is a pointer to next free cell in sram, from the end of TIB
 391               	;   dp is a pointer to next free cell in flash
 392               	;   hp is a pointer to next free cell in sram, syncronous with dp 
 393               	;
 394               	;   here return where dp is, used for absolute branch and zbranch,
 395               	;   uhere returns where hp is, used for place in sram,
 396               	;   comma writes in sram, and allot updates up and dp pointers
 397               	;   when done to write sram to flash
 398               	;
 399               	;----------------------------------------------------------------------
 400               	;
 401               	; ok HERE ( -- w ) 
 402               	;
 403 0952 0000 0555 	HEADER "UHERE", "UHERE",
 403      4845 5245 
 404 095a 0000 0000 	    .word HPP, AT, ENDS 
 404      0000 
 405               	 
 406               	;----------------------------------------------------------------------
 407               	;
 408               	; ok HERE ( -- w ) 
 409               	;
 410 0960 0000 0448 	HEADER "HERE", "HERE", F_CORE
 410      4552 4520 
 411 0968 0000 0000 	    .word DPP, AT, ENDS 
 411      0000 
 412               	 
 413               	;----------------------------------------------------------------------
 414               	;
 415               	; ok ALLOT ( u -- ) 
 416               	; not standart: updates DP and UP
 417               	 
 418 096e 0000 0541 	HEADER "ALLOT", "ALLOT", F_CORE
 418      4C4C 4F54 
 419 0976 0000      	    .word DUP
 420 0978 0000 0000 	    .word HPP, AT, PLUS, HPP, TO 
 420      0000 0000 
 420      0000 
 421 0982 0000 0000 	    .word DPP, AT, PLUS, DPP, TO 
 421      0000 0000 
 421      0000 
 422 098c 0000      	    .word ENDS 
 423               	 
 424               	;----------------------------------------------------------------------
 425               	;
 426               	; is ALIGN 
 427               	; not standart: updates DP and UP
 428               	;
 429 098e 0000 0541 	HEADER "ALIGN", "ALIGN", F_CORE
 429      4C49 474E 
 430 0996 0000 0000 	    .word HPP, AT, ALIGNED, HPP, TO
 430      0000 0000 
 430      0000 
 431 09a0 0000 0000 	    .word DPP, AT, ALIGNED, DPP, TO
 431      0000 0000 
 431      0000 
 432 09aa 0000      	    .word ENDS 
 433               	 
 434               	;----------------------------------------------------------------------
 435               	;
 436               	; ok CCOMMA ( w -- ) 
 437               	;
 438 09ac 0000 4243 	HEADER "C,", "CCOMMA", F_IMMEDIATE | F_CORE
 438      2C20 
 439 09b2 0000 0000 	    .word UHERE, CTO, ONE, ALLOT, ENDS 
 439      0000 0000 
 439      0000 
 440               	 
 441               	;----------------------------------------------------------------------
 442               	;
 443               	; ok COMMMA ( w -- ) 
 444               	;
 445 09bc 0000 412C 	HEADER ",", "COMMA", F_IMMEDIATE | F_CORE
 446 09c0 0000 0000 	    .word UHERE, TO, CELL, ALLOT, ENDS 
 446      0000 0000 
 446      0000 
 447               	 
 448               	;----------------------------------------------------------------------
 449               	;
 450               	; ok TOMMA ( a2 a1 -- ) 
 451               	; not standart, no updates DP or UP, 
 452               	;   just do TO (a2 a1-a2+UP -- )
 453               	;
 454 09ca 0000 423C 	HEADER "<,", "TOMMA", F_IMMEDIATE
 454      2C20 
 455 09d0 0000 0000 	    .word OVER, MINUS, UHERE, PLUS, TO, ENDS 
 455      0000 0000 
 455      0000 0000 
 456               	 
 457               	;-------------------------------------'---------------------------------
 458               	;
 459               	; is DOVAR ( -- a ), place the address of next cell into stack, 
 460               	;   R> DUP 2+ >R
 461               	;
 462               	;	note: the address is at flash, then if is a reference to a value
 463               	;	it must be de-referenced to sram 
 464               	;	      
 465 09dc 0000 0544 	HEADER "DOVAR", "DOVAR",
 465      4F56 4152 
 466 09e4 0000 0000 	    .word RTO, DUP, TWOPLUS, TOR, ENDS 
 466      0000 0000 
 466      0000 
 467               	 
 468               	;-------------------------------------'---------------------------------
 469               	;
 470               	; is DOCON ( -- a ), place the contents of next cell into stack, 
 471               	;   R> DUP 2+ >R @
 472               	;
 473               	;	note: the address is at flash, then if is a reference
 474               	;   to a value, it must be de-referenced (ATAT) to sram 
 475               	;
 476 09ee 0000 0544 	HEADER "DOCON", "DOCON",
 476      4F43 4F4E 
 477 09f6 0000 0000 	    .word DOVAR, ATAT, AT, ENDS 
 477      0000 0000 
 478               	
 479               	;----------------------------------------------------------------------
 480               	;
 481               	; is LITERAL ( w -- ) 
 482               	;
 483 09fe 0000 074C 	HEADER "LITERAL", "LITERAL", F_CORE
 483      4954 4552 
 483      414C 
 484 0a08 0000 0000 	    .word LIT, LIT, COMMA, COMMA, ENDS 
 484      0000 0000 
 484      0000 
 485               	 
 486               	;----------------------------------------------------------------------
 487               	;
 488               	; is ['] ( w -- ) 
 489               	; zzzz
 490 0a12 0000 035B 	HEADER "[']", "KTICK", F_CORE
 490      275D 
 491 0a18 0000 0000 	    .word LIT, LIT, COMMA, ENDS 
 491      0000 0000 
 492               	 
 493               	;----------------------------------------------------------------------
 494               	;
 495               	; ok this puts next cell into stack and compiles into HERE 
 496               	; used only in precompiled sources as forth-twigs
 497               	; 
 498 0a20 0000 4443 	HEADER "COMP", "COMP", F_IMMEDIATE
 498      4F4D 5020 
 499 0a28 0000 0000 	    .word RTO, DUP, CELLPLUS, TOR, ATAT, COMMA, ENDS 
 499      0000 0000 
 499      0000 0000 
 499      0000 
 500               	 
 501               	;----------------------------------------------------------------------
 502               	;
 503               	; ok compile a eow 
 504               	;
 505 0a36 0000 4445 	HEADER "EXIT", "EXIT", F_IMMEDIATE
 505      5849 5420 
 506 0a3e 0000 0000 	    .word COMP, ENDS, ENDS
 506      0000 
 507               	
 508               	;----------------------------------------------------------------------
 509               	;
 510               	; ok execute xt from tos
 511               	;
 512 0a44 0000 4745 	HEADER "EXECUTE", "EXEC", F_IMMEDIATE
 512      5845 4355 
 512      5445 
 513 0a4e 0000 0000 	    .word TOR, ENDS
 514               	
 515               	;----------------------------------------------------------------------
 516               	;
 517               	; ok make a word recursive 
 518               	; recursive return to last 
 519               	;
 520 0a52 0000 0454 	HEADER "TAIL", "TAIL", 
 520      4149 4C20 
 521 0a5a 0000 0000 	    .word RAT, CELL, MINUS, TOR, ENDS
 521      0000 0000 
 521      0000 
 522               	
 523               	;----------------------------------------------------------------------
 524               	;
 525               	; Control words review. BRANCH and ZBRANCH are absolute references.
 526               	;
 527               	;----------------------------------------------------------------------
 528               	 
 529               	;----------------------------------------------------------------------
 530               	;
 531               	; ok MARKTO 
 532               	; places a address of cell
 533               	; places to address to self in a holder, 
 534               	; and left address of holder at stack
 535               	;
 536 0a64 0000 664D 	HEADER "MARKTO", "MARKTO", F_IMMEDIATE | F_COMPILE,
 536      4152 4B54 
 536      4F20 
 537 0a6e 0000 0000 	    .word HERE, DUP, COMMA, ENDS 
 537      0000 0000 
 538               	 
 539               	;----------------------------------------------------------------------
 540               	;
 541               	; ok TOMARK 
 542               	; places a address of cell 
 543               	; resolves a back reference to last holder 
 544               	; and places a address to self at holder 
 545 0a76 0000 6654 	HEADER "TOMARK", "TOMARK", F_IMMEDIATE | F_COMPILE,
 545      4F4D 4152 
 545      4B20 
 546 0a80 0000 0000 	    .word HERE, SWAP, TOMMA, ENDS 
 546      0000 0000 
 547               	 
 548               	;----------------------------------------------------------------------
 549               	;
 550               	; ok BEGIN 
 551               	;
 552 0a88 0000 6542 	HEADER "BEGIN", "BEGIN", F_IMMEDIATE | F_COMPILE,
 552      4547 494E 
 553 0a90 0000 0000 	    .word HERE, ENDS 
 554               	 
 555               	;----------------------------------------------------------------------
 556               	;
 557               	; ok AGAIN resolves a unconditional branch 
 558               	;
 559 0a94 0000 6541 	HEADER "AGAIN", "AGAIN", F_IMMEDIATE | F_COMPILE,
 559      4741 494E 
 560 0a9c 0000 0000 	    .word COMP, BRANCH, COMMA, ENDS 
 560      0000 0000 
 561               	 
 562               	;----------------------------------------------------------------------
 563               	;
 564               	; ok UNTIL resolves a conditional branch, as C do { ... } while (0) 
 565               	;
 566 0aa4 0000 6555 	HEADER "UNTIL", "UNTIL", F_IMMEDIATE | F_COMPILE,
 566      4E54 494C 
 567 0aac 0000 0000 	    .word COMP, ZBRANCH, COMMA, ENDS 
 567      0000 0000 
 568               	 
 569               	;----------------------------------------------------------------------
 570               	;
 571               	; ok UNLESS 
 572               	;
 573 0ab4 0000 6655 	HEADER "UNLESS", "UNLESS", F_IMMEDIATE | F_COMPILE, 
 573      4E4C 4553 
 573      5320 
 574 0abe 0000 0000 	    .word ZEQU, UNTIL, ENDS 
 574      0000 
 575               	 
 576               	;----------------------------------------------------------------------
 577               	;
 578               	; ok IF (executed if tos is not zero)
 579               	;
 580 0ac4 0000 6249 	HEADER "IF", "IF", F_IMMEDIATE | F_COMPILE,
 580      4620 
 581 0aca 0000 0000 	    .word COMP, ZBRANCH, MARKTO, ENDS 
 581      0000 0000 
 582               	 
 583               	;----------------------------------------------------------------------
 584               	;
 585               	; ok GO (executed ever)
 586               	;
 587 0ad2 0000 6247 	HEADER "GO", "GO", F_IMMEDIATE | F_COMPILE,
 587      4F20 
 588 0ad8 0000 0000 	    .word COMP, BRANCH, MARKTO, ENDS 
 588      0000 0000 
 589               	 
 590               	;----------------------------------------------------------------------
 591               	;
 592               	; ok THEN 
 593               	;
 594 0ae0 0000 6454 	HEADER "THEN", "THEN", F_IMMEDIATE | F_COMPILE,
 594      4845 4E20 
 595 0ae8 0000 0000 	    .word ENDIF, ENDS 
 596               	 
 597               	;----------------------------------------------------------------------
 598               	;
 599               	; ok ENDIF resolves a forward branch 
 600               	;
 601 0aec 0000 6545 	HEADER "ENDIF", "ENDIF", F_IMMEDIATE | F_COMPILE,
 601      4E44 4946 
 602 0af4 0000 0000 	    .word TOMARK, ENDS 
 603               	 
 604               	;----------------------------------------------------------------------
 605               	;
 606               	; ok ELSE (executed if tos is zero)
 607               	;
 608 0af8 0000 6445 	HEADER "ELSE", "ELSE", F_IMMEDIATE | F_COMPILE,
 608      4C53 4520 
 609 0b00 0000 0000 	    .word GO, SWAP, TOMARK, ENDS 
 609      0000 0000 
 610               	 
 611               	;----------------------------------------------------------------------
 612               	;
 613               	; ok WHILE 
 614               	;
 615 0b08 0000 6557 	HEADER "WHILE", "WHILE", F_IMMEDIATE | F_COMPILE,
 615      4849 4C45 
 616 0b10 0000 0000 	    .word IF, SWAP, ENDS 
 616      0000 
 617               	 
 618               	;----------------------------------------------------------------------
 619               	;
 620               	; ok REPEAT 
 621               	;
 622 0b16 0000 6652 	HEADER "REPEAT", "REPEAT", F_IMMEDIATE | F_COMPILE,
 622      4550 4541 
 622      5420 
 623 0b20 0000 0000 	    .word AGAIN, TOMARK, ENDS 
 623      0000 
 624               	 
 625               	 
 626               	;----------------------------------------------------------------------
 627               	; @eforth
 628               	; is AHEAD (a forward goto)
 629               	;
 630 0b26 0000 6541 	HEADER "AHEAD", "AHEAD", F_IMMEDIATE | F_COMPILE,
 630      4845 4144 
 631 0b2e 0000 0000 	    .word GO, ENDS 
 632               	 
 633               	;----------------------------------------------------------------------
 634               	; @eforth
 635               	; is AFT 
 636               	;
 637 0b32 0000 6341 	HEADER "AFT", "AFT", F_IMMEDIATE | F_COMPILE,
 637      4654 
 638 0b38 0000 0000 	    .word DROP, GO, HERE, SWAP, ENDS 
 638      0000 0000 
 638      0000 
 639               	 
 640               	;----------------------------------------------------------------------
 641               	;
 642               	; is HOOK 
 643               	;
 644 0b42 0000 6448 	HEADER "HOOK", "HOOK", F_IMMEDIATE | F_COMPILE,
 644      4F4F 4B20 
 645 0b4a 0000 0000 	    .word BEGIN, TOR, ENDS 
 645      0000 
 646               	 
 647               	;----------------------------------------------------------------------
 648               	;
 649               	; is BACK 
 650               	;
 651 0b50 0000 6442 	HEADER "BACK", "BACK", F_IMMEDIATE | F_COMPILE,
 651      4143 4B20 
 652 0b58 0000 0000 	    .word RTO, AGAIN, ENDS 
 652      0000 
 653               	 
 654               	;----------------------------------------------------------------------
 655               	;
 656               	; is FOR ( u -- h ; -- u )
 657               	; count down, from +32767
 658 0b5e 0000 4346 	HEADER "FOR", "FOR", F_IMMEDIATE
 658      4F52 
 659 0b64 0000 0000 	    .word COMP, TOR, BEGIN, ENDS 
 659      0000 0000 
 660               	 
 661               	;----------------------------------------------------------------------
 662               	;
 663               	; is TXEN ( -- ; -- u ) 
 664               	;
 665 0b6c 0000 0454 	HEADER "TXEN", "TXEN", 
 665      5845 4E20 
 666 0b74 0000 0000 	    .word RTO, ONEMINUS
 667 0b78 0000 0000 	    .word DUP, ZBRANCH, 1f  
 667      0000 
 668 0b7e 0000      	    .word TOR 
 669 0b80 0000      	1:  .word ENDS
 670               	
 671               	;----------------------------------------------------------------------
 672               	;
 673               	; is NEXT ( h -- ) R:( -- h u ) 
 674               	;
 675 0b82 0000 444E 	HEADER "NEXT", "NEXT", F_IMMEDIATE
 675      4558 5420 
 676 0b8a 0000 0000 	    .word COMP, TXEN, UNLESS, ENDS
 676      0000 0000 
 677               	
 678               	;----------------------------------------------------------------------
 679               	; rever zzzz
 680               	/*
 681               	\ CASE's implementation imported from Gforth.
 682               	\
 683               	\ Usage
 684               	\ ( n )
 685               	\ CASE
 686               	\    1 OF .... ENDOF
 687               	\    2 OF .... ENDOF
 688               	\    OTHERWISE
 689               	\ END-CASE
 690               	\
 691               	\ Remember not to consume the element in the OTHERWISE case.
 692               	*/
 693               	;----------------------------------------------------------------------
 694               	;
 695               	; is CASE ( a -- )
 696               	;
 697 0b92 0000 4443 	HEADER "CASE", "CASE", F_IMMEDIATE
 697      4153 4520 
 698 0b9a 0000 0000 	    .word ZERO, ENDS
 699               	
 700               	;----------------------------------------------------------------------
 701               	;
 702               	; is OF ( -- )
 703               	;
 704 0b9e 0000 424F 	HEADER "OF", "OF", F_IMMEDIATE
 704      4620 
 705 0ba4 0000 0000 	    .word ONEPLUS, COMP, OVER, COMP, EQUAL, COMP, IF, COMP, DROP, ENDS
 705      0000 0000 
 705      0000 0000 
 705      0000 0000 
 705      0000 0000 
 706               	
 707               	;----------------------------------------------------------------------
 708               	;
 709               	; is ENDOF ( -- )
 710               	;
 711 0bb8 0000 4545 	HEADER "ENDOF", "ENDOF", F_IMMEDIATE
 711      4E44 4F46 
 712 0bc0 0000 0000 	    .word COMP, ELSE, ENDS
 712      0000 
 713               	
 714               	;----------------------------------------------------------------------
 715               	;
 716               	; is DEFAULT ( -- )
 717               	;
 718 0bc6 0000 4744 	HEADER "DEFAULT", "DEFAULT", F_IMMEDIATE
 718      4546 4155 
 718      4C54 
 719 0bd0 0000 0000 	    .word COMP, FTRUE, COMP, IF, COMP, DROP, ENDS
 719      0000 0000 
 719      0000 0000 
 719      0000 
 720               	
 721               	;----------------------------------------------------------------------
 722               	;
 723               	; is ENDCASE ( n -- ) 
 724               	;
 725 0bde 0000 4745 	HEADER "ENDCASE", "ENDCASE", F_IMMEDIATE
 725      4E44 4341 
 725      5345 
 726 0be8 0000 0000 	    .word COMP, DROP 
 727 0bec 0000 0000 	    .word FOR, COMP, THEN, NEXT, ENDS
 727      0000 0000 
 727      0000 
 728               	
 729               	;----------------------------------------------------------------------
 730               	;
 731               	; is DOIT ( n m -- ; -- m+0x8000 m+0x8000-n ) 
 732               	; counts from n to m
 733 0bf6 0000 0444 	HEADER "DOIT", "DOIT", 
 733      4F49 5420 
 734               	    ; forth-83 0x8000 trick
 735               	    ; .word HERE, TOR, DOCON, 0x8000, PLUS, DUP, TOR, MINUS, TOR, ENDS
 736 0bfe 0000 0080 	    .word LIT, 0x8000, PLUS, DUP, TOR, MINUS, TOR, ENDS
 736      0000 0000 
 736      0000 0000 
 736      0000 0000 
 737               	    ; .word TOR, TOR, ENDS
 738               	
 739               	;----------------------------------------------------------------------
 740               	;
 741               	; is LOOPN ( k -- true | false ; m n -- m n+k ) 
 742               	;
 743 0c0e 0000 062B 	HEADER "+LOOPI", "LOOPN", 
 743      4C4F 4F50 
 743      4920 
 744 0c18 0000 0000 	    .word RTO, PLUS, RTO, OVER, OVER ; ( n+k m k )
 744      0000 0000 
 744      0000 
 745 0c22 0000 0000 	    .word LTHAN, ZBRANCH, 6f
 745      0000 
 746               	4:  
 747 0c28 0000 0000 	    .word RTO, RTO, FTRUE, ENDS
 747      0000 0000 
 748               	6:  
 749 0c30 0000 0000 	    .word DROP, DROP, FFALSE, ENDS 
 749      0000 0000 
 750               	
 751               	;----------------------------------------------------------------------
 752               	;
 753               	; is LOOPI ( k -- f ; m n -- m n+k false | true) 
 754               	;
 755 0c38 0000 054C 	HEADER "LOOPI", "LOOPI", 
 755      4F4F 5049 
 756 0c40 0000 0000 	    .word ONE, LOOPN, ENDS
 756      0000 
 757               	
 758               	;----------------------------------------------------------------------
 759               	;
 760               	; is DO ( n m -- ; --  m n ) 
 761               	; counts from n to m
 762               	;
 763 0c46 0000 4244 	HEADER "DO", "DO", F_IMMEDIATE
 763      4F20 
 764 0c4c 0000 0000 	    .word COMP, DOIT, BEGIN, ENDS
 764      0000 0000 
 765               	
 766               	;----------------------------------------------------------------------
 767               	;
 768               	; is I (  -- n ; m n -- m n ) 
 769               	;
 770 0c54 0000 0149 	HEADER "I", "I", 
 771 0c58 0000 0000 	    .word RTO, DUP, TOR, ENDS
 771      0000 0000 
 772               	
 773               	;----------------------------------------------------------------------
 774               	;
 775               	; is j (  -- n ; m n -- m n ) 
 776               	;
 777 0c60 0000 014A 	HEADER "J", "J", 
 778 0c64 0000 0000 	    .word RTO, RTO, RTO, DUP, TOR, TOR, TOR, ENDS
 778      0000 0000 
 778      0000 0000 
 778      0000 0000 
 779               	
 780               	;----------------------------------------------------------------------
 781               	;
 782               	; is LEAVE ( n m -- ; -- n m ) 
 783               	;   old way, runs last one
 784               	;
 785 0c74 0000 454C 	HEADER "LEAVE", "LEAVE", F_IMMEDIATE
 785      4541 5645 
 786 0c7c 0000 0000 	    .word UNLOOP, EXIT, ENDS
 786      0000 
 787               	
 788               	;----------------------------------------------------------------------
 789               	;
 790               	; is LOOP ( -- ; -- m n+1 ) 
 791               	;
 792 0c82 0000 444C 	HEADER "LOOP", "LOOP", F_IMMEDIATE
 792      4F4F 5020 
 793 0c8a 0000 0000 	    .word COMP, LOOPI, UNTIL, ENDS
 793      0000 0000 
 794               	
 795               	;----------------------------------------------------------------------
 796               	;
 797               	; is LOOP ( k -- ; -- m n+k ) 
 798               	;
 799 0c92 0000 452B 	HEADER "+LOOP", "PLOOP", F_IMMEDIATE
 799      4C4F 4F50 
 800 0c9a 0000 0000 	    .word COMP, LOOPN, UNTIL, ENDS
 800      0000 0000 
 801               	
 802               	;----------------------------------------------------------------------
 803               	;
 804               	; is UNLOOP ( -- ; -- m n+1 ) 
 805               	;
 806 0ca2 0000 4655 	HEADER "UNLOOP", "UNLOOP", F_IMMEDIATE
 806      4E4C 4F4F 
 806      5020 
 807 0cac 0000 0000 	    .word RTO, RTO, DROP, DROP, ENDS
 807      0000 0000 
 807      0000 
 808               	
 809               	;**********************************************************************
 810               	;----------------------------------------------------------------------
 811               	;
 812               	; is  ( a u -- )
 813               	;
 814 0cb6 0000 0243 	HEADER "CR", "CR",
 814      5220 
 815 0cbc 0000 0D00 	    .word LIT, 0x0D, EMIT, ENDS
 815      0000 0000 
 816               	
 817               	;----------------------------------------------------------------------
 818               	;
 819               	; is  ( a u -- )
 820               	;
 821 0cc4 0000 024C 	HEADER "LF", "LF",
 821      4620 
 822 0cca 0000 0A00 	    .word LIT, 0x0A, EMIT, ENDS
 822      0000 0000 
 823               	
 824               	;----------------------------------------------------------------------
 825               	;
 826               	; is  ( a u -- )
 827               	;
 828 0cd2 0000 0242 	HEADER "BL", "BL",
 828      4C20 
 829 0cd8 0000 2000 	    .word LIT, 0x20, EMIT, ENDS
 829      0000 0000 
 830               	
 831               	;----------------------------------------------------------------------
 832               	;
 833               	; is  ( a u -- )
 834               	;
 835 0ce0 0000 0450 	HEADER "PACE", "PACE",
 835      4143 4520 
 836 0ce8 0000 0B00 	    .word LIT, 0x0B, EMIT, ENDS
 836      0000 0000 
 837               	
 838               	;----------------------------------------------------------------------
 839               	;
 840               	; is  ( a u -- )
 841               	;
 842 0cf0 0000 0442 	HEADER "BELL", "BELL",
 842      454C 4C20 
 843 0cf8 0000 0700 	    .word LIT, 0x07, EMIT, ENDS
 843      0000 0000 
 844               	
 845               	;---------------------------------------------------------------------- 
 846               	; 
 847               	; is SPACE ( -- )
 848               	; 
 849 0d00 0000 0553 	HEADER "SPACE", "SPACE" 
 849      5041 4345 
 850 0d08 0000 2000 	    .word LIT, 0x20, EMIT, ENDS 
 850      0000 0000 
 851               	 
 852               	;---------------------------------------------------------------------- 
 853               	; 
 854               	; is SPACES ( n -- )
 855               	;   emits until 0
 856 0d10 0000 0653 	HEADER "SPACES", "SPACES" 
 856      5041 4345 
 856      5320 
 857 0d1a 0000 0000 	1:  .word ZDUP, ZBRANCH, 2f
 857      0000 
 858 0d20 0000 0000 	    .word SPACE, ONEMINUS, BRANCH, 1b
 858      0000 0000 
 859 0d28 0000      	2:  .word ENDS 
 860               	 
 861               	;---------------------------------------------------------------------- 
 862               	; 
 863               	; is COUNT ( a -- a+1 c ) 
 864               	; from link to code 
 865 0d2a 0000 0543 	HEADER "COUNT", "COUNT", 
 865      4F55 4E54 
 866 0d32 0000 0000 	    .word DUP, AT, TOR, ONEPLUS, RTO, ENDS 
 866      0000 0000 
 866      0000 0000 
 867               	 
 868               	;----------------------------------------------------------------------
 869               	;
 870               	; is  ( a u -- )
 871               	;
 872 0d3e 0000 0454 	HEADER "TYPE", "TYPE",
 872      5950 4520 
 873 0d46 0000 0000 	1:  .word DUP, ZBRANCH, 2f
 873      0000 
 874 0d4c 0000 0000 	    .word ONEMINUS, TOR, DUP, AT, EMIT, ONEPLUS, RTO
 874      0000 0000 
 874      0000 0000 
 874      0000 
 875 0d5a 0000 0000 	    .word BRANCH, 1b
 876 0d5e 0000 0000 	2:  .word DROP, DROP, ENDS 
 876      0000 
 877               	  
 878               	;----------------------------------------------------------------------
 879               	;
 880               	; is  ( u1 u2 -- u3 )
 881               	;
 882 0d64 0000 0355 	HEADER "UM-", "UMMINUS",
 882      4D2D 
 883 0d6a 0000 0000 	    .word NEGATE, UMPLUS, ENDS
 883      0000 
 884               	
 885               	;----------------------------------------------------------------------
 886               	;   User Stack from end sram
 887               	;
 888               	;----------------------------------------------------------------------
 889               	;
 890               	; is  ( -- )
 891               	;   no checks
 892               	;
 893 0d70 0000 0255 	HEADER "U-", "ULESS",
 893      2D20 
 894 0d76 0000 0000 	    .word UPP, AT, CELL, MINUS, DUP, UPP, TO, ENDS
 894      0000 0000 
 894      0000 0000 
 894      0000 0000 
 895               	
 896               	;----------------------------------------------------------------------
 897               	;
 898               	; is  ( -- )
 899               	;   no checks
 900               	;
 901 0d86 0000 0255 	HEADER "U+", "UMORE",
 901      2B20 
 902 0d8c 0000 0000 	    .word UPP, AT, CELL, PLUS, DUP, UPP, TO, ENDS
 902      0000 0000 
 902      0000 0000 
 902      0000 0000 
 903               	
 904               	;----------------------------------------------------------------------
 905               	;
 906               	; is  ( u -- )
 907               	;
 908 0d9c 0000 0255 	HEADER "U@", "UAT",
 908      4020 
 909               	1:
 910 0da2 0000 0000 	    .word UPP, AT, ENDS
 910      0000 
 911               	
 912               	;----------------------------------------------------------------------
 913               	;
 914               	; is  ( u -- )
 915               	;
 916 0da8 0000 0255 	HEADER "U!", "UTO",
 916      2120 
 917               	1:
 918 0dae 0000 0000 	    .word UPP, TO, ENDS
 918      0000 
 919               	
 920               	;----------------------------------------------------------------------
 921               	;
 922               	; is  ( u -- )
 923               	;
 924 0db4 0000 023E 	HEADER ">U", "USV",
 924      5520 
 925               	1:
 926 0dba 0000 0000 	    .word UPP, AT, TO, ENDS
 926      0000 0000 
 927               	
 928               	;----------------------------------------------------------------------
 929               	;
 930               	; is  ( -- u )
 931               	;
 932 0dc2 0000 0255 	HEADER "U>", "ULD",
 932      3E20 
 933               	1:
 934 0dc8 0000 0000 	    .word UPP, AT, AT, ENDS
 934      0000 0000 
 935               	
 936               	;----------------------------------------------------------------------
 937               	;
 938 0dd0 0000 0543 	HEADER "COLD0", "COLDZERO", F_LEAP
 938      4F4C 4430 
 939               	    
 940 0dd8 0000 0000 	    .word LIT, 0x0000, LIT, VOID, TO 
 940      0000 0000 
 940      0000 
 941 0de2 0000 0000 	    .word LIT, 0x0000, LIT, LIVE, TO 
 941      0000 0000 
 941      0000 
 942 0dec 0000 0000 	    .word LIT, 0x0000, LIT, TURN, TO 
 942      0000 0000 
 942      0000 
 943 0df6 0000 0000 	    .word LIT, 0x0000, LIT, REST, TO 
 943      0000 0000 
 943      0000 
 944               	
 945 0e00 0000 0000 	    .word LIT, ZZZZ, LIT, LAST, TO 
 945      0000 0000 
 945      0000 
 946 0e0a 0000 0000 	    .word LIT, free_flash, LIT, VDP, TO
 946      0000 0000 
 946      0000 
 947 0e14 0000 0000 	    .word LIT, EP0, LIT, VEP, TO
 947      0000 0000 
 947      0000 
 948               	
 949 0e1e 0000 0000 	    .word LIT, UH0, LIT, VHP, TO
 949      0000 0000 
 949      0000 
 950 0e28 0000 FF08 	    .word LIT, US0, LIT, VUP, TO
 950      0000 0000 
 950      0000 
 951 0e32 0000      	    .word ENDS
 952               	
 953               	;----------------------------------------------------------------------
 954               	;
 955 0e34 0000 0645 	HEADER "EELOAD", "EELOAD", F_LEAP
 955      454C 4F41 
 955      4420 
 956 0e3e 0000 0000 	    .word ZERO, DUP, EAT, LIT, VOID, TO 
 956      0000 0000 
 956      0000 0000 
 957 0e4a 0000 0000 	    .word TWO, PLUS, DUP, EAT, LIT, LIVE, TO 
 957      0000 0000 
 957      0000 0000 
 957      0000 
 958 0e58 0000 0000 	    .word TWO, PLUS, DUP, EAT, LIT, TURN, TO 
 958      0000 0000 
 958      0000 0000 
 958      0000 
 959 0e66 0000 0000 	    .word TWO, PLUS, DUP, EAT, LIT, REST, TO 
 959      0000 0000 
 959      0000 0000 
 959      0000 
 960               	
 961 0e74 0000 0000 	    .word TWO, PLUS, DUP, EAT, LIT, LAST, TO 
 961      0000 0000 
 961      0000 0000 
 961      0000 
 962 0e82 0000 0000 	    .word TWO, PLUS, DUP, EAT, LIT, VDP, TO 
 962      0000 0000 
 962      0000 0000 
 962      0000 
 963 0e90 0000 0000 	    .word TWO, PLUS, DUP, EAT, LIT, VEP, TO 
 963      0000 0000 
 963      0000 0000 
 963      0000 
 964 0e9e 0000 0000 	    .word TWO, PLUS, DUP, EAT, LIT, VUP, TO 
 964      0000 0000 
 964      0000 0000 
 964      0000 
 965 0eac 0000      	    .word ENDS
 966               	
 967               	;----------------------------------------------------------------------
 968               	;
 969 0eae 0000 0645 	HEADER "EESAVE", "EESAVE", F_LEAP
 969      4553 4156 
 969      4520 
 970 0eb8 0000 0000 	    .word ZERO, DUP, LIT, VOID, AT, SWAP, ETO 
 970      0000 0000 
 970      0000 0000 
 970      0000 
 971 0ec6 0000 0000 	    .word TWO, PLUS, DUP, LIT, LIVE, AT, SWAP, ETO 
 971      0000 0000 
 971      0000 0000 
 971      0000 0000 
 972 0ed6 0000 0000 	    .word TWO, PLUS, DUP, LIT, TURN, AT, SWAP, ETO 
 972      0000 0000 
 972      0000 0000 
 972      0000 0000 
 973 0ee6 0000 0000 	    .word TWO, PLUS, DUP, LIT, REST, AT, SWAP, ETO 
 973      0000 0000 
 973      0000 0000 
 973      0000 0000 
 974               	
 975 0ef6 0000 0000 	    .word TWO, PLUS, DUP, LIT, LAST, AT, SWAP, ETO 
 975      0000 0000 
 975      0000 0000 
 975      0000 0000 
 976 0f06 0000 0000 	    .word TWO, PLUS, DUP, LIT, VDP, AT, SWAP, ETO 
 976      0000 0000 
 976      0000 0000 
 976      0000 0000 
 977 0f16 0000 0000 	    .word TWO, PLUS, DUP, LIT, VEP, AT, SWAP, ETO 
 977      0000 0000 
 977      0000 0000 
 977      0000 0000 
 978 0f26 0000 0000 	    .word TWO, PLUS, DUP, LIT, VUP, AT, SWAP, ETO 
 978      0000 0000 
 978      0000 0000 
 978      0000 0000 
 979 0f36 0000      	    .word ENDS
 980               	
 981               	;----------------------------------------------------------------------
 982               	;
 983 0f38 0000 0443 	HEADER "COLD", "COLD", F_LEAP
 983      4F4C 4420 
 984 0f40 0000      	    .word EELOAD
 985 0f42 0000 0000 	    .word LIT, LIVE, ZEQU, ZBRANCH, _safe
 985      0000 0000 
 985      0000 
 986 0f4c 0000 0000 	    .word COLDZERO, EESAVE  
 987               	_safe:    
 988 0f50 0000 0000 	    .word LIT, RS0, RSTO
 988      0000 
 989 0f56 0000 0000 	    .word LIT, PS0, PSTO
 989      0000 
 990 0f5c 0000 0000 	    .word LIT, 0x00, STATE, TO
 990      0000 0000 
 991 0f64 0000 1000 	    .word LIT, 0x10, BASE, TO
 991      0000 0000 
 992 0f6c 0000 0000 	    .word LIT, WARM, RTO
 992      0000 
 993 0f72 0000 0000 	    .word LIT, LIVE, DUP, AT, ONE, PLUS, SWAP, TO 
 993      0000 0000 
 993      0000 0000 
 993      0000 0000 
 994 0f82 0000      	    .word ENDS 
 995               	 
 996               	;----------------------------------------------------------------------
 997               	;
 998 0f84 0000 0457 	HEADER "WARM", "WARM", F_LEAP
 998      4152 4D20 
 999               	    ; verify error code 
 1000               	    ; resets etc 
 1001 0f8c 0000 0000 	    .word TURN, AT, EXEC, QUIT, ENDS 
 1001      0000 0000 
 1001      0000 
 1002               	 
 1003               	;----------------------------------------------------------------------
 1004               	; does reset 
 1005               	;
 1006 0f96 0000 0342 	HEADER "BYE", "BYE", F_LEAP
 1006      5945 
 1007 0f9c 0000      	    .word EESAVE
 1008 0f9e 0000 0000 	    .word REST, AT, EXEC, RESET, ENDS 
 1008      0000 0000 
 1008      0000 
 1009               	
 147               	
 148               	;----------------------------------------------------------------------
 149               	.p2align 1, 0x00
 150               	#include "doubles.S"
   1               	
   2               	
   3               	/*
   4               	 *  DISCLAIMER
   5               	 *
   6               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   7               	 *
   8               	 *  Permission is hereby granted, free of charge, to any person obtaining
   9               	 *  a copy of this software and associated documentation files (the
  10               	 *  "Software"), to deal in the Software without restriction, including
  11               	 *  without limitation the rights to use, copy, modify, merge, publish,
  12               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  13               	 *  permit persons to whom the Software is furnished to do so, subject to
  14               	 *  the following conditions:
  15               	 *
  16               	 *  The above copyright notice and this permission notice shall be
  17               	 *  included in all copies or substantial portions of the Software.
  18               	 *
  19               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  20               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  21               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  22               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  23               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  24               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  25               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  26               	 *
  27               	 */
  28               	
  29               	;----------------------------------------------------------------------
  30               	;
  31               	; ok ( w -- w + 4 ) 
  32               	;
  33 0fa8 0000 0134 	HEADER "4", "FOUR",
  34 0fac 0000 0400 	     .word LIT, 4, ENDS 
  34      0000 
  35               	 
  36               	;----------------------------------------------------------------------
  37               	;
  38               	; ok ( w -- w + 4 ) 
  39               	;
  40 0fb2 0000 0234 	HEADER "4+", "FOURPLUS",
  40      2B20 
  41 0fb8 0000 0400 	     .word LIT, 4, PLUS, ENDS 
  41      0000 0000 
  42               	 
  43               	;----------------------------------------------------------------------
  44               	;
  45               	; ok ( w -- w - 4 ) 
  46               	;
  47 0fc0 0000 0234 	HEADER "4-", "FOURMINUS",
  47      2D20 
  48 0fc6 0000 0400 	     .word LIT, 4, MINUS, ENDS 
  48      0000 0000 
  49               	 
  50               	
  51               	;---------------------------------------------------------------------- 
  52               	; 
  53               	; ok 2! ( a1 a2 -- w1 w2 ) 
  54               	; 
  55 0fce 0000 0232 	HEADER "2!", "TWOTO", 
  55      2120 
  56 0fd4 0000 0000 	    .word SWAP, OVER, TO, CELLPLUS, TO, ENDS 
  56      0000 0000 
  56      0000 0000 
  57               	;---------------------------------------------------------------------- 
  58               	; 
  59               	; ok 2@ ( a1 a2 -- w1 w2 ) 
  60               	; 
  61 0fe0 0000 0232 	HEADER "2@", "TWOAT", 
  61      4020 
  62 0fe6 0000 0000 	    .word DUP, CELLPLUS, AT, SWAP, AT, ENDS 
  62      0000 0000 
  62      0000 0000 
  63               	 
  64               	;----------------------------------------------------------------------
  65               	;
  66               	; ok ( w1 w2 -- ) 
  67               	;
  68 0ff2 0000 0332 	HEADER "2>R", "TWOTOR",
  68      3E52 
  69 0ff8 0000 0000 	     .word SWAP, RTO, RTO, ENDS 
  69      0000 0000 
  70               	 
  71               	;----------------------------------------------------------------------
  72               	;
  73               	; ok ( w1 w2 -- ) 
  74               	;
  75 1000 0000 0332 	HEADER "2R>", "TWORTO",
  75      523E 
  76 1006 0000 0000 	     .word RTO, RTO, SWAP, ENDS 
  76      0000 0000 
  77               	 
  78               	;----------------------------------------------------------------------
  79               	;
  80               	; ok ( w1 w2 -- ) 
  81               	;
  82 100e 0000 0332 	HEADER "2R@", "TWORAT",
  82      5240 
  83 1014 0000 0000 	     .word RTO, RTO, OVER, OVER, TOR, TOR, SWAP, ENDS
  83      0000 0000 
  83      0000 0000 
  83      0000 0000 
  84               	 
  85               	;----------------------------------------------------------------------
  86               	;
  87               	; ok ( w1 w2 -- w1 w2 w1 w2 ) 
  88               	;
  89 1024 0000 0532 	HEADER "2DROP", "TWODROP",
  89      4452 4F50 
  90 102c 0000 0000 	     .word DROP, DROP, ENDS 
  90      0000 
  91               	 
  92               	;----------------------------------------------------------------------
  93               	;
  94               	; ok ( w1 w2 -- w1 w2 w1 w2 ) 
  95               	;
  96 1032 0000 0432 	HEADER "2DUP", "TWODUP",
  96      4455 5020 
  97 103a 0000 0000 	     .word OVER, OVER, ENDS 
  97      0000 
  98               	 
  99               	;----------------------------------------------------------------------
 100               	;
 101               	; ok ( w1 w2 w3 w4 -- w3 w4 w1 w2 ) 
 102               	;
 103 1040 0000 0532 	HEADER "2SWAP", "TWOSWAP",
 103      5357 4150 
 104 1048 0000 0000 	     .word ROTU, TOR, ROTU, TOR, ENDS 
 104      0000 0000 
 104      0000 
 105               	     
 106               	;----------------------------------------------------------------------
 107               	;
 108               	; ok ( w1 w2 w3 w4 -- w3 w4 + w1 w2 ) 
 109               	;
 110 1052 0000 0244 	HEADER "D+", "DPLUS",
 110      2B20 
 111 1058 0000 0000 	     .word TOR, SWAP, TOR, UMPLUS, RTO, RTO, PLUS, PLUS, ENDS 
 111      0000 0000 
 111      0000 0000 
 111      0000 0000 
 111      0000 
 112               	     
 113               	;----------------------------------------------------------------------
 114               	;
 115               	; ok ( w1 w2 w3 w4 -- w3 w4 - w1 w2 ) 
 116               	;
 117 106a 0000 0244 	HEADER "D-", "DMINUS",
 117      2D20 
 118 1070 0000 0000 	     .word TOR, SWAP, TOR, UMMINUS, RTO, RTO, MINUS, MINUS, ENDS 
 118      0000 0000 
 118      0000 0000 
 118      0000 0000 
 118      0000 
 119               	     
 120               	;----------------------------------------------------------------------
 121               	;
 122               	; ok ( w1 w2 w3 w4 -- w3 w4 - w1 w2 ) 
 123               	;
 124 1082 0000 0744 	HEADER "DNEGATE", "DNEG",
 124      4E45 4741 
 124      5445 
 125 108c 0000 0000 	     .word INVERT, TOR, INVERT, ONE, UMPLUS, RTO, PLUS, ENDS 
 125      0000 0000 
 125      0000 0000 
 125      0000 0000 
 126               	     
 127               	;----------------------------------------------------------------------
 128               	;
 129               	; ok ( w1 w2 w3 w4 -- w3 w4 - w1 w2 ) 
 130               	;
 131 109c 0000 0444 	HEADER "DABS", "DABS",
 131      4142 5320 
 132 10a4 0000 0000 	     .word DUP, ZEROLT, ZBRANCH, 2f
 132      0000 0000 
 133 10ac 0000      	     .word DNEG
 134 10ae 0000      	2:   .word ENDS 
 135               	     
 136               	;----------------------------------------------------------------------
 137               	...
 151               	
 152               	;----------------------------------------------------------------------
 153               	.p2align 1, 0x00
 154               	#include "math.S"
   1               	
   2               	/*
   3               	 *  DISCLAIMER
   4               	 *
   5               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   6               	 *
   7               	 *  Permission is hereby granted, free of charge, to any person obtaining
   8               	 *  a copy of this software and associated documentation files (the
   9               	 *  "Software"), to deal in the Software without restriction, including
  10               	 *  without limitation the rights to use, copy, modify, merge, publish,
  11               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  12               	 *  permit persons to whom the Software is furnished to do so, subject to
  13               	 *  the following conditions:
  14               	 *
  15               	 *  The above copyright notice and this permission notice shall be
  16               	 *  included in all copies or substantial portions of the Software.
  17               	 *
  18               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  19               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  20               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  21               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  22               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  23               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  24               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  25               	 *
  26               	 */
  27               	
  28               	;----------------------------------------------------------------------
  29               	;
  30               	; great DJB hash, adapted for 16bits
  31               	;
  32               	; hash = (hash << 5) + str[i]
  33               	; for ascii chars in sram, in bytes not cells
  34               	; ( a u -- h ) djb hash
  35               	;
  36               	.equ djbHASH, 5381
  37 10b0 0000 0448 	HEADER "HASH", "HASH", F_LEAP
  37      4153 4820 
  38 10b8 0000      	    NOOP
  39 10ba 6624      	    clr _zero_
  40 10bc 65E0      	    ldi nos_low, lo8(djbHASH)
  41 10be 75E1      	    ldi nos_high, hi8(djbHASH)
  42 10c0 F991 E991 	    pspull zpm_low, zpm_high
  43               	
  44               	    ; get a char
  45               	1:    
  46               	    
  47 10c4 9817      	    cp tos_high, tos_low
  48 10c6 01F0      	    brbs BIT_ZERO, 2f
  49               	
  50 10c8 7190      	    ld _work_, Z+
  51 10ca 670D      	    add nos_low, _work_
  52 10cc 761D      	    adc nos_high, _zero_
  53               	
  54 10ce 660F      	    lsl nos_low
  55 10d0 771F      	    rol nos_high
  56 10d2 660F      	    lsl nos_low
  57 10d4 771F      	    rol nos_high
  58 10d6 660F      	    lsl nos_low
  59 10d8 771F      	    rol nos_high
  60 10da 660F      	    lsl nos_low
  61 10dc 771F      	    rol nos_high
  62 10de 660F      	    lsl nos_low
  63 10e0 771F      	    rol nos_high
  64               	
  65 10e2 0197      	    sbiw tos_low, 1
  66 10e4 00C0      	    rjmp 1b
  67               	    
  68               	2:
  69 10e6 CB01      	    movw tos_low, nos_low
  70 10e8 0C94 0000 	    POON
  71               	
  72               	;----------------------------------------------------------------------
  73               	;
  74               	;   ok  ( -- w)
  75               	;
  76               	;     ©2000-2021 by Gerhard Schmidt,
  77               	;      http://www.avr-asm-tutorial.net/avr_en/apps/random_tn13/random_calc_tn13.html
  78               	;
  79               	;    seed ~ 0x02A8
  80               	;
  81               	;     also good seeds
  82               	;
  83               	;    B167 4A3C 9879 B61E 7B26 
  84               	;    A858 1F88 50D5 419D 5537
  85               	;    0224 0527 5EB6 1E6D BCDC
  86               	;    92FF C206 0ECD 9361 2823
  87               	;    BE0B B303 6462 0E4C 3D24
  88               	;
  89 10ec 0000 0652 	HEADER "RANDOM", "RANDOM", F_LEAP
  89      414E 444F 
  89      4D20 
  90 10f6 0000      	    NOOP
  91               	;    load seed
  92 10f8 4091 0000 	    lds wrk_low, SEED
  93 10fc 5091 0000 	    lds wrk_high, SEED
  94               	;    run magics
  95 1100 4527      	    eor wrk_low, wrk_high
  96 1102 4295      	    swap wrk_low
  97 1104 540F      	    add wrk_high, wrk_low
  98 1106 CA01      	    movw tos_low, wrk_low
  99 1108 00C0      	    rjmp _seed
 100               	
 101               	;----------------------------------------------------------------------
 102               	;
 103               	;   ok ( w -- ) 
 104               	;   sets seed for rand
 105               	;
 106 110a 0000 0452 	HEADER "RAND", "RAND", F_LEAP
 106      414E 4420 
 107 1112 0000      	    NOOP
 108 1114 AC01      	    movw wrk_low, tos_low
 109 1116 9991 8991 	    pspull tos_low, tos_high
 110               	_seed:
 111 111a 4093 0000 	    sts SEED, wrk_low
 112 111e 5093 0000 	    sts SEED + 1, wrk_high
 113 1122 0C94 0000 	    POON
 114               	    
 115               	;----------------------------------------------------------------------
 116               	;
 117               	;   ok ( w -- u) 
 118               	;
 119 1126 0000 0341 	HEADER "ABS", "ABS", F_LEAP 
 119      4253 
 120 112c 0000 0000 	    .word DUP, ZEROLT, ZBRANCH, 2f
 120      0000 0000 
 121 1134 0000      	    .word NEGATE
 122 1136 0000      	2:  .word ENDS
 123               	
 124               	;----------------------------------------------------------------------
 125               	;
 126               	;   is ( w1 w2 -- w) 
 127               	;
 128 1138 0000 034D 	HEADER "MAX", "MAX", F_LEAP
 128      4158 
 129 113e 0000 0000 	    .word TWODUP, LTHAN, ZBRANCH, 2f
 129      0000 0000 
 130 1146 0000      		.word SWAP 
 131 1148 0000 0000 	2:	.word DROP, ENDS
 132               	
 133               	;----------------------------------------------------------------------
 134               	;
 135               	;   is ( w1 w2 -- w) 
 136               	;
 137 114c 0000 034D 	HEADER "MIN", "MIN", F_LEAP
 137      494E 
 138 1152 0000 0000 	    .word SWAP, MAX, ENDS
 138      0000 
 139               	
 140               	;----------------------------------------------------------------------
 141               	;
 142               	;   is ( w1 w2 w3 -- f ) 
 143               	;
 144 1158 0000 0657 	HEADER "WITHIN", "WITHIN", F_LEAP
 144      4954 4849 
 144      4E20 
 145 1162 0000 0000 	    .word OVER, MINUS, TOR, MINUS, RTO, UMLESS, ENDS
 145      0000 0000 
 145      0000 0000 
 145      0000 
 146               	
 147               	;----------------------------------------------------------------------
 148               	;
 149               	;	from Dr. Ting eForth
 150               	;
 151               	;----------------------------------------------------------------------
 152               	;
 153               	; ok ( commom pass for mul and div)
 154               	; 
 155 1170 0000 0655 	HEADER "UMPASS", "UMPASS",
 155      4D50 4153 
 155      5320 
 156 117a 0000      	    NOOP
 157 117c 0000 0000 	    .word DUP, UMPLUS, TOR, TOR, DUP, UMPLUS, RTO, PLUS, ENDS
 157      0000 0000 
 157      0000 0000 
 157      0000 0000 
 157      0000 
 158               	 
 159               	;----------------------------------------------------------------------
 160               	;	divides
 161               	;----------------------------------------------------------------------
 162               	;
 163               	; ok ( ud u -- ur uq)
 164               	; 
 165 118e 0000 0655 	HEADER "UM/MOD", "UMDIVMOD", 
 165      4D2F 4D4F 
 165      4420 
 166 1198 0000      	    NOOP
 167 119a 0000 0000 	    .word OVER, OVER, ULESS, ZBRANCH, 8f 
 167      0000 0000 
 167      0000 
 168 11a4 0000      	 2: .word NEGATE
 169 11a6 0000 0F00 		.word LIT, 15, FOR
 169      0000 
 170 11ac 0000 0000 	    .word TOR, UMPASS, DUP
 170      0000 
 171 11b2 0000 0000 	    .word RTO, RAT, SWAP, TOR, UMPLUS, RTO, OR, ZBRANCH, 4f
 171      0000 0000 
 171      0000 0000 
 171      0000 0000 
 171      0000 
 172 11c4 0000 0000 	    .word TOR, DROP, ONEPLUS, RTO, BRANCH, 6f 
 172      0000 0000 
 172      0000 0000 
 173 11d0 0000      	4:  .word DROP
 174 11d2 0000      	6:  .word RTO 
 175 11d4 0000      	    .word NEXT
 176 11d6 0000 0000 	    .word DROP, SWAP, ENDS
 176      0000 
 177 11dc 0000 0000 	8:  .word DROP, DROP, DROP, FTRUE, DUP, ENDS
 177      0000 0000 
 177      0000 0000 
 178               	
 179               	;----------------------------------------------------------------------
 180               	;
 181               	; ok *
 182 11e8 0000 054D 	HEADER "M/MOD", "MDIVMOD", F_LEAP
 182      2F4D 4F44 
 183 11f0 0000      	    NOOP
 184 11f2 0000 0000 	    .word DUP, ZEROLT, DUP, TOR, ZBRANCH, 2f 
 184      0000 0000 
 184      0000 0000 
 185 11fe 0000 0000 	    .word NEGATE, TOR, DNEG, RTO
 185      0000 0000 
 186 1206 0000 0000 	2:  .word TOR, DUP, ZEROLT, ZBRANCH, 4f 
 186      0000 0000 
 186      0000 
 187 1210 0000 0000 	    .word RAT, PLUS
 188 1214 0000 0000 	4:  .word RTO, UMDIVMOD, RTO, ZBRANCH, 6f
 188      0000 0000 
 188      0000 
 189 121e 0000 0000 	    .word SWAP, NEGATE, SWAP
 189      0000 
 190 1224 0000      	6:  .word ENDS
 191               	
 192               	;----------------------------------------------------------------------
 193               	;
 194               	; ok *
 195 1226 0000 042F 	HEADER "/MOD", "DIVMOD", F_LEAP
 195      4D4F 4420 
 196 122e 0000      	    NOOP
 197 1230 0000 0000 	    .word OVER, ZEROLT, SWAP, MDIVMOD, ENDS
 197      0000 0000 
 197      0000 
 198               	
 199               	;----------------------------------------------------------------------
 200               	;
 201               	; ok *
 202 123a 0000 034D 	HEADER "MOD", "MOD", F_LEAP
 202      4F44 
 203 1240 0000      	    NOOP
 204 1242 0000 0000 	    .word DIVMOD, DROP, ENDS
 204      0000 
 205               	
 206               	;----------------------------------------------------------------------
 207               	;
 208               	; ok *
 209 1248 0000 012F 	HEADER "/", "DIV", F_LEAP
 210 124c 0000      	    NOOP
 211 124e 0000 0000 	    .word DIVMOD, SWAP, DROP, ENDS
 211      0000 0000 
 212               	
 213               	;----------------------------------------------------------------------
 214               	;	multiplies
 215               	;----------------------------------------------------------------------
 216               	;
 217               	; ok *
 218 1256 0000 0355 	HEADER "UM*", "UMSTAR", F_LEAP
 218      4D2A 
 219 125c 0000      	    NOOP
 220 125e 0000 0000 	    .word ZERO, SWAP
 221 1262 0000 0F00 	    .word LIT, 15, FOR
 221      0000 
 222 1268 0000 0000 	    .word UMPASS, RTO, ZBRANCH, 4f
 222      0000 0000 
 223 1270 0000 0000 	    .word TOR, OVER, UMPLUS, RTO, PLUS
 223      0000 0000 
 223      0000 
 224 127a 0000      	4:  .word NEXT
 225 127c 0000 0000 	    .word ROTU, DROP, ENDS 
 225      0000 
 226               	
 227               	;----------------------------------------------------------------------
 228               	;
 229               	; ok *
 230 1282 0000 012A 	HEADER "*", "STAR", F_LEAP
 231 1286 0000      	    NOOP
 232 1288 0000 0000 	    .word UMSTAR, DROP, ENDS
 232      0000 
 233               	
 234               	;----------------------------------------------------------------------
 235               	;
 236               	; ok *
 237 128e 0000 024D 	HEADER "M*", "MSTAR", F_LEAP
 237      2A20 
 238 1294 0000      	    NOOP
 239 1296 0000 0000 	    .word OVER, OVER, XOR, ZEROLT, TOR, ABS, SWAP, ABS, UMSTAR
 239      0000 0000 
 239      0000 0000 
 239      0000 0000 
 239      0000 
 240 12a8 0000 0000 	    .word RTO, ZBRANCH, 2f
 240      0000 
 241 12ae 0000      	    .word DNEG
 242 12b0 0000      	2:  .word ENDS
 243               	
 244               	;----------------------------------------------------------------------
 245               	;
 246               	; ok *
 247 12b2 0000 052A 	HEADER "*/MOD", "STARDIVMOD", F_LEAP
 247      2F4D 4F44 
 248 12ba 0000      	    NOOP
 249 12bc 0000 0000 	    .word TOR, MSTAR, TOR, MDIVMOD, ENDS
 249      0000 0000 
 249      0000 
 250               	
 251               	;----------------------------------------------------------------------
 252               	;
 253               	; ok *
 254 12c6 0000 022A 	HEADER "*/", "STARDIV", F_LEAP
 254      2F20 
 255 12cc 0000      	    NOOP
 256 12ce 0000 0000 	    .word STARDIVMOD, SWAP, DROP, ENDS
 256      0000 0000 
 257               	
 258               	;----------------------------------------------------------------------
 259               	; a 64 bit half number, 7FFF FFFF FFFF FFFF is 9.223.372.036.854.775.807
 260               	;----------------------------------------------------------------------
 261               	...
 155               	
 156               	;----------------------------------------------------------------------
 157               	.p2align 1, 0x00
 158               	#include "flush.S"
   1               	
   2               	/*
   3               	 *  DISCLAIMER
   4               	 *
   5               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   6               	 *
   7               	 *  Permission is hereby granted, free of charge, to any person obtaining
   8               	 *  a copy of this software and associated documentation files (the
   9               	 *  "Software"), to deal in the Software without restriction, including
  10               	 *  without limitation the rights to use, copy, modify, merge, publish,
  11               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  12               	 *  permit persons to whom the Software is furnished to do so, subject to
  13               	 *  the following conditions:
  14               	 *
  15               	 *  The above copyright notice and this permission notice shall be
  16               	 *  included in all copies or substantial portions of the Software.
  17               	 *
  18               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  19               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  20               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  21               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  22               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  23               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  24               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  25               	 *
  26               	 */
  27               	
  28               	/*
  29               	
  30               	routines for flush flash memory
  31               	
  32               	*/
  33               	
  34               	;---------------------------------------------------------------------
  35               	;
  36               	;    for easy using spm from optiboot 
  37               	;
  38               	;    spm instruction uses r31:r30 for address and r1:r0 for data
  39               	;
  40               	;    when erase or write, r0:r1 is ignored, 
  41               	;
  42               	;   ATmega8L datasheet, pg 209
  43               	;
  44               	;   command passed in r24
  45               	;
  46               	;   in optiboot.c version 8.3 :
  47               	;   
  48               	;	byte address !!!
  49               	; 
  50               	;    __boot_rww_enable_short();
  51               	;    7fd2:       87 bf           out     0x37, r24       ; 55
  52               	;    7fd4:       e8 95           spm
  53               	;    7fd6:       08 95           ret
  54               	;
  55               	;   do not expeculate, only one page to "flash flush"
  56               	;   minimal optiboot uses last 256 words at 7e00 ( 3F00 words) 
  57               	;   and the sequence: bf 87 95 e8 95 08
  58               	;
  59               	;   commands are: 
  60               	;    0x01 fill buffer, 
  61               	;    0x03 erase page, 
  62               	;    0x05 write page
  63               	;   set SPMCR and do a SPM whithin 4 cycles
  64               	;
  65               	;    about 3.5 to 4.5 ms to complete write !
  66               	;
  67               	;---------------------------------------------------------------------
  68               	
  69               	
  70               	; small trick, in macros.S
  71               	
  72               	; pagesize = (SPM_PAGE - 1)
  73               	
  74               	; pagemask = (~pagesize)
  75               	
  76               	;----------------------------------------------------------------------
  77               	;
  78               	;   load a flash memory page (fa sa -- )
  79               	;   copy one flash page from flash address fa to sram address sa
  80               	;
  81 12d6 0000 0C28 	HEADER "(load_flash)", "LDFLASH"
  81      6C6F 6164 
  81      5F66 6C61 
  81      7368 2920 
  82 12e6 0000      	    NOOP
  83               	
  84               	    ; origin in ps
  85               	
  86 12e8 F991 E991 	    pspull zpm_low, zpm_high
  87               	
  88               	    ; preserve parameter tack
  89               	
  90 12ec CE93 DE93 	    rspush psp_low, psp_high
  91               	
  92               	    ; move destin from tos
  93               	
  94 12f0 EC01      	    movw psp_low, tos_low
  95               	
  96               	    ; adjust address for lpm
  97 12f2 E695      	    lsr zpm_low
  98 12f4 FF1F      	    rol zpm_high
  99               	
 100               	    ; how many bytes
 101 12f6 4091 8000 	    lds wrk_low, SPM_SIZE
 102               	
 103               	1:
 104 12fa 5591      	    lpm wrk_high, Z+
 105 12fc 5D93      	    st X+, wrk_high
 106 12fe 4A95      	    dec wrk_low
 107 1300 01F4      	    brne 1b
 108               	
 109               	; clean house
 110               	
 111 1302 DD91 CD91 	    rspull psp_low, psp_high
 112               	
 113 1306 9991 8991 	    pspull tos_low, tos_high
 114               	
 115 130a 0C94 0000 	    POON
 116               	
 117               	;----------------------------------------------------------------------
 118               	;
 119               	;   save a flash memory page (sa fa -- )
 120               	;   copy one flash page from sram address sa to flash address fa
 121               	;   registers exposed are used for optiboot compiled with gcc
 122               	;
 123 130e 0000 0C28 	HEADER "(save_flash)", "SVFLASH"
 123      7361 7665 
 123      5F66 6C61 
 123      7368 2920 
 124 131e 0000      	    NOOP
 125               	
 126               	    ; destin
 127               	
 128 1320 FC01      	    movw zpm_low, tos_low ; tos is HERE
 129               	
 130               	    ; origin
 131               	
 132 1322 7991 6991 	    pspull nos_low, nos_high ; nos is FIB0
 133               	
 134               	    ; save psp 
 135               	
 136 1326 CE93 DE93 	    rspush psp_low, psp_high ; is X index
 137               	
 138               	    ; load for index
 139               	
 140 132a EB01      	    movw psp_low, nos_low
 141               	
 142               	    ; save address 
 143 132c EE93 FE93 	    rspush zpm_low, zpm_high
 144               	
 145               	;-----------------------------------------------------------------
 146               	
 147               	    ; erase page
 148               	    ; r0:r1 is ignored, ATmega8L datasheet, pg 209
 149 1330 83E0      	    ldi r24, (1<<PGERS) | (1<<SPMEN)
 150 1332 00D0      	    rcall _does_spm
 151               	
 152               	;-----------------------------------------------------------------
 153               	
 154               	    ; start buffer page address
 155               	    
 156 1334 EE27      	    clr zpm_low
 157 1336 FF27      	    clr zpm_high
 158               	
 159               	    ; how many bytes, less than 256!
 160 1338 70E8      	    ldi r23, SPM_SIZE
 161               	
 162               	    ; copy page to buffer, word by word
 163               	2:
 164               	    ; fill page flash from sram
 165 133a 0D90      	    ld r0, X+
 166 133c 1D90      	    ld r1, X+
 167 133e 81E0      	    ldi r24, (1<<SPMEN)
 168 1340 00D0      	    rcall _does_spm
 169 1342 3296      	    adiw zpm_low, 2
 170               	    ; count down
 171 1344 7A95      	    dec r23
 172 1346 7A95      	    dec r23
 173 1348 01F4      	    brne 2b
 174               	
 175               	;-----------------------------------------------------------------
 176               	
 177               	    ; load flash page address
 178               	
 179 134a FD91 ED91 	    rspull zpm_low, zpm_high
 180               	
 181               	    ; write page
 182               	    ; r0:r1 is ignored, ATmega8L datasheet, pg 209
 183 134e 85E0      	    ldi r24, (1<<PGWRT) | (1<<SPMEN)
 184 1350 00D0      	    rcall _does_spm
 185               	
 186               	;-----------------------------------------------------------------
 187               	   ; enable
 188 1352 81E1      	    ldi r24, 0x11
 189 1354 00D0      	    rcall _does_spm
 190               	;-----------------------------------------------------------------
 191               	
 192               	    ; clean house
 193 1356 DD91 CD91 	    rspull psp_low, psp_high
 194 135a 9991 8991 	    pspull tos_low, tos_high
 195 135e 0C94 0000 	    POON
 196               	
 197               	;----------------------------------------------------------------------
 198               	;
 199               	; wrapper around optiboot code
 200               	;
 201               	 
 202               	; call spm in NWWM
 203               	_does_spm:
 204 1362 F894      	    cli
 205 1364 2FB6      	    in r2, __SREG__
 206               	
 207               	#ifdef atmega8
 208               	; for a atmega8 with optiboot 512b
 209               	#define OPTI_DO_SPM_SHORT 0x1fca    ; in bytes
 210               	    rcall OPTI_DO_SPM_SHORT
 211               	#endif
 212               	
 213               	#ifdef atmega328
 214               	; for a atmega328 with optiboot 512b
 215               	#define OPTI_DO_SPM_SHORT 0x7fd2    ; in bytes
 216               	;#define OPTI_DO_SPM_SHORT 0x3FE9    ; in words
 217 1366 0E94 E93F 	    call OPTI_DO_SPM_SHORT
 218               	#endif
 219               	
 220 136a 2FBE      	    out __SREG__, r2
 221 136c 7894      	    sei
 222               	; wait for complete
 223 136e 07B6      	1:  in      r0, 0x37        ; 55
 224 1370 00FC      	    sbrc    r0, 0
 225 1372 00C0      	    rjmp    1b
 226 1374 0895      	    ret
 227               	 
 228               	;----------------------------------------------------------------------
 229               	/* from optiboot version 8.2 listing, extra comments added
 159               	
 160               	;----------------------------------------------------------------------
 161               	.p2align 1, 0x00
 162               	#include "pictures.S"
   1               	;**********************************************************************
   2               	;
   3               	;   picture number routines adapted
   4               	;   from eForth, 1003_InsideF83, Dr. Ting
   5               	;   
   6               	;----------------------------------------------------------------------
   7               	;
   8               	; those are intented to use together, with no word creation inside.
   9               	;
  10               	;   <# # #S DIGIT HOLD SIGN #>
  11               	;
  12               	;----------------------------------------------------------------------
  13               	;   is DIGIT ( c -- true | false )
  14               	;   eg. 0-9~A-F in base 16, true
  15               	;   ok for bases 2 to 36
  16               	;   no sign or period inside
  17               	;
  18 1376 0000 0544 	HEADER "DIGIT", "DIGIT",
  18      4947 4954 
  19 137e 0000 3000 	    .word LIT, '0', MINUS
  19      0000 
  20 1384 0000 0000 	    .word DUP, ZERO, LTHAN, ZBRANCH, 5f
  20      0000 0000 
  20      0000 
  21 138e 0000 0000 	    .word DUP, LIT, 9, LTHAN, ZBRANCH, 6f
  21      0900 0000 
  21      0000 0000 
  22 139a 0000 0000 	    .word DUP, LIT, 17, LTHAN, ZBRANCH, 5f
  22      1100 0000 
  22      0000 0000 
  23 13a6 0000 0700 	    .word LIT, 7, MINUS
  23      0000 
  24 13ac 0000 0000 	    .word DUP, BASE, MINUS, LTHAN, ZBRANCH, 6f 
  24      0000 0000 
  24      0000 0000 
  25 13b8 0000 0000 	5:  .word DROP, FFALSE, ENDS
  25      0000 
  26 13be 0000 0000 	6:  .word DROP, FTRUE, ENDS
  26      0000 
  27               	
  28               	;----------------------------------------------------------------------
  29               	;   is <#
  30               	;
  31 13c4 0000 023C 	HEADER "<#", "LTSNUM",
  31      2320 
  32 13ca 0000 0000 	    .word PAD, LIT, HLD, TO, ENDS
  32      0000 0000 
  32      0000 
  33               	
  34               	;----------------------------------------------------------------------
  35               	;   is HOLD
  36               	;   : HOLD HLD @ CHAR- DUP HLD ! C! ; 
  37               	;
  38 13d4 0000 0448 	HEADER "HOLD", "HOLD",
  38      4F4C 4420 
  39 13dc 0000 0000 	    .word HLD, AT, CHARMINUS, DUP, HLD, TO, CTO, ENDS
  39      0000 0000 
  39      0000 0000 
  39      0000 0000 
  40               	
  41               	;----------------------------------------------------------------------
  42               	;   is #
  43               	;   : # 0 BASE @ UM/MOD >R BASE @ UM/MOD SWAP DIGIT HOLD R> ; 
  44               	;
  45 13ec 0000 0123 	HEADER "#", "SNUM",
  46 13f0 0000 0000 	    .word ZERO, BASE, AT, UMDIVMOD, TOR, BASE, AT, UMDIVMOD
  46      0000 0000 
  46      0000 0000 
  46      0000 0000 
  47 1400 0000 0000 	    .word SWAP, DIGIT, HOLD, RTO, ENDS
  47      0000 0000 
  47      0000 
  48               	
  49               	;----------------------------------------------------------------------
  50               	;   is #S
  51               	;   : #S BEGIN # 2DUP OR 0= UNTIL ; 
  52               	;   do { ... } while
  53               	;
  54 140a 0000 0223 	HEADER "#S", "SNUMS",
  54      5320 
  55 1410 0000 0000 	    .word SNUM, TWODUP, OR, ZEQU, ZBRANCH, SNUMS, ENDS
  55      0000 0000 
  55      0000 0000 
  55      0000 
  56               	
  57               	;----------------------------------------------------------------------
  58               	;   is SIGN
  59               	;   : SIGN 0< IF [CHAR] - HOLD THEN ; 
  60               	;
  61 141e 0000 0453 	HEADER "SIGN", "SIGN",
  61      4947 4E20 
  62 1426 0000 0000 	    .word ZEROLT, ZBRANCH, 2f
  62      0000 
  63 142c 0000 0000 	    .word [CHAR], MINUS, HOLD
  63      0000 
  64 1432 0000      	2:  .word ENDS
  65               	
  66               	;----------------------------------------------------------------------
  67               	;   is #>
  68               	;
  69 1434 0000 0223 	HEADER "#>", "SNUMGT",
  69      3E20 
  70 143a 0000 0000 	    .word TWODROP, HLD, AT, PAD, OVER, MINUS, ENDS
  70      0000 0000 
  70      0000 0000 
  70      0000 
  71               	
  72               	;----------------------------------------------------------------------
  73               	
  74               	
  75               	;----------------------------------------------------------------------
  76               	;
  77               	; is  ( u1 u2 -- u3 )
  78               	;
  79 1448 0000 0428 	HEADER "(U.)", "UDOTP",
  79      552E 2920 
  80 1450 0000 0000 	    .word ZERO, LTSNUM, SNUMS, SNUMGT, ENDS
  80      0000 0000 
  80      0000 
  81               	
  82               	;----------------------------------------------------------------------
  83               	;
  84               	; is  ( u1 u2 -- u3 )
  85               	;
  86 145a 0000 0255 	HEADER "U.", "UDOT",
  86      2E20 
  87 1460 0000 0000 	    .word UDOTP, TYPE, SPACE, ENDS
  87      0000 0000 
  88               	
  89               	;----------------------------------------------------------------------
  90               	;
  91               	; is  ( u1 u2 -- u3 )
  92               	;
  93 1468 0000 0355 	HEADER "U.R", "UDOTR",
  93      2E52 
  94 146e 0000 0000 	    .word TOR, UDOTP, RTO, OVER, MINUS, SPACES, ENDS
  94      0000 0000 
  94      0000 0000 
  94      0000 
  95               	
  96               	;----------------------------------------------------------------------
  97               	;
  98               	; is  ( u1 u2 -- u3 )
  99               	;
 100 147c 0000 0328 	HEADER "(.)", "DOTP",
 100      2E29 
 101 1482 0000 0000 	    .word DUP, ABS, 0, LTSNUM, SNUMS, ROTU, SIGN, SNUMGT, ENDS
 101      0000 0000 
 101      0000 0000 
 101      0000 0000 
 101      0000 
 102               	
 103               	;----------------------------------------------------------------------
 104               	;
 105               	; is  ( u1 u2 -- u3 )
 106               	;
 107 1494 0000 012E 	HEADER ".", "DOT",
 108 1498 0000 0000 	    .word DOTP, TYPE, SPACE, ENDS
 108      0000 0000 
 109               	
 110               	;----------------------------------------------------------------------
 111               	;
 112               	; is  ( u1 u2 -- u3 )
 113               	;
 114 14a0 0000 013F 	HEADER "?", "QUESTION",
 115 14a4 0000 0000 	    .word AT, DOT, ENDS
 115      0000 
 116               	
 117               	;----------------------------------------------------------------------
 118               	;
 119               	; is  ( u1 u2 -- u3 )
 120               	;
 121 14aa 0000 022E 	HEADER ".R", "DOTR",
 121      5220 
 122 14b0 0000 0000 	    .word TOR, DOTP, RTO, OVER, MINUS, SPACES, TYPE, ENDS
 122      0000 0000 
 122      0000 0000 
 122      0000 0000 
 123               	
 124               	;----------------------------------------------------------------------
 125               	;
 126               	; is  ( u1 u2 -- u3 )
 127               	;
 128 14c0 0000 0528 	HEADER "(UD.)", "UDDOTP",
 128      5544 2E29 
 129 14c8 0000 0000 	    .word LTSNUM, SNUMS, SNUMGT, ENDS
 129      0000 0000 
 130               	
 131               	;----------------------------------------------------------------------
 132               	;
 133               	; is  ( u1 u2 -- u3 )
 134               	;
 135 14d0 0000 0355 	HEADER "UD.", "UDDOT",
 135      442E 
 136 14d6 0000 0000 	    .word UDDOTP, TYPE, SPACE, ENDS
 136      0000 0000 
 137               	
 138               	;----------------------------------------------------------------------
 139               	;
 140               	; is  ( u1 u2 -- u3 )
 141               	;
 142 14de 0000 0455 	HEADER "UD.R", "UDDOTR",
 142      442E 5220 
 143 14e6 0000 0000 	    .word TOR, UDDOTP, RTO, OVER, MINUS, SPACES, TYPE, ENDS
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 144               	
 145               	;----------------------------------------------------------------------
 146               	;
 147               	; is  ( u1 u2 -- u3 )
 148               	;
 149 14f6 0000 0428 	HEADER "(D.)", "DDOTP",
 149      442E 2920 
 150 14fe 0000 0000 	    .word TUCK, DABS, LTSNUM, SNUMS, ROTU, SIGN, SNUMGT, ENDS
 150      0000 0000 
 150      0000 0000 
 150      0000 0000 
 151               	
 152               	;----------------------------------------------------------------------
 153               	;
 154               	; is  ( u1 u2 -- u3 )
 155               	;
 156 150e 0000 0244 	HEADER "D.", "DDOT",
 156      2E20 
 157 1514 0000 0000 	    .word DDOTP, TYPE, SPACE, ENDS
 157      0000 0000 
 158               	
 159               	;----------------------------------------------------------------------
 160               	;
 161               	; is  ( u1 u2 -- u3 )
 162               	;
 163 151c 0000 0344 	HEADER "D.R", "DDOTR",
 163      2E52 
 164 1522 0000 0000 	    .word TOR, DDOTP, ROTU, OVER, SPACES, TYPE, ENDS
 164      0000 0000 
 164      0000 0000 
 164      0000 
 165               	
 166               	;**********************************************************************
 167               	
 163               	
 164               	;----------------------------------------------------------------------
 165               	.p2align 1, 0x00
 166               	#include "interpreter.S"
   1               	 
   2               	/* 
   3               	 *  DISCLAIMER" 
   4               	 * 
   5               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos, 
   6               	 * 
   7               	 *  Permission is hereby granted, free of charge, to any person obtaining 
   8               	 *  a copy of this software and associated documentation files (the 
   9               	 *  "Software"), to deal in the Software without restriction, including 
  10               	 *  without limitation the rights to use, copy, modify, merge, publish, 
  11               	 *  distribute, sublicense, and/or sell copies of the Software, and to 
  12               	 *  permit persons to whom the Software is furnished to do so, subject to 
  13               	 *  the following conditions" 
  14               	 * 
  15               	 *  The above copyright notice and this permission notice shall be 
  16               	 *  included in all copies or substantial portions of the Software. 
  17               	 * 
  18               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
  19               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
  20               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
  21               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE 
  22               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION 
  23               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION 
  24               	 * 
  25               	 */ 
  26               	 
  27               	;---------------------------------------------------------------------- 
  28               	; 
  29               	; minimal interpreter, aka sector forth 
  30               	; inside routines, not for user 
  31               	; 
  32               	;---------------------------------------------------------------------- 
  33               	 
  34               	.section .text
  35               	
  36               	;---------------------------------------------------------------------- 
  37               	;
  38               	; these (words) only works in sram
  39               	;
  40               	;---------------------------------------------------------------------- 
  41               	; 
  42               	; ok ( a1 c --- a2 | 0 ) internal 
  43               	;   skips chars in address while not equal to c or 0x0 
  44               	;   not standart, 0x0 ends buffer, works only in sram 
  45               	; 
  46 1530 0000 0628 	HEADER "(skip)", "skipf", F_LEAP 
  46      736B 6970 
  46      2920 
  47 153a 0000      	    NOOP 
  48 153c 9927      	    clr tos_high 
  49 153e F991 E991 	    pspull zpm_low, zpm_high 
  50               	1: 
  51 1542 6081      	    ld nos_low, Z 
  52               	    ; if \0 
  53 1544 9617      	    cp tos_high, nos_low 
  54 1546 01F0      	    breq 2f 
  55               	    ; if c 
  56 1548 8617      	    cp tos_low, nos_low 
  57 154a 01F0      	    breq 3f 
  58 154c 3196      	    adiw zpm_low, 1 
  59 154e 00C0      	    rjmp 1b 
  60               	2: 
  61 1550 EE27      	    clr zpm_low 
  62 1552 FF27      	    clr zpm_high 
  63               	3: 
  64 1554 CF01      	    movw tos_low, zpm_low 
  65 1556 0C94 0000 	    POON 
  66               	 
  67               	;---------------------------------------------------------------------- 
  68               	; 
  69               	; ok ( a1 c --- a2 | 0 ) internal 
  70               	;   scan chars in address while equal to c or 0x0 
  71               	;   not standart, 0x0 ends buffer 
  72               	; 
  73 155a 0000 0628 	HEADER "(scan)", "scanf", F_LEAP
  73      7363 616E 
  73      2920 
  74 1564 0000      	    NOOP 
  75 1566 9927      	    clr tos_high 
  76 1568 F991 E991 	    pspull zpm_low, zpm_high 
  77               	1: 
  78 156c 6081      	    ld nos_low, Z 
  79               	    ; if \0 
  80 156e 9617      	    cp tos_high, nos_low 
  81 1570 01F0      	    breq 2f 
  82               	    ; if c 
  83 1572 8617      	    cp tos_low, nos_low 
  84 1574 01F4      	    brne 3f 
  85 1576 3196      	    adiw zpm_low, 1 
  86 1578 00C0      	    rjmp 1b 
  87               	2: 
  88 157a EE27      	    clr zpm_low 
  89 157c FF27      	    clr zpm_high 
  90               	3: 
  91 157e CF01      	    movw tos_low, zpm_low 
  92 1580 0C94 0000 	    POON 
  93               	 
  94               	;---------------------------------------------------------------------- 
  95               	; 
  96               	; ok ( a1 a2 u --- flag ) internal 
  97               	;   compare u chars from a1 to a2, 
  98               	;   not standart, max 255, no check for overlaps, works only in sram 
  99               	; 
 100 1584 0000 0628 	HEADER "(same)", "samef", F_LEAP 
 100      7361 6D65 
 100      2920 
 101 158e 0000      	    NOOP 
 102 1590 9927      	    clr tos_high 
 103 1592 7991 6991 	    pspull nos_low, nos_high 
 104 1596 F991 E991 	    pspull zpm_low, zpm_high 
 105               	 
 106 159a CE93 DE93 	    rspush psp_low, psp_high 
 107 159e EB01      	    movw psp_low, nos_low 
 108               	10: 
 109 15a0 882B      	    or tos_low, tos_low 
 110 15a2 01F0      	    breq 20f 
 111 15a4 8A95      	    dec tos_low 
 112               	 
 113 15a6 4191      	    ld wrk_low, Z+ 
 114 15a8 5991      	    ld wrk_high, Y+ 
 115 15aa 4517      	    cp wrk_low, wrk_high 
 116 15ac 01F0      	    breq 10b 
 117               	 
 118 15ae 8827      	    clr tos_low 
 119 15b0 00C0      	    rjmp 30f 
 120               	20: 
 121 15b2 8FEF      	    ser tos_low 
 122 15b4 9FEF      	    ser tos_high 
 123               	30: 
 124 15b6 0C94 0000 	    POON 
 125               	 
 126               	;---------------------------------------------------------------------- 
 127               	; 
 128               	; ok ( a1 a2 u --- a3 ) internal 
 129               	;   copy u chars from a1 into a2, forward copy, a3 = a1+u+1 
 130               	;   not standart, max 255, no check for overlaps, works only in sram 
 131               	; 
 132 15ba 0000 0628 	HEADER "(copy)", "copyf", F_LEAP 
 132      636F 7079 
 132      2920 
 133 15c4 0000      	    NOOP 
 134 15c6 9927      	    clr tos_high 
 135 15c8 7991 6991 	    pspull nos_low, nos_high 
 136 15cc F991 E991 	    pspull zpm_low, zpm_high 
 137               	 
 138 15d0 CE93 DE93 	    rspush psp_low, psp_high 
 139 15d4 EB01      	    movw psp_low, nos_low 
 140               	10: 
 141 15d6 8817      	    cp tos_low, tos_low 
 142 15d8 01F0      	    brbs BIT_ZERO, 20f 
 143               	 
 144 15da 6191      	    ld nos_low, Z+ 
 145 15dc 6993      	    st Y+, nos_low 
 146 15de 8A95      	    dec tos_low 
 147 15e0 00C0      	    rjmp 10b 
 148               	20: 
 149 15e2 DD91 CD91 	    rspull psp_low, psp_high 
 150 15e6 CF01      	    movw tos_low, zpm_low 
 151 15e8 0C94 0000 	    POON 
 152               	 
 153               	;---------------------------------------------------------------------- 
 154               	; 
 155               	; ok ( a u --- u ) 
 156               	; 
 157               	;   refills address till u chars read, u < 256 
 158               	;   not standart: 
 159               	;   always read from USART 
 160               	;   only \n \r \b, all other control turns into space 
 161               	;   appends a bl at init and a bl at end 
 162               	; 
 163 15ec 0000 0828 	HEADER "(refill)", "refillf", F_LEAP 
 163      7265 6669 
 163      6C6C 2920 
 164 15f8 0000      	    NOOP 
 165               	10: 
 166               	    ; get buffer pointer 
 167 15fa F991 E991 	    pspull zpm_low, zpm_high 
 168               	 
 169               	    ; keep a spc at start, so every word starts with spc, 
 170               	    ; used later to make a counted string 
 171               	 
 172               	    ; save for BL at end 
 173 15fe 8A95      	    dec tos_low 
 174               	 
 175               	    ; save for BL at init 
 176 1600 8A95      	    dec tos_low 
 177               	 
 178               	    ; place a BL at init 
 179 1602 40E2      	    ldi wrk_low, 32 
 180 1604 4193      	    srsave wrk_low 
 181               	 
 182               	    ; clear count 
 183 1606 9927      	    clr tos_high 
 184               	 
 185               	    ; clear last char 
 186 1608 5527      	    clr wrk_high 
 187               	 
 188               	;   loop counts from 0 to u 
 189               	20: 
 190               	    ; end of buffer ? 
 191 160a 8917      	    cp tos_low, tos_high 
 192 160c 01F0      	    brbs BIT_ZERO, 70f 
 193               	 
 194               	;   getch 
 195               	30: 
 196               	1: 
 197               	    ; waits to receive 
 198 160e 5F9B      	    sbis 0xb, 7 
 199 1610 00C0      	    rjmp 1b 
 200               	 
 201               	    ; receive a char 
 202 1612 4CB1      	    in wrk_low, 0xc 
 203               	 
 204               	    ; no 8bits 
 205 1614 4038      	    cpi wrk_low, 128 
 206 1616 04F4      	    brge 1b 
 207               	 
 208               	    ; need echo ? 
 209               	2: 
 210               	    ; wait to send 
 211 1618 5D9B      	    sbis 0x0b, 5 
 212 161a 00C0      	    rjmp 2b 
 213               	 
 214               	    ; send a char 
 215 161c 4CB9      	    out 0x0c, wrk_low 
 216               	 
 217               	; process allowed control 
 218               	 
 219               	    ; not a control 
 220 161e 4E31      	    cpi wrk_low, 30 
 221 1620 04F4      	    brge 60f 
 222               	 
 223               	40: 
 224               	    ; verify CR \r 
 225 1622 4D30      	    cpi wrk_low, 13 ; CR 
 226 1624 01F0      	    breq 70f 
 227               	 
 228               	    ; verify LF \n 
 229 1626 4A30      	    cpi wrk_low, 10 ; LF 
 230 1628 01F0      	    breq 70f 
 231               	 
 232               	44: 
 233               	    ; verify BS \b 
 234 162a 4830      	    cpi wrk_low, 8 ; BS 
 235 162c 01F4      	    brne 50f 
 236               	 
 237               	    ; process BS 
 238               	    ; no char ? 
 239 162e 9917      	    cp tos_high, tos_high 
 240 1630 01F0      	    brbs BIT_ZERO, 30b 
 241               	 
 242               	    ; back one 
 243 1632 9A95      	    dec tos_high 
 244 1634 3197      	    sbiw zpm_low, 1 
 245 1636 00C0      	    rjmp 30b 
 246               	 
 247               	50: 
 248               	    ; not allow more controls 
 249               	    ; magic to 32 
 250 1638 40E2      	    ldi wrk_low, 32 
 251               	 
 252               	; process ASCII chars 
 253               	60: 
 254               	    ; is a spc ? 
 255 163a 4032      	    cpi wrk_low, 32 
 256 163c 01F4      	    brne 62f 
 257               	 
 258               	    ; highlander it ! 
 259               	    ; ( collapse spaces ) 
 260 163e 4517      	    cp wrk_low, wrk_high 
 261 1640 01F0      	    breq 30b 
 262               	 
 263               	62: 
 264               	.ifdef UPPERCASE 
 265               	    ; to uppercase 
 266               	    cpi wrk_low, 61 
 267               	    brge 64f 
 268               	    cpi wrk_low, 123 
 269               	    brge 64f 
 270               	    subi wrk_low, 32 
 271               	.endif 
 272               	 
 273               	64: 
 274               	    ; save char to buffer 
 275 1642 9395      	    inc tos_high 
 276 1644 4193      	    srsave wrk_low 
 277 1646 542F      	    mov wrk_high, wrk_low 
 278 1648 00C0      	    rjmp 20b 
 279               	 
 280               	70: 
 281               	    ; push counter 
 282               	    ; place a BL at end 
 283 164a 40E2      	    ldi wrk_low, 32 
 284 164c 4193      	    srsave wrk_low 
 285               	 
 286               	    ; save counter 
 287 164e 892F      	    mov tos_low, tos_high 
 288 1650 9927      	    clr tos_high 
 289 1652 0C94 0000 	    POON 
 290               	 
 291               	 
 292               	;---------------------------------------------------------------------- 
 293               	; 
 294               	; ok ( a c --- a u | 0 ) 
 295               	;    find a word delimited by c 
 296               	;    returns address and u lenght or zero if no c or \0 
 297               	;    max lenght is 255 bytes 
 298               	; 
 299 1656 0000 0628 	HEADER "(word)", "wordf", F_LEAP
 299      776F 7264 
 299      2920 
 300 1660 0000      	    NOOP 
 301               	    ; start at 
 302 1662 F991 E991 	    pspull zpm_low, zpm_high 
 303               	    ; for \0 check 
 304 1666 9927      	    clr tos_high 
 305 1668 00C0      	    rjmp _wsto 
 306               	 
 307               	;---------------------------------------------------------------------- 
 308               	; 
 309               	; ok ( a c --- a u | 0 ) 
 310               	;    find a for c 
 311               	;    returns address and u lenght or zero if no c or \0 
 312               	;    max lenght is 255 bytes 
 313               	; 
 314 166a 0000 0728 	HEADER "(parse)", "parsef", F_LEAP
 314      7061 7273 
 314      6529 
 315 1674 0000      	    NOOP 
 316               	    ; start at 
 317 1676 F991 E991 	    pspull zpm_low, zpm_high 
 318               	    ; for \0 check 
 319 167a 9927      	    clr tos_high 
 320 167c 00C0      	    rjmp _tows; 
 321               	
 322               	;---------------------------------------------------------------------- 
 323               	; 
 324               	;   pass trhu 
 325               	; 
 326               	_wsto: 
 327               	1: 
 328               	    ; skips while equal delimiter 
 329 167e 6081      	    ld nos_low, Z 
 330               	    ; if \0 
 331 1680 9617      	    cp tos_high, nos_low 
 332 1682 01F0      	    breq 10f 
 333 1684 8617      	    cp tos_low, nos_low 
 334 1686 01F4      	    brne 2f 
 335 1688 3196      	    adiw zpm_low, 1 
 336 168a 00C0      	    rjmp 1b 
 337               	 
 338               	_tows: 
 339               	2: 
 340               	    ; keep address 
 341 168c AF01      	    movw wrk_low, zpm_low 
 342               	 
 343               	3: 
 344               	    ; scans while not equal delimiter 
 345 168e 6081      	    ld nos_low, Z 
 346               	    ; if \0 
 347 1690 9617      	    cp tos_high, nos_low 
 348 1692 01F0      	    breq 10f 
 349 1694 8617      	    cp tos_low, nos_low 
 350 1696 01F0      	    breq 4f 
 351 1698 3196      	    adiw zpm_low, 1 
 352 169a 00C0      	    rjmp 3b 
 353               	 
 354               	_wsat: 
 355               	4: 
 356               	    ; found 
 357 169c E41B      	    sub zpm_low, wrk_low 
 358 169e F50B      	    sbc zpm_high, wrk_high 
 359 16a0 4A93 5A93 	    pspush wrk_low, wrk_high 
 360 16a4 CF01      	    movw tos_low, zpm_low 
 361 16a6 00C0      	    rjmp 20f 
 362               	15: 
 363               	    ; end of buffer 
 364 16a8 8827      	    clr tos_low 
 365 16aa 9927      	    clr tos_high 
 366               	20: 
 367 16ac 0C94 0000 	    POON 
 368               	 
 369               	;---------------------------------------------------------------------- 
 370               	;   
 371               	;   verify if a value is a valid char in actual BASE
 372               	;   return FALSE or TRUE
 373               	;   eg. base 16, 0-9~A-F
 374               	;
 375 16b0 0000 0728 	HEADER "(digit)", "digitf", F_LEAP
 375      6469 6769 
 375      7429 
 376 16ba 0000      	    NOOP 
 377               	    ; convert from ASCII
 378 16bc 8053      	    subi tos_low, '0'
 379               	    ; check for < 0
 380 16be 8030      	    cpi tos_low, 0
 381 16c0 04F0      	    brlt 2f
 382               	    ; check for < 9
 383 16c2 8930      	    cpi tos_low, 9
 384 16c4 04F0      	    brlt 1f
 385               	    ; check for < A
 386 16c6 8131      	    cpi tos_low, 17
 387 16c8 04F0      	    brlt 2f
 388               	    ; convert 'A'
 389 16ca 8750      	    subi tos_low, 7
 390               	    ; get actual base 
 391 16cc 9091 0000 	    lds tos_high, BASE+0 
 392               	    ; check for < BASE
 393 16d0 9817      	    cp tos_high, tos_low
 394 16d2 04F4      	    brge 2f
 395               	    ; return true
 396 16d4 9FEF      	1:  ser tos_high
 397 16d6 8FEF      	    ser tos_low
 398               	    ; return false
 399 16d8 00C0      	    rjmp 3f
 400 16da 9927      	2:  clr tos_high
 401 16dc 8827      	    clr tos_low
 402 16de 0C94 0000 	3:  POON
 403               	
 404               	; too far for rjmp
 405               	;1:  rjmp _iftrue
 406               	;2:  rjmp _iffalse
 407               	
 408               	;---------------------------------------------------------------------- 
 409               	; 
 410               	;   not official ! (ud1 c-addr1 u1 -- ud2 c-addr2 u2) 
 411               	; 
 412               	;    ok ( a n -- u2 true | false ) 
 413               	;    assumes address n chars 
 414               	;    f flag is (Out-of-Range, Not-a-Number, Invalid-Number,) FALSE or TRUE 
 415               	;    uses all but X, Y 
 416               	;    tos, nos, wrk, Z, _zero_, _work_, r0, r1 
 417               	; 
 418 16e2 0000 0828 	HEADER "(number)", "numberf", F_LEAP
 418      6E75 6D62 
 418      6572 2920 
 419 16ee 0000      	    NOOP 
 420               	 
 421               	    ; tst for c < 1 
 422               	 
 423 16f0 9927      	    clr tos_high 
 424 16f2 9817      	    cp tos_high, tos_low 
 425 16f4 04F0      	    brlt 10f 
 426               	 
 427               	    ; not valid size c < 1 
 428 16f6 8A93 9A93 	    pspush tos_low, tos_high 
 429 16fa 00C0      	    rjmp 70f 
 430               	 
 431               	10: 
 432               	    ; pull address from 
 433 16fc F991 E991 	    pspull zpm_low, zpm_high 
 434               	 
 435               	    ; keep counter 
 436 1700 BC01      	    movw nos_low, tos_low 
 437               	 
 438               	    ; clear result 
 439 1702 8827      	    clr tos_low 
 440 1704 9927      	    clr tos_high 
 441               	 
 442               	    ; get actual base 
 443 1706 7090 0000 	    lds _work_, BASE+0 
 444               	 
 445               	20: 
 446               	    ; test end of loop 
 447 170a 6717      	    cp nos_low, nos_high 
 448 170c 01F4      	    brne 30f 
 449 170e 00C0      	    rjmp 80f 
 450               	 
 451               	30: 
 452               	    ; load a char 
 453 1710 4191      	    srload wrk_low 
 454               	 
 455               	    ; allow first char change base 
 456 1712 7723      	    tst nos_high 
 457 1714 01F4      	    brne 40f 
 458               	 
 459               	    ; goes hexadecimal 
 460 1716 4432      	    cpi wrk_low, '$' 
 461 1718 01F4      	    brne 32f 
 462 171a 40E1      	    ldi wrk_low, 16 
 463 171c 742E      	    mov _work_, wrk_low 
 464 171e 00C0      	    rjmp 20b 
 465               	 
 466               	32: 
 467               	    ; goes decimal 
 468 1720 4332      	    cpi wrk_low, '#' 
 469 1722 01F4      	    brne 34f 
 470 1724 4AE0      	    ldi wrk_low, 10 
 471 1726 742E      	    mov _work_, wrk_low 
 472 1728 00C0      	    rjmp 20b 
 473               	 
 474               	34: 
 475               	    ; goes binary 
 476 172a 4532      	    cpi wrk_low, '%' 
 477 172c 01F4      	    brne 36f 
 478 172e 42E0      	    ldi wrk_low, 2 
 479 1730 742E      	    mov _work_, wrk_low 
 480 1732 00C0      	    rjmp 20b 
 481               	 
 482               	36: 
 483               	    ; how do negative ? just two-complement at end 
 484 1734 4D32      	    cpi wrk_low, '-' 
 485 1736 01F4      	    brne 38f 
 486 1738 51E0      	    ldi wrk_high, 1 
 487 173a 7A95      	    dec nos_high 
 488 173c 00C0      	    rjmp 20b 
 489               	 
 490               	38: 
 491               	    ; how do positive ? just no two-complement at end 
 492 173e 4B32      	    cpi wrk_low, '+' 
 493 1740 01F4      	    brne 40f 
 494 1742 50E0      	    ldi wrk_high, 0 
 495 1744 7A95      	    dec nos_high 
 496 1746 00C0      	    rjmp 20b 
 497               	 
 498               	38: 
 499               	    ; no more bases, no octal, no duodecimal, no hexagesimal 
 500               	 
 501               	40: 
 502               	    ; paranoic test end 
 503               	 
 504 1748 4030      	    cpi wrk_low, 0 
 505 174a 01F0      	    breq 80f 
 506               	 
 507 174c 4032      	    cpi wrk_low, 32 
 508 174e 01F0      	    breq 80f 
 509               	 
 510               	    ; mask lowercases 
 511 1750 4136      	    cpi wrk_low, 'a' 
 512 1752 04F0      	    brlt 45f 
 513 1754 4052      	    subi wrk_low, 32 
 514               	 
 515               	45: 
 516               	    ; reduce 
 517 1756 4053      	    subi wrk_low, '0' 
 518               	 
 519               	    ; less than 0 ? 
 520 1758 4030      	    cpi wrk_low, 0 
 521 175a 04F0      	    brlt 70f 
 522               	 
 523               	    ; less than 9 ? 
 524 175c 4A30      	    cpi wrk_low, 10 
 525 175e 04F0      	    brlt 50f 
 526               	 
 527               	    ; mind the gap 0-9 ~ A-F 
 528 1760 4750      	    subi wrk_low, 7 
 529               	 
 530               	50: 
 531               	    ; over base ? 
 532 1762 4715      	    cp wrk_low, _work_ 
 533 1764 04F4      	    brge 70f 
 534               	 
 535               	; easy way 
 536               	; bases 2, 8, 10, 16 
 537               	 
 538 1766 840F      	    add tos_low, wrk_low 
 539 1768 961D      	    adc tos_high, _zero_ 
 540               	 
 541               	    ; set value 
 542 176a 0C01      	    movw R0, tos_low 
 543               	 
 544               	    ; set base 
 545 176c 4715      	    cp wrk_low, _work_ 
 546               	 
 547               	; 2 
 548               	_bin_base: 
 549 176e 000C      	    lsl R0 
 550 1770 111C      	    rol R1 
 551 1772 4230      	    cpi wrk_low, 2 
 552 1774 01F0      	    breq _next_digit 
 553               	 
 554               	    ; keep for decimal or odds 
 555 1776 C001      	    movw tos_low, R0 
 556               	 
 557               	; 4 
 558               	_nib_base: 
 559 1778 000C      	    lsl R0 
 560 177a 111C      	    rol R1 
 561               	    ; cpi wrk_low, 4 
 562               	    ; breq _next_digit 
 563               	 
 564               	; 8 
 565               	_oct_base: 
 566 177c 000C      	    lsl R0 
 567 177e 111C      	    rol R1 
 568               	    ; cpi wrk_low, 8 
 569               	    ; breq _next_digit 
 570               	 
 571               	;10 
 572               	_dec_base: 
 573 1780 4A30      	    cpi wrk_low, 10 
 574 1782 01F4      	    brne _hex_base 
 575               	 
 576 1784 080E      	    add R0, tos_low 
 577 1786 191E      	    adc R1, tos_high 
 578 1788 00C0      	    rjmp _next_digit 
 579               	 
 580               	; 16 
 581               	_hex_base: 
 582 178a 000C      	    lsl R0 
 583 178c 111C      	    rol R1 
 584 178e 4031      	    cpi wrk_low, 16 
 585 1790 01F0      	    breq _next_digit 
 586               	 
 587               	; overflow ? 
 588 1792 00F4      	    brcc _next_digit 
 589 1794 00C0      	    rjmp 70f 
 590               	 
 591               	; next digit 
 592               	_next_digit: 
 593 1796 C001      	    movw tos_low, R0 
 594               	 
 595               	60: 
 596               	    ; count digits 
 597 1798 7395      	    inc nos_high 
 598               	 
 599               	    ; next digit 
 600 179a 00C0      	    rjmp 10b 
 601               	 
 602               	70: 
 603               	    ; (Underflow, Overflow, Not_a_Number, Out_of_Range, Invalid_numeric_Argument) 
 604 179c 4427      	    clr wrk_low 
 605 179e 5527      	    clr wrk_high 
 606 17a0 00C0      	    rjmp 100f 
 607               	 
 608               	80: 
 609               	    ; if positive 
 610 17a2 5030      	    cpi wrk_high, 0 
 611 17a4 01F0      	    breq 90f 
 612               	 
 613               	    ; 2's complement 
 614 17a6 8095      	    com tos_low 
 615 17a8 9095      	    com tos_high 
 616 17aa 0196      	    adiw tos_low, 1 
 617               	 
 618               	    ; underflow 
 619 17ac 00F0      	    brcs 70b 
 620               	 
 621               	90: 
 622               	    ; push result 
 623 17ae 8A93 9A93 	    pspush tos_low, tos_high 
 624               	 
 625               	    ; made true 
 626 17b2 4FEF      	    ser wrk_low 
 627 17b4 5FEF      	    ser wrk_high 
 628               	 
 629               	100: 
 630               	    ; push digits 
 631 17b6 CA01      	    movw tos_low, wrk_low 
 632 17b8 0C94 0000 	    POON 
 633               	 
 634               	;---------------------------------------------------------------------- 
 635               	; 
 636               	; ok find a word in a vocabulary 
 637               	;   ( aw u ad -- xt f | a 0 ) 
 638               	;    ad link to dictionary 
 639               	;    aw address to word 
 640               	;    u  length 
 641               	;   f is  1 if word is immediate 
 642               	;   f is -1 if word is normal 
 643               	;   f is  0 if word not found 
 644               	;   names are 15 maximum 
 645               	; 
 646               	;   dictionary is in flash and word is in sram 
 647               	; 
 648 17bc 0000 0628 	HEADER "(find)", "findf", F_LEAP
 648      6669 6E64 
 648      2920 
 649 17c6 0000      	    NOOP 
 650               	 
 651               	    ; load address dictionary 
 652 17c8 FC01      	    movw zpm_low, tos_low 
 653               	 
 654               	    ; load counter 
 655 17ca 9991 8991 	    pspull tos_low, tos_high 
 656               	 
 657               	    ; load address word 
 658 17ce 7991 6991 	    pspull nos_low, nos_high 
 659               	 
 660               	    ; save stack 
 661 17d2 CE93 DE93 	    rspush psp_low, psp_high 
 662               	 
 663               	    ; save address word 
 664 17d6 6E93 7E93 	    rspush nos_low, nos_high 
 665               	 
 666               	    ; move address to Y ! always check in macros.S 
 667 17da EB01      	    movw psp_low, nos_low 
 668               	 
 669               	    ; prepare loop 
 670               	 
 671               	    ; save word count 
 672 17dc 982F      	    mov tos_high, tos_low 
 673               	 
 674               	    ; push aword for first loop 
 675 17de CE93 DE93 	    rspush psp_low, psp_high 
 676               	 
 677               	    ; push alist for first loop 
 678 17e2 EE93 FE93 	    rspush zpm_low, zpm_high 
 679               	 
 680               	10: 
 681               	    ; load link 
 682 17e6 FD91 ED91 	    rspull zpm_low, zpm_high 
 683               	 
 684               	    ; load address 
 685 17ea EE0F FF1F 	    pmload wrk_low, wrk_high 
 685      4591 5591 
 685      F795 E795 
 686               	 
 687               	    ; if null, list ends 
 688 17f6 4517      	    cp wrk_low, wrk_high 
 689 17f8 01F0      	    brbs BIT_ZERO, 26f 
 690               	 
 691               	    ; save next link 
 692 17fa 4E93 5E93 	    rspush wrk_low, wrk_high 
 693               	 
 694               	    ; load size and first char 
 695 17fe EE0F FF1F 	    pmload nos_low, nos_high 
 695      6591 7591 
 695      F795 E795 
 696               	 
 697               	    ; save for flags 
 698 180a 562F      	    mov wrk_high, nos_low 
 699               	 
 700               	    ; must ummask 
 701 180c 6F70      	    andi nos_low, F_UNMASK 
 702               	 
 703               	    ; ping-pong 
 704               	    ; verify sizes 
 705 180e 6817      	    cp nos_low, tos_low 
 706 1810 01F4      	    brne 10b 
 707               	 
 708               	    ; points to a1 
 709 1812 4991      	    ld wrk_low, Y+ 
 710               	 
 711               	    ; verify first char 
 712 1814 4717      	    cp wrk_low, nos_high 
 713 1816 01F4      	    brne 10b 
 714               	 
 715               	    ; prepare count down 
 716 1818 892F      	    mov tos_low, tos_high 
 717               	 
 718               	14: 
 719               	    ; verify next chars 
 720 181a 8A95      	    dec tos_low 
 721 181c 01F0      	    brbs BIT_ZERO, 20f 
 722               	 
 723 181e EE0F FF1F 	    pmload nos_low, nos_high 
 723      6591 7591 
 723      F795 E795 
 724               	 
 725 182a 4991      	    ld wrk_low, Y+ 
 726 182c 4617      	    cp wrk_low, nos_low 
 727 182e 01F4      	    brne 10b 
 728               	 
 729 1830 8A95      	    dec tos_low 
 730 1832 01F0      	    brbs BIT_ZERO, 20f 
 731               	 
 732 1834 4991      	    ld wrk_low, Y+ 
 733 1836 4717      	    cp wrk_low, nos_high 
 734 1838 01F4      	    brne 10b 
 735               	 
 736               	    ; next chars 
 737 183a 00C0      	    rjmp 14b 
 738               	 
 739               	20: 
 740               	    ; found 
 741               	    ; anyway zpm is ever even 
 742               	 
 743               	    ; return flags 
 744 183c 5074      	    andi wrk_high, F_IMMEDIATE 
 745 183e 01F4      	    brne 24f 
 746               	 
 747               	22: 
 748               	    ; immediate (1) 
 749 1840 8827      	    clr tos_low 
 750 1842 9927      	    clr tos_high 
 751 1844 8395      	    inc tos_low 
 752 1846 00C0      	    rjmp 30f 
 753               	24: 
 754               	    ; common (-1) 
 755 1848 8FEF      	    ser tos_low 
 756 184a 9FEF      	    ser tos_high 
 757 184c 00C0      	    rjmp 30f 
 758               	26: 
 759               	    ; not found (0) 
 760 184e 8827      	    clr tos_low 
 761 1850 8827      	    clr tos_low 
 762               	30: 
 763               	    ; drops references 
 764 1852 5D91 4D91 	    rspull wrk_low, wrk_high 
 765 1856 5D91 4D91 	    rspull wrk_low, wrk_high 
 766               	 
 767               	    ; copy wt 
 768 185a 5D91 4D91 	    rspull wrk_low, wrk_high 
 769               	 
 770 185e 8030      	    cpi tos_low, 0 
 771 1860 01F0      	    brbs BIT_ZERO, 40f 
 772               	 
 773               	    ; copy (xt) 
 774 1862 AF01      	    movw wrk_low, zpm_low 
 775               	 
 776               	40: 
 777               	    ; restore psp 
 778 1864 DD91 CD91 	    rspull psp_low, psp_high 
 779               	 
 780               	    ; push result address 
 781 1868 4A93 5A93 	    pspush wrk_low, wrk_high 
 782               	 
 783               	    ; save results 
 784 186c 0C94 0000 	    POON 
 785               	 
 786               	;---------------------------------------------------------------------- 
 787               	; 
 788               	; is NULLS 
 789               	; Dr Ting 'coyote'
 790               	;
 791 1870 0000 044E 	HEADER "NULL", "NULL", 
 791      554C 4C20 
 792 1878 0000      	    .word 0x0
 793 187a 636F 796F 	    .asciz "coyote"
 793      7465 00
 794 1881 0000      	    .word ENDS 
 795               	 
 796               	;********************************************************************** 
 797               	; 
 798               	; almost figforth, http://forthfiles.net/ting/sysguidefig.pdf, pg 84 
 799               	; 
 800               	;---------------------------------------------------------------------- 
 801               	 
 802               	;----------------------------------------------------------------------
 803               	;
 804               	; ok error scopes
 805               	;
 806               	;----------------------------------------------------------------------
 807               	;
 808               	;   ok ( f n -- )
 809               	;   FALSE is 0
 810               	;   
 811 1883 0000 0006 	HEADER "?ERROR", "QERROR", 
 811      3F45 5252 
 811      4F52 20
 812 188e 0000 0000 	    .word SWAP, ZBRANCH, 2f
 812      0000 
 813 1894 0000 0000 	    .word DROP, BRANCH, 4f
 813      0000 
 814 189a 0000 0000 	2:  .word NONEN, DOT, CR, QUIT
 814      0000 0000 
 815 18a2 0000      	4:  .word ENDS
 816               	
 817               	;----------------------------------------------------------------------
 818               	; not compiling
 819 18a4 0000 053F 	HEADER "?COMP", "QCOMP", 
 819      434F 4D50 
 820 18ac 0000 0000 	    .word STATE, AT, ZEQU, LIT, 11, QERROR, ENDS
 820      0000 0000 
 820      0B00 0000 
 820      0000 
 821               	
 822               	; not executing
 823 18ba 0000 053F 	HEADER "?EXEC", "QEXEC", 
 823      4558 4543 
 824 18c2 0000 0000 	    .word STATE, AT, ONEMINUS, ZEQU, LIT, 12, QERROR, ENDS
 824      0000 0000 
 824      0000 0C00 
 824      0000 0000 
 825               	
 826               	;----------------------------------------------------------------------
 827 18d2 0000 043F 	HEADER "?CSP", "QCSP", 
 827      4353 5020 
 828 18da 0000 0000 	    .word PSAT, CSP, AT, MINUS, LIT, 14, QERROR, ENDS
 828      0000 0000 
 828      0000 0E00 
 828      0000 0000 
 829               	
 830               	; parameter stack underflow or overflow
 831 18ea 0000 063F 	HEADER "?STACK", "QSTACK", 
 831      5354 4143 
 831      4B20 
 832 18f4 0000 0000 	    .word PSAT, PS0, GTHAN, LIT, 1, QERROR ; underflow
 832      0000 0000 
 832      0100 0000 
 833 1900 0000 0000 	    .word PSAT, PS0, MINUS, LIT, STACK_SIZE, MINUS, LIT, 7, QERROR ; overflow 
 833      0000 0000 
 833      2400 0000 
 833      0000 0700 
 833      0000 
 834 1912 0000      	    .word ENDS 
 835               	
 836               	;----------------------------------------------------------------------
 837 1914 0000 053F 	HEADER "?PAIR", "QPAIR", 
 837      5041 4952 
 838 191c 0000 0000 	    .word MINUS, LIT, 13, QERROR, ENDS
 838      0D00 0000 
 838      0000 
 839               	
 840               	; stack not same 
 841               	; conditionals match
 842               	; 1 hook back
 843               	; 2 if else then endif
 844               	; 3 begin again until
 845               	; 4 while repeat
 846               	; 5 for next
 847               	; 6 case endcase
 848               	; 7 of endof
 849               	; 8 do loop +loop -loop leave
 850               	;
 851 1926 0000 6448 	HEADER "HOOK", "QHOOK", F_IMMEDIATE | F_COMPILE
 851      4F4F 4B20 
 852 192e 0000 0000 	    .word QCOMP, HOOK, LIT, 0x01, ENDS
 852      0000 0100 
 852      0000 
 853               	
 854 1938 0000 6442 	HEADER "BACK", "QBACK", F_IMMEDIATE | F_COMPILE
 854      4143 4B20 
 855 1940 0000 0000 	    .word QCOMP, LIT, 0x01, QPAIR, BACK, ENDS
 855      0100 0000 
 855      0000 0000 
 856               	
 857 194c 0000 6249 	HEADER "IF", "QIF", F_IMMEDIATE | F_COMPILE
 857      4620 
 858 1952 0000 0000 	    .word QCOMP, IF, LIT, 0x02, ENDS
 858      0000 0200 
 858      0000 
 859               	
 860 195c 0000 6445 	HEADER "ELSE", "QELSE", F_IMMEDIATE | F_COMPILE
 860      4C53 4520 
 861 1964 0000 0000 	    .word QCOMP, LIT, 0x02, QPAIR, LIT, 0x02, ELSE, ENDS
 861      0200 0000 
 861      0000 0200 
 861      0000 0000 
 862               	
 863 1974 0000 6545 	HEADER "ENDIF", "QENDIF", F_IMMEDIATE | F_COMPILE
 863      4E44 4946 
 864 197c 0000 0000 	    .word QCOMP, LIT, 0x02, QPAIR, ENDIF, ENDS
 864      0200 0000 
 864      0000 0000 
 865               	
 866 1988 0000 6454 	HEADER "THEN", "QTHEN", F_IMMEDIATE | F_COMPILE
 866      4845 4E20 
 867 1990 0000 0000 	    .word QCOMP, LIT, 0x02, QPAIR, ENDIF, ENDS
 867      0200 0000 
 867      0000 0000 
 868               	
 869 199c 0000 6541 	HEADER "AHEAD", "QAHEAD", F_IMMEDIATE | F_COMPILE
 869      4845 4144 
 870 19a4 0000 0000 	    .word QCOMP, GO, LIT, 0x02, ENDS
 870      0000 0200 
 870      0000 
 871               	
 872 19ae 0000 6341 	HEADER "AFT", "QAFT", F_IMMEDIATE | F_COMPILE
 872      4654 
 873 19b4 0000 0000 	    .word QCOMP, LIT, 0x02, QPAIR, AFT, LIT, 0x02, ENDS
 873      0200 0000 
 873      0000 0000 
 873      0200 0000 
 874               	
 875 19c4 0000 6542 	HEADER "BEGIN", "QBEGIN", F_IMMEDIATE | F_COMPILE
 875      4547 494E 
 876 19cc 0000 0000 	    .word QCOMP, BEGIN, LIT, 0x03, ENDS
 876      0000 0300 
 876      0000 
 877               	
 878 19d6 0000 6541 	HEADER "AGAIN", "QAGAIN", F_IMMEDIATE | F_COMPILE
 878      4741 494E 
 879 19de 0000 0000 	    .word QCOMP, LIT, 0x03, QPAIR, AGAIN, ENDS
 879      0300 0000 
 879      0000 0000 
 880               	
 881 19ea 0000 6555 	HEADER "UNTIL", "QUNTIL", F_IMMEDIATE | F_COMPILE
 881      4E54 494C 
 882 19f2 0000 0000 	    .word QCOMP, LIT, 0x03, QPAIR, UNTIL, ENDS
 882      0300 0000 
 882      0000 0000 
 883               	
 884 19fe 0000 6557 	HEADER "WHILE", "QWHILE", F_IMMEDIATE | F_COMPILE
 884      4849 4C45 
 885 1a06 0000 0000 	    .word QCOMP, LIT, 0x03, QPAIR, WHILE, LIT, 0x04, ENDS
 885      0300 0000 
 885      0000 0000 
 885      0400 0000 
 886               	
 887 1a16 0000 6652 	HEADER "REPEAT", "QREPEAT", F_IMMEDIATE | F_COMPILE
 887      4550 4541 
 887      5420 
 888 1a20 0000 0000 	    .word QCOMP, LIT, 0x04, QPAIR, REPEAT, ENDS
 888      0400 0000 
 888      0000 0000 
 889               	
 890 1a2c 0000 6346 	HEADER "FOR", "QFOR", F_IMMEDIATE | F_COMPILE
 890      4F52 
 891 1a32 0000 0000 	    .word QCOMP, FOR, LIT, 0x05, ENDS
 891      0000 0500 
 891      0000 
 892               	
 893 1a3c 0000 644E 	HEADER "NEXT", "QNEXT", F_IMMEDIATE | F_COMPILE
 893      4558 5420 
 894 1a44 0000 0000 	    .word QCOMP, LIT, 0x05, QPAIR, NEXT, ENDS
 894      0500 0000 
 894      0000 0000 
 895               	
 896 1a50 0000 6443 	HEADER "CASE", "QCASE", F_IMMEDIATE | F_COMPILE
 896      4153 4520 
 897 1a58 0000 0000 	    .word QCOMP, CASE, LIT, 0x06, ENDS
 897      0000 0600 
 897      0000 
 898               	
 899 1a62 0000 6745 	HEADER "ENDCASE", "QENDCASE", F_IMMEDIATE | F_COMPILE
 899      4E44 4341 
 899      5345 
 900 1a6c 0000 0000 	    .word QCOMP, LIT, 0x06, QPAIR, ENDCASE, ENDS
 900      0600 0000 
 900      0000 0000 
 901               	
 902 1a78 0000 624F 	HEADER "OF", "QOF", F_IMMEDIATE | F_COMPILE
 902      4620 
 903 1a7e 0000 0000 	    .word QCOMP, LIT, 0x06, OF, QPAIR, 0x07, ENDS
 903      0600 0000 
 903      0000 0700 
 903      0000 
 904               	
 905 1a8c 0000 6545 	HEADER "ENDOF", "QENDOF", F_IMMEDIATE | F_COMPILE
 905      4E44 4F46 
 906 1a94 0000 0000 	    .word QCOMP, LIT, 0x07, QPAIR, ENDOF, LIT, 0x06, ENDS
 906      0700 0000 
 906      0000 0000 
 906      0600 0000 
 907               	
 908 1aa4 0000 6244 	HEADER "DO", "QDO", F_IMMEDIATE | F_COMPILE
 908      4F20 
 909 1aaa 0000 0000 	    .word QCOMP, DO, LIT, 0x08, ENDS
 909      0000 0800 
 909      0000 
 910               	
 911 1ab4 0000 644C 	HEADER "LOOP", "QLOOP", F_IMMEDIATE | F_COMPILE
 911      4F4F 5020 
 912 1abc 0000 0000 	    .word QCOMP, LIT, 0x08, QPAIR, LOOP, ENDS
 912      0800 0000 
 912      0000 0000 
 913               	
 914 1ac8 0000 652B 	HEADER "+LOOP", "QPLOOP", F_IMMEDIATE | F_COMPILE
 914      4C4F 4F50 
 915 1ad0 0000 0000 	    .word QCOMP, LIT, 0x08, QPAIR, PLOOP, ENDS
 915      0800 0000 
 915      0000 0000 
 916               	
 917 1adc 0000 654C 	HEADER "LEAVE", "QLEAVE", F_IMMEDIATE | F_COMPILE
 917      4541 5645 
 918 1ae4 0000 0000 	    .word QCOMP, LIT, 0x08, QPAIR, LEAVE, LIT, 0x08, ENDS
 918      0800 0000 
 918      0000 0000 
 918      0800 0000 
 919               	
 920 1af4 0000 6655 	HEADER "UNLOOP", "QUNLOOP", F_IMMEDIATE | F_COMPILE
 920      4E4C 4F4F 
 920      5020 
 921 1afe 0000 0000 	    .word QCOMP, LIT, 0x08, QPAIR, UNLOOP, LIT, 0x08, ENDS
 921      0800 0000 
 921      0000 0000 
 921      0800 0000 
 922               	
 923               	
 924               	;********************************************************************** 
 925               	; 
 926               	; almost forth94 
 927               	; 
 928               	;---------------------------------------------------------------------- 
 929               	 
 930               	;----------------------------------------------------------------------
 931               	;
 932               	; ok make a value ( w -- )
 933               	; header|lit|value|ends
 934               	; zzzz
 935 1b0e 0000 0556 	HEADER "VALUE", "VALUE", 
 935      414C 5545 
 936 1b16 0000 0000 	    .word CREATE, DROP, LITERAL, ENDS
 936      0000 0000 
 937               	
 938               	;----------------------------------------------------------------------
 939               	;
 940               	; ok make a to value 
 941               	; change value 
 942 1b1e 0000 4254 	HEADER "TO", "TOVALUE", F_IMMEDIATE
 942      4F20 
 943 1b24 0000 0000 	    .word FIND, CELLPLUS, TO, ENDS
 943      0000 0000 
 944               	
 945               	;----------------------------------------------------------------------
 946               	;
 947               	; ok make a defer
 948               	; defaults to UNDEF
 949               	; 
 950 1b2c 0000 0544 	HEADER "DEFER", "DEFER", 
 950      4546 4552 
 951 1b34 0000 0000 	    .word CREATE, LIT, UNDEF, LIT, BRANCH, COMMA, COMMA, ENDS
 951      0000 0000 
 951      0000 0000 
 951      0000 0000 
 952               	
 953               	;----------------------------------------------------------------------
 954               	;
 955               	; ok make a is 
 956               	;
 957 1b44 0000 4249 	HEADER "IS", "ISDEFER", F_IMMEDIATE
 957      5320 
 958 1b4a 0000 0000 	    .word FIND, CELLPLUS, SWAP, TO, ENDS
 958      0000 0000 
 958      0000 
 959               	
 960               	;---------------------------------------------------------------------- 
 961               	; 
 962               	; ok SLASHMOVE (a1 a2 u -- ) 
 963               	;   moves CELLS ! backwards
 964 1b54 0000 0653 	HEADER "SSMOVE", "SSMOVE", 
 964      534D 4F56 
 964      4520 
 965 1b5e 0000 0000 		.word ZDUP, ZBRANCH, 80f
 965      0000 
 966 1b64 0000 0000 		.word DUP, TOR, DUP, OVER, PLUS					
 966      0000 0000 
 966      0000 
 967 1b6e 0000 0000 		.word TOR, PLUS, RTO, RTO
 967      0000 0000 
 968 1b76 0000 0000 	1:  .word ZDUP, ZBRANCH, 80f
 968      0000 
 969 1b7c 0000 0000 	    .word ONEMINUS, TOR
 970 1b80 0000 0000 	    .word OVER, AT 
 971               	    
 972               	    ; escaped controls allowed
 973               	
 974 1b84 0000 0000 	    .word DUP, LIT, '\', EQUAL, ZBRANCH, 60f
 974      2700 0000 
 974      0000 0000 
 975 1b90 0000 0000 	10:    .word DUP, LIT, 'a', EQUAL, ZBRANCH,  12  ; BEL bell
 975      6100 0000 
 975      0000 0C00 
 976 1b9c 0000 0000 	    .word DROP, LIT, 7, BRANCH, 60f
 976      0700 0000 
 976      0000 
 977 1ba6 0000 0000 	12:    .word DUP, LIT, 'b', EQUAL, ZBRANCH,  14  ; BS backspace
 977      6200 0000 
 977      0000 0E00 
 978 1bb2 0000 0000 	    .word DROP, LIT, 8, BRANCH, 60f
 978      0800 0000 
 978      0000 
 979 1bbc 0000 0000 	14:    .word DUP, LIT, 'e', EQUAL, ZBRANCH,  16  ; ESC escape
 979      6500 0000 
 979      0000 1000 
 980 1bc8 0000 0000 	    .word DROP, LIT, 27, BRANCH, 60f
 980      1B00 0000 
 980      0000 
 981 1bd2 0000 0000 	16:    .word DUP, LIT, 'f', EQUAL, ZBRANCH,  18  ; FF form feed
 981      6600 0000 
 981      0000 1200 
 982 1bde 0000 0000 	    .word DROP, LIT, 12, BRANCH, 60f
 982      0C00 0000 
 982      0000 
 983 1be8 0000 0000 	18:    .word DUP, LIT, 'l', EQUAL, ZBRANCH,  20  ; LF line feed
 983      6C00 0000 
 983      0000 1400 
 984 1bf4 0000 0000 	    .word DROP, LIT, 10, BRANCH, 60f
 984      0A00 0000 
 984      0000 
 985 1bfe 0000 0000 	20:    .word DUP, LIT, 'n', EQUAL, ZBRANCH,  22  ; NL new line 
 985      6E00 0000 
 985      0000 1600 
 986 1c0a 0000 0000 	    .word DROP, LIT, 10, BRANCH, 60f
 986      0A00 0000 
 986      0000 
 987 1c14 0000 0000 	22:    .word DUP, LIT, 'q', EQUAL, ZBRANCH,  24  ; double quote
 987      7100 0000 
 987      0000 1800 
 988 1c20 0000 0000 	    .word DROP, LIT, 34, BRANCH, 60f
 988      2200 0000 
 988      0000 
 989 1c2a 0000 0000 	24:    .word DUP, LIT, 'r', EQUAL, ZBRANCH,  26  ; CR carriage return
 989      7200 0000 
 989      0000 1A00 
 990 1c36 0000 0000 	    .word DROP, LIT, 13, BRANCH, 60f
 990      0D00 0000 
 990      0000 
 991 1c40 0000 0000 	26:    .word DUP, LIT, 't', EQUAL, ZBRANCH,  28  ; HT horizontal tab
 991      7400 0000 
 991      0000 1C00 
 992 1c4c 0000 0000 	    .word DROP, LIT, 9, BRANCH, 60f
 992      0900 0000 
 992      0000 
 993 1c56 0000 0000 	28:    .word DUP, LIT, 'v', EQUAL, ZBRANCH,  30  ; VT vertical tab
 993      7600 0000 
 993      0000 1E00 
 994 1c62 0000 0000 	    .word DROP, LIT, 11, BRANCH, 60f
 994      0B00 0000 
 994      0000 
 995 1c6c 0000 0000 	30:    .word DUP, LIT, 'z', EQUAL, ZBRANCH,  32  ; NUL no char 0x0
 995      7A00 0000 
 995      0000 2000 
 996 1c78 0000 0000 	    .word DROP, LIT, 0, BRANCH, 60f
 996      0000 0000 
 996      0000 
 997 1c82 0000 0000 	32:    .word DUP, LIT, '\"', EQUAL, ZBRANCH, 34  ; double quote
 997      2200 0000 
 997      0000 2200 
 998 1c8e 0000 0000 	    .word DROP, LIT, 34, BRANCH, 60f
 998      2200 0000 
 998      0000 
 999 1c98 0000 0000 	34:    .word DUP, LIT, '\\', EQUAL, ZBRANCH,  36  ; backslash
 999      5C00 0000 
 999      0000 2400 
 1000 1ca4 0000 0000 	    .word DROP, LIT, 92, BRANCH, 60f
 1000      5C00 0000 
 1000      0000 
 1001               	
 1002               	     ; dual chars zzzz
 1003               	
 1004 1cae 0000 0000 	36:    .word DUP, LIT, 'x', EQUAL, ZBRANCH,  38  ; hexdigit hexdigit
 1004      7800 0000 
 1004      0000 2600 
 1005 1cba 0000 0000 	    .word DROP, LIT, 10, BRANCH, 60f
 1005      0A00 0000 
 1005      0000 
 1006 1cc4 0000 0000 	38:    .word DUP, LIT, 'm', EQUAL, ZBRANCH,  40  ; pair cr/lf  
 1006      6D00 0000 
 1006      0000 2800 
 1007 1cd0 0000 0000 	    .word DROP, LIT, 10, BRANCH, 60f
 1007      0A00 0000 
 1007      0000 
 1008               	    ; else clear to space
 1009               	40: 
 1010 1cda 0000 0000 	    .word DROP, LIT, 32
 1010      2000 
 1011               	
 1012 1ce0 0000 0000 	60: .word OVER, TO
 1013 1ce4 0000 0000 	    .word ONEMINUS, SWAP, ONEMINUS, SWAP
 1013      0000 0000 
 1014 1cec 0000 0000 	    .word BRANCH, 1b
 1015 1cf0 0000 0000 	80: .word DROP, DROP, ENDS 
 1015      0000 
 1016               	 
 1017               	;---------------------------------------------------------------------- 
 1018               	; 
 1019               	; ok MOVE (a1 a2 u -- ) 
 1020               	;   moves CELLS ! backwards
 1021 1cf6 0000 044D 	HEADER "MOVE", "MOVE", 
 1021      4F56 4520 
 1022 1cfe 0000 0000 		.word ZDUP, ZBRANCH, 2f
 1022      0000 
 1023 1d04 0000 0000 		.word DUP, TOR, DUP, OVER, PLUS					
 1023      0000 0000 
 1023      0000 
 1024 1d0e 0000 0000 		.word TOR, PLUS, RTO, RTO
 1024      0000 0000 
 1025 1d16 0000 0000 	1:  .word ZDUP, ZBRANCH, 2f
 1025      0000 
 1026 1d1c 0000 0000 	    .word ONEMINUS, TOR
 1027 1d20 0000 0000 	    .word OVER, AT, OVER, TO
 1027      0000 0000 
 1028 1d28 0000 0000 	    .word ONEMINUS, SWAP, ONEMINUS, SWAP
 1028      0000 0000 
 1029 1d30 0000 0000 	    .word BRANCH, 1b
 1030 1d34 0000 0000 	2:  .word DROP, DROP, ENDS 
 1030      0000 
 1031               	 
 1032               	;---------------------------------------------------------------------- 
 1033               	; 
 1034               	; ok MOVE (a1 a2 u -- ) 
 1035               	;   moves CHARS ! and align from backwards
 1036 1d3a 0000 0543 	HEADER "CMOVE", "CMOVE", 
 1036      4D4F 5645 
 1037 1d42 0000 0000 		.word ZDUP, ZBRANCH, 2f
 1037      0000 
 1038 1d48 0000 0000 		.word SHR, ONE, PLUS, MOVE, ENDS					
 1038      0000 0000 
 1038      0000 
 1039 1d52 0000 0000 	2:  .word DROP, DROP, ENDS 
 1039      0000 
 1040               	 
 1041               	;---------------------------------------------------------------------- 
 1042               	; 
 1043               	; ok FILL (a u c -- ) 
 1044               	; fills CHARS
 1045 1d58 0000 0446 	HEADER "FILL", "FILL", 
 1045      494C 4C20 
 1046 1d60 0000 0000 		.word SWAP, ZDUP, ZBRANCH, 2f
 1046      0000 0000 
 1047 1d68 0000 0000 	    .word TOR, SWAP
 1048 1d6c 0000 0000 	1:  .word RTO, ZDUP, ZBRANCH, 2f
 1048      0000 0000 
 1049 1d74 0000 0000 	    .word ONEMINUS, TOR
 1050 1d78 0000 0000 	    .word OVER, OVER, CTO, ONEPLUS 
 1050      0000 0000 
 1051 1d80 0000 0000 	    .word BRANCH, 1b 
 1052 1d84 0000 0000 	2:  .word DROP, DROP, ENDS 
 1052      0000 
 1053               	 
 1054               	;---------------------------------------------------------------------- 
 1055               	; 
 1056               	; is \] to compile 
 1057               	; 
 1058 1d8a 0000 015D 	HEADER "]", "RBRAC", 
 1059 1d8e 0000 0000 	    .word ONE, STATE, TO, ENDS 
 1059      0000 0000 
 1060               	 
 1061               	;---------------------------------------------------------------------- 
 1062               	; 
 1063               	; is \[ to interpret 
 1064               	; 
 1065 1d96 0000 415B 	HEADER "[", "LBRAC", F_IMMEDIATE 
 1066 1d9a 0000 0000 	    .word ZERO, STATE, TO, ENDS 
 1066      0000 0000 
 1067               	 
 1068               	;---------------------------------------------------------------------- 
 1069               	; 
 1070               	; is TOGGLE ( a f -- ) 
 1071               	; 
 1072 1da2 0000 0654 	HEADER "TOGGLE", "TOGGLE", 
 1072      4F47 474C 
 1072      4520 
 1073 1dac 0000 0000 	    .word OVER, AT, XOR, SWAP, TO, ENDS 
 1073      0000 0000 
 1073      0000 0000 
 1074               	 
 1075               	;---------------------------------------------------------------------- 
 1076               	; 
 1077               	; is >NFA ( a f -- ) 
 1078               	; from link to c_name 
 1079               	; 
 1080 1db8 0000 043E 	HEADER ">NFA", "TONFA", 
 1080      4E46 4120 
 1081 1dc0 0000 0000 	    .word CELL, PLUS, ENDS 
 1081      0000 
 1082               	 
 1083               	;---------------------------------------------------------------------- 
 1084               	; 
 1085               	; is >CFA ( a f -- ) 
 1086               	; from link to code 
 1087 1dc6 0000 043E 	HEADER ">CFA", "TOCFA", 
 1087      4346 4120 
 1088 1dce 0000 0000 	    .word TONFA, DUP, AT, F_UNMASK, AND, PLUS, ALIGN, ENDS 
 1088      0000 0F00 
 1088      0000 0000 
 1088      0000 0000 
 1089               	 
 1090               	;---------------------------------------------------------------------- 
 1091               	; 
 1092               	; is HIDDEN 
 1093               	; 
 1094 1dde 0000 0648 	HEADER "HIDDEN", "HIDDEN", 
 1094      4944 4445 
 1094      4E20 
 1095 1de8 0000 0000 	    .word LATEST, TONFA, F_HIDDEN, TOGGLE, ENDS 
 1095      1000 0000 
 1095      0000 
 1096               	 
 1097               	;---------------------------------------------------------------------- 
 1098               	; 
 1099               	; is IMMEDIATE 
 1100               	; 
 1101 1df2 0000 0949 	HEADER "IMMEDIATE", "IMMEDIATE", 
 1101      4D4D 4544 
 1101      4941 5445 
 1102 1dfe 0000 0000 	    .word LATEST, TONFA, F_IMMEDIATE, TOGGLE, ENDS 
 1102      4000 0000 
 1102      0000 
 1103               	 
 1104               	;---------------------------------------------------------------------- 
 1105               	; 
 1106               	; is COMP_ONLY 
 1107               	; 
 1108 1e08 0000 0C43 	HEADER "COMPILE_ONLY", "COMPILE_ONLY", 
 1108      4F4D 5049 
 1108      4C45 5F4F 
 1108      4E4C 5920 
 1109 1e18 0000 0000 	    .word LATEST, TONFA, F_COMPILE, TOGGLE, ENDS 
 1109      2000 0000 
 1109      0000 
 1110               	 
 1111               	;---------------------------------------------------------------------- 
 1112               	; 
 1113               	; is HANDLER 
 1114               	; 
 1115 1e22 0000 0748 	HEADER "HANDLER", "HANDLER", 
 1115      414E 444C 
 1115      4552 
 1116 1e2c 0000 0000 	    .word LIT, HAND, ENDS 
 1116      0000 
 1117               	 
 1118               	;---------------------------------------------------------------------- 
 1119               	; 
 1120               	; is CATCH 
 1121               	; 
 1122 1e32 0000 0543 	HEADER "CATCH", "CATCH", 
 1122      4154 4348 
 1123 1e3a 0000 0000 	    .word PSAT, TOR, HANDLER, AT, TOR, RSAT, HANDLER, TO 
 1123      0000 0000 
 1123      0000 0000 
 1123      0000 0000 
 1124 1e4a 0000 0000 	    .word EXEC, RTO, HANDLER, TO, RTO, DROP, ZERO
 1124      0000 0000 
 1124      0000 0000 
 1124      0000 
 1125 1e58 0000      	    .word ENDS 
 1126               	 
 1127               	;---------------------------------------------------------------------- 
 1128               	; 
 1129               	; is THROW 
 1130               	; 
 1131 1e5a 0000 0554 	HEADER "THROW", "THROW", 
 1131      4852 4F57 
 1132 1e62 0000 0000 	    .word ZDUP, ZBRANCH, 1f 
 1132      0000 
 1133 1e68 0000 0000 	    .word HANDLER, AT, RSTO, RTO, HANDLER, TO 
 1133      0000 0000 
 1133      0000 0000 
 1134 1e74 0000 0000 	    .word RTO, SWAP, TOR, PSTO, DROP, RTO 
 1134      0000 0000 
 1134      0000 0000 
 1135 1e80 0000      	1:  .word ENDS 
 1136               	 
 1137               	;---------------------------------------------------------------------- 
 1138               	; 
 1139               	; is ABORT 
 1140               	; 
 1141 1e82 0000 0541 	HEADER "ABORT", "ABORT" 
 1141      424F 5254 
 1142 1e8a 0000 FFFF 	    .word LIT, -1, THROW, ENDS 
 1142      0000 0000 
 1143               	 
 1144               	;---------------------------------------------------------------------- 
 1145               	; 
 1146               	; is ACCEPT is a refill with edit capabilities 
 1147               	; 
 1148 1e92 0000 0641 	HEADER "ACCEPT", "ACCEPT", 
 1148      4343 4550 
 1148      5420 
 1149 1e9c 0000 0000 	    .word ZZZZ, ENDS 
 1150               	 
 1151               	;---------------------------------------------------------------------- 
 1152               	; 
 1153               	; is 
 1154               	; 
 1155 1ea0 0000 054F 	HEADER "OVERT", "OVERT", 
 1155      5645 5254 
 1156               	    ;.word LATEST, AT, CURRENT, AT, TO, ENDS 
 1157 1ea8 0000 0000 	    .word ZZZZ, ENDS 
 1158               	 
 1159               	;---------------------------------------------------------------------- 
 1160               	; 
 1161               	; is COLON 
 1162               	; 
 1163 1eac 0000 413A 	HEADER ":", "COLON", F_IMMEDIATE 
 1164 1eb0 0000 0000 	    .word CREATE, RBRAC, ENDS 
 1164      0000 
 1165               	 
 1166               	;---------------------------------------------------------------------- 
 1167               	; 
 1168               	; is SEMIS
 1169               	; 
 1170 1eb6 0000 013B 	HEADER ";", "SEMIS", 
 1171 1eba 0000 0000 	    .word EXIT, LBRAC, OVERT, ENDS 
 1171      0000 0000 
 1172               	 
 1173               	;---------------------------------------------------------------------- 
 1174               	; 
 1175               	; is SOURCE 
 1176               	;   place terminal buffer address and length in stack 
 1177               	;   no standart: also place a \0 at end :) 
 1178               	; 
 1179 1ec2 0000 0653 	HEADER "SOURCE", "SOURCE", 
 1179      4F55 5243 
 1179      4520 
 1180 1ecc 0000 0000 	    .word LIT, TIB0, LIT, TIB_SIZE 
 1180      0000 4800 
 1181 1ed4 0000 0000 	    .word OVER, OVER, PLUS, LIT, ZERO, SWAP, TO, ONE, MINUS 
 1181      0000 0000 
 1181      0000 0000 
 1181      0000 0000 
 1181      0000 
 1182 1ee6 0000      	    .word ENDS 
 1183               	 
 1184               	;---------------------------------------------------------------------- 
 1185               	; 
 1186               	; is SOURCE+ 
 1187               	; 
 1188 1ee8 0000 0753 	HEADER "SOURCE+", "SOURCEPLUS", 
 1188      4F55 5243 
 1188      452B 
 1189 1ef2 0000 0000 	    .word SOURCE, DROP, TOIN, PLUS, ENDS 
 1189      0000 0000 
 1189      0000 
 1190               	 
 1191               	;---------------------------------------------------------------------- 
 1192               	; 
 1193               	; is  REFILL ( -- a n ), toin = 0 
 1194               	; 
 1195 1efc 0000 0652 	HEADER "REFILL", "REFILL", 
 1195      4546 494C 
 1195      4C20 
 1196 1f06 0000 0000 	    .word SOURCE, refillf, ZERO, TOIN, TO, ENDS 
 1196      0000 0000 
 1196      0000 0000 
 1197               	 
 1198               	;---------------------------------------------------------------------- 
 1199               	; 
 1200               	; is PARSE ( "<chars>ccc" c -- a n ) 
 1201               	;   no counted-string 
 1202               	; 
 1203 1f12 0000 0550 	HEADER "PARSE", "PARSE" 
 1203      4152 5345 
 1204 1f1a 0000 0000 	    .word SOURCEPLUS, SWAP 
 1205 1f1e 0000 0000 	    .word parsef, ZDUP, ZBRANCH, 2f 
 1205      0000 0000 
 1206 1f26 0000 0000 	    .word DUP, TOIN, PLUSTO, ENDS 
 1206      0000 0000 
 1207 1f2e 0000 0000 	2:  .word REFILL, BRANCH, PARSE ; perfect loop 
 1207      0000 
 1208               	 
 1209               	;---------------------------------------------------------------------- 
 1210               	; 
 1211               	; is \ also comments
 1212               	; 
 1213 1f34 0000 415C 	HEADER "\\", "BACKSLASH", F_IMMEDIATE 
 1214 1f38 0000 4800 	    .word LIT, TIB_SIZE, TOIN, TO, ENDS 
 1214      0000 0000 
 1214      0000 
 1215               	
 1216               	;---------------------------------------------------------------------- 
 1217               	; 
 1218               	; is PAREN ( "<chars>ccc" c -- ) also comments
 1219               	; 
 1220 1f42 0000 4128 	HEADER "(", "PAREN", F_IMMEDIATE 
 1221 1f46 0000 2900 	    .word LIT, ')', PARSE, DROP, DROP, ENDS 
 1221      0000 0000 
 1221      0000 0000 
 1222               	
 1223               	;---------------------------------------------------------------------- 
 1224               	; 
 1225               	; is DOTPAREN .( "<chars>ccc" c -- a n ) also types
 1226               	;   not standart, no multi-task support
 1227               	;
 1228 1f52 0000 022E 	HEADER ".(", "DOTPAREN" 
 1228      2820 
 1229 1f58 0000 2900 	    .word LIT, ')', PARSE, ENDS ;
 1229      0000 0000 
 1230               	
 1231               	;---------------------------------------------------------------------- 
 1232               	; 
 1233               	; is S BACK SLASH QUOTE S\" ( -- )
 1234               	;   not standart, 
 1235               	; zzzz
 1236 1f60 0000 0353 	HEADER "S\\\"", "SBSQUOTE" 
 1236      5C22 
 1237 1f66 0000 0000 	    .word RTO, DUP, COUNT, TYPE
 1237      0000 0000 
 1238 1f6e 0000 0000 	    .word DUP, AT, ONE, PLUS, PLUS 
 1238      0000 0000 
 1238      0000 
 1239 1f78 0000 0000 	    .word CELL, PLUS, ALIGNED, TOR, ENDS
 1239      0000 0000 
 1239      0000 
 1240               	
 1241               	;---------------------------------------------------------------------- 
 1242               	; 
 1243               	; is SQUOTE S\" ( -- )
 1244               	;   not standart, 
 1245               	; zzzz
 1246 1f82 0000 0253 	HEADER "S\"", "SQUOTE" 
 1246      2220 
 1247 1f88 0000 0000 	    .word RTO, DUP, COUNT, TYPE
 1247      0000 0000 
 1248 1f90 0000 0000 	    .word DUP, AT, ONE, PLUS, PLUS 
 1248      0000 0000 
 1248      0000 
 1249 1f9a 0000 0000 	    .word CELL, PLUS, ALIGNED, TOR, ENDS
 1249      0000 0000 
 1249      0000 
 1250               	
 1251               	;---------------------------------------------------------------------- 
 1252               	; 
 1253               	; is DOTQUOTE .\" ( "<chars>ccc" c -- a n )
 1254               	;   not standart, 
 1255               	;   parse returns chars
 1256               	;   bad things if no ending "
 1257               	;
 1258 1fa4 0000 422E 	HEADER ".\"", "DOTQUOTE", F_IMMEDIATE 
 1258      2220 
 1259 1faa 0000 2200 	    .word LIT, 0x22, PARSE
 1259      0000 
 1260 1fb0 0000 0000 	    .word STATE, AT, ZBRANCH, 4f
 1260      0000 0000 
 1261 1fb8 0000 0000 	    .word COMP, SQUOTE, DUP, CCOMMA
 1261      0000 0000 
 1262 1fc0 0000 0000 	    .word HERE, OVER, ALLOT, ALIGN
 1262      0000 0000 
 1263 1fc8 0000 0000 	    .word SWAP, CMOVE, BRANCH, 6f  
 1263      0000 0000 
 1264 1fd0 0000      	4:  .word TYPE 
 1265 1fd2 0000      	6:  .word ENDS 
 1266               	
 1267               	;---------------------------------------------------------------------- 
 1268               	; 
 1269               	; is  PARSE-NAME ( "ccc<chars>ccc" c -- a n ), toin = 0 
 1270               	;   no counted-string 
 1271               	; 
 1272 1fd4 0000 0A50 	HEADER "PARSE-NAME", "PARSEN", 
 1272      4152 5345 
 1272      2D4E 414D 
 1272      4520 
 1273 1fe2 0000 0000 	    .word SOURCEPLUS, SWAP 
 1274 1fe6 0000 0000 	    .word wordf, ZDUP, ZBRANCH, 2f 
 1274      0000 0000 
 1275 1fee 0000 0000 	    .word DUP, TOIN, PLUSTO, ENDS 
 1275      0000 0000 
 1276 1ff6 0000 0000 	2:  .word REFILL, BRANCH, PARSEN  ; perfect loop 
 1276      0000 
 1277               	 
 1278               	;---------------------------------------------------------------------- 
 1279               	; 
 1280               	; is FIND-NAME ( a n -- a 0 | xt -1 | xt 1 ) 
 1281               	;   no counted-string 
 1282               	;   no vocabularies 
 1283               	; 
 1284 1ffc 0000 0946 	HEADER "FIND-NAME", "FINDN", 
 1284      494E 442D 
 1284      4E41 4D45 
 1285 2008 0000 0000 	    .word LATEST, AT, findf, ENDS 
 1285      0000 0000 
 1286               	 
 1287               	;---------------------------------------------------------------------- 
 1288               	; 
 1289               	; is FIND ( "ccc<chars>ccc" -- a 0 | xt -1 | xt 1 ) 
 1290               	; 
 1291 2010 0000 0446 	HEADER "FIND", "FIND", 
 1291      494E 4420 
 1292 2018 0000 0000 	    .word PARSEN, FINDN
 1293 201c 0000 0000 	    .word ZBRANCH, ABORT 
 1294 2020 0000 0000 	    .word DROP, ENDS 
 1295               	 
 1296               	;---------------------------------------------------------------------- 
 1297               	; 
 1298               	; is  CHAR ( "ccc<chars>ccc" -- n)  
 1299               	; 
 1300 2024 0000 0443 	HEADER "CHAR", "CHAR", 
 1300      4841 5220 
 1301 202c 0000 0000 	    .word PARSEN, DROP, AT, ENDS 
 1301      0000 0000 
 1302               	 
 1303               	;---------------------------------------------------------------------- 
 1304               	; 
 1305               	; is  NONAME ( "" ), toin = 0 
 1306               	; 
 1307 2034 0000 073A 	HEADER ":NONAME", "NONAME", 
 1307      4E4F 4E41 
 1307      4D45 
 1308 203e 0000 0000 	    .word ZERO, ZERO, CREATE, RBRAC, ENDS 
 1308      0000 0000 
 1308      0000 
 1309               	 
 1310               	;---------------------------------------------------------------------- 
 1311               	; 
 1312               	; is CREATE ( "ccc<str>ccc" -- xt ) 
 1313               	; parse next word and compile a header 
 1314               	; 
 1315 2048 0000 0643 	HEADER "CREATE", "CREATE", 
 1315      5245 4154 
 1315      4520 
 1316 2052 0000 0000 	    .word PARSEN, LIT, UH0 
 1316      0000 
 1317 2058 0000 0000 	    .word DUP, LATEST, AT, SWAP, TO, CELLPLUS 
 1317      0000 0000 
 1317      0000 0000 
 1318 2064 0000 0000 	    .word OVER, OVER, TO, ONEPLUS, SWAP, DUP 
 1318      0000 0000 
 1318      0000 0000 
 1319 2070 0000 0000 	    .word TOR, copyf, RTO 
 1319      0000 
 1320 2076 0000 0000 	    .word DUP, ONE, AND, ZEQU, ZBRANCH, 2f 
 1320      0000 0000 
 1320      0000 0000 
 1321 2082 0000 0000 	    .word DUP, BL, SWAP, TO, ONE, PLUS 
 1321      0000 0000 
 1321      0000 0000 
 1322 208e 0000      	2:  .word ENDS 
 1323               	 
 1324               	;---------------------------------------------------------------------- 
 1325               	;
 1326               	; is DOES ( xt -- ) 
 1327               	; zzzz ???? 
 1328 2090 0000 0444 	HEADER "DOES", "DOES", 
 1328      4F45 5320 
 1329 2098 0000 0000 	    .word LIT, BRANCH, COMMA, HERE, COMMA, ENDS 
 1329      0000 0000 
 1329      0000 0000 
 1330               	
 1331               	;---------------------------------------------------------------------- 
 1332               	; 
 1333               	; is DOES> ( xt -- ) 
 1334               	; 
 1335 20a4 0000 4544 	HEADER "DOES>", "DOESTO", F_IMMEDIATE 
 1335      4F45 533E 
 1336 20ac 0000 0000 	    .word LIT, BRANCH, COMMA, HERE, COMMA, ENDS 
 1336      0000 0000 
 1336      0000 0000 
 1337               	
 1338               	;---------------------------------------------------------------------- 
 1339               	; 
 1340               	; is CONSTANT ( "ccc<caddr>ccc" w -- ) 
 1341               	; constants go to eeprom
 1342               	; EP points next word free
 1343               	; 
 1344               	; std: : variable create 0 , ;
 1345               	; zzzz
 1346 20b8 0000 0843 	 HEADER "CONSTANT", "CONSTANT", 
 1346      4F4E 5354 
 1346      414E 5420 
 1347 20c4 0000 0000 	    .word CREATE, EPP, AT
 1347      0000 
 1348 20ca 0000 0000 	    .word DUP, TOR, ETO, RTO
 1348      0000 0000 
 1349 20d2 0000 0000 	    .word DUP, CELL, PLUS, EPP, TO
 1349      0000 0000 
 1349      0000 
 1350 20dc 0000 0000 	    .word COMMA, DOESTO, ENDS 
 1350      0000 
 1351               	    
 1352               	;---------------------------------------------------------------------- 
 1353               	; 
 1354               	; is VARIABLE ( "ccc<caddr>ccc"  -- ) 
 1355               	; variables go to high adress sram
 1356               	; UP maps next word free
 1357               	;
 1358               	; std: : constant create , does> @ ;
 1359               	; zzzz
 1360 20e2 0000 0856 	HEADER "VARIABLE", "VARIABLE", 
 1360      4152 4941 
 1360      424C 4520 
 1361 20ee 0000 0000 	    .word CREATE, UPP, AT
 1361      0000 
 1362 20f4 0000 0000 	    .word DUP, TOR, TO, RTO
 1362      0000 0000 
 1363 20fc 0000 0000 	    .word DUP, CELL, MINUS, UPP, TO
 1363      0000 0000 
 1363      0000 
 1364 2106 0000 0000 	    .word COMMA, DOESTO, ENDS 
 1364      0000 
 1365               	    
 1366               	;---------------------------------------------------------------------- 
 1367               	; 
 1368               	; is TICK ( "ccc<caddr>ccc" -- xt | 0 ) 
 1369               	; 
 1370 210c 0000 0127 	HEADER "'", "TICK", 
 1371 2110 0000 0000 	    .word FINDN, DUP, ZEQU, ZBRANCH, 2f 
 1371      0000 0000 
 1371      0000 
 1372 211a 0000      	    .word SWAP 
 1373 211c 0000 0000 	2:  .word DROP, ENDS 
 1374               	 
 1375               	;---------------------------------------------------------------------- 
 1376               	; 
 1377               	; ok unconditional compile next word 
 1378               	;   no check if 0x0 zzzz 
 1379               	; 
 1380 2120 0000 4850 	HEADER "POSTPONE", "POSTPONE", F_IMMEDIATE, 
 1380      4F53 5450 
 1380      4F4E 4520 
 1381 212c 0000 0000 	    .word TICK, COMMA, ENDS 
 1381      0000 
 1382               	 
 1383               	;----------------------------------------------------------------------
 1384               	;
 1385               	; ok compile real
 1386               	;
 1387 2132 0000 4743 	HEADER "COMPILE", "COMPILE", F_IMMEDIATE
 1387      4F4D 5049 
 1387      4C45 
 1388 213c 0000 0000 	    .word DOVAR, AT, COMMA, ENDS
 1388      0000 0000 
 1389               	
 1390               	;---------------------------------------------------------------------- 
 1391               	; 
 1392               	; is  NUMBN ( a n -- w true | a n false ) 
 1393               	; 
 1394 2144 0000 054E 	HEADER "NUMBN", "NUMBN", 
 1394      554D 424E 
 1395 214c 0000 0000 	    .word OVER, OVER, numberf, ZBRANCH, 2f 
 1395      0000 0000 
 1395      0000 
 1396 2156 0000 0000 	    .word TOR, DROP, DROP, RTO, FTRUE, BRANCH, 4f 
 1396      0000 0000 
 1396      0000 0000 
 1396      0000 
 1397 2164 0000      	2:  .word FFALSE 
 1398 2166 0000      	4:  .word ENDS 
 1399               	 
 1400               	;---------------------------------------------------------------------- 
 1401               	; 
 1402               	; is  NONEN ( a n -- ) 
 1403               	; 
 1404 2168 0000 054E 	HEADER "NONEN", "NONEN", 
 1404      4F4E 454E 
 1405 2170 0000 0000 	    .word CR, TYPE, LIT, question, LIT, 4, TYPE, ENDS 
 1405      0000 0000 
 1405      0000 0400 
 1405      0000 0000 
 1406               	
 1407               	;---------------------------------------------------------------------- 
 1408               	; 
 1409               	; is 
 1410               	; 
 1411 2180 0000 0445 	HEADER "EVAL", "EVAL", 
 1411      5641 4C20 
 1412 2188 0000      	    .word PARSEN
 1413               	100:
 1414               	    ; is a word 
 1415 218a 0000 0000 	    .word FINDN, ZBRANCH, 200f
 1415      0000 
 1416               	    ; is -1 normal 1 immediate 
 1417 2190 0000 0000 	    .word ONEMINUS, ZEQU, ZBRANCH, 120f 
 1417      0000 0000 
 1418 2198 0000 0000 	    .word STATE, AT, ZBRANCH, 120f
 1418      0000 0000 
 1419               	110:
 1420 21a0 0000 0000 	    .word COMMA, BRANCH, EVAL 
 1420      0000 
 1421               	120:
 1422 21a6 0000 0000 	    .word EXEC, BRANCH, EVAL 
 1422      0000 
 1423               	    
 1424               	    ; is a number ? 
 1425 21ac 0000 0000 	200: .word NUMBN, ZBRANCH, 300f 
 1425      0000 
 1426 21b2 0000 0000 	    .word STATE, AT, ZBRANCH, EVAL 
 1426      0000 0000 
 1427 21ba 0000 0000 	    .word LIT, LIT, COMMA, COMMA
 1427      0000 0000 
 1428 21c2 0000 0000 	    .word BRANCH, EVAL 
 1429               	300: 
 1430               	    ; not okey
 1431 21c6 0000 0000 	    .word NONEN, BRANCH, EVAL 
 1431      0000 
 1432               	 400:
 1433 21cc 0000      	    .word ENDS
 1434               	;---------------------------------------------------------------------- 
 1435               	; 
 1436               	; is 
 1437               	; 
 1438 21ce 0000 0451 	HEADER "QUIT", "QUIT", 
 1438      5549 5420 
 1439               	1: 
 1440 21d6 0000      	    .word LBRAC 
 1441 21d8 0000 0000 	    .word RS0, RSTO 
 1442 21dc 0000      	    .word REFILL 
 1443               	2: 
 1444 21de 0000 0000 	    .word EVAL, CATCH 
 1445 21e2 0000 0000 	    .word DUP, LIT, 0, EQUAL, ZBRANCH, 3f 
 1445      0000 0000 
 1445      0000 0000 
 1446 21ee 0000 0000 	    .word STATE, AT, ZEQU, ZBRANCH, 5f 
 1446      0000 0000 
 1446      0000 
 1447 21f8 0000 0000 	    .word LIT, prompt, LIT, 4, TYPE, BRANCH, 5f 
 1447      0000 0400 
 1447      0000 0000 
 1447      0000 
 1448 2206 0000 0000 	    .word CR, BRANCH, 2b 
 1448      0000 
 1449               	3: 
 1450 220c 0000 0000 	    .word DUP, LIT, -1, EQUAL, ZBRANCH, 4f 
 1450      FFFF 0000 
 1450      0000 0000 
 1451 2218 0000 0000 	    .word LIT, abort, LIT, 8, TYPE, BRANCH, 5f 
 1451      0000 0800 
 1451      0000 0000 
 1451      0000 
 1452               	4: 
 1453 2226 0000 0000 	    .word DUP, LIT, -2, EQUAL, ZBRANCH, 5f 
 1453      FEFF 0000 
 1453      0000 0000 
 1454 2232 0000 0000 	    .word LIT, exception, LIT, 12, TYPE, DOT, BRANCH, 5f 
 1454      0000 0C00 
 1454      0000 0000 
 1454      0000 0000 
 1455               	5: 
 1456 2242 0000 0000 	    .word CR, BRANCH, 2b 
 1456      0000 
 1457 2248 0000      	    .word ENDS 
 1458               	 
 1459               	;---------------------------------------------------------------------- 
 1460               	; 
 1461               	; 
 1462               	...
 167               	
 168               	;----------------------------------------------------------------------
 169               	;
 170               	; is ZZZZ, hook for incompleteness 
 171               	;
 172 224a 0000 0555 	HEADER "UNDEF", "UNDEF",
 172      4E44 4546 
 173               	ZZZZ:
 174 2252 0000 0000 	    .word LIT, undefined, LIT, 12, TYPE, CR, ENDS 
 174      0000 0C00 
 174      0000 0000 
 174      0000 
 175               	 
 176               	;----------------------------------------------------------------------
 177               	.p2align 1, 0x00
 178               	.equ free_flash, .
 179               	
 180               	;********************************************************************** 
 181               	
 182               	;----------------------------------------------------------------------
DEFINED SYMBOLS
              main.S:36     *ABS*:000000000000000c version
              main.S:172    .text:000000000000224a _link_
            macros.S:125    *ABS*:000000000000013d _last_
            macros.S:245    *ABS*:0000000000000048 TIB_SIZE
            macros.S:249    *ABS*:0000000000000048 PAD_SIZE
            macros.S:253    *ABS*:0000000000000024 HDS_SIZE
            macros.S:257    *ABS*:0000000000000024 STACK_SIZE
            macros.S:261    *ABS*:0000000000000002 CELL_SIZE
            macros.S:265    *ABS*:000000000000000f WORD_SIZE
            macros.S:269    *ABS*:0000000000000010 BASE_DEFAULT
            macros.S:296    *ABS*:0000000000000080 F_RESERVED
            macros.S:297    *ABS*:0000000000000040 F_IMMEDIATE
            macros.S:298    *ABS*:0000000000000020 F_COMPILE
            macros.S:299    *ABS*:0000000000000010 F_HIDDEN
            macros.S:301    *ABS*:00000000000000f0 F_TOMASK
            macros.S:302    *ABS*:000000000000000f F_UNMASK
            macros.S:305    *ABS*:0000000000000000 F_LEAP
            macros.S:306    *ABS*:0000000000000000 F_CORE
            macros.S:312    *ABS*:0000000000000000 NO_ERROR
            macros.S:313    *ABS*:fffffffffffffff7 INVALID_MEMORY
            macros.S:314    *ABS*:fffffffffffffff5 OUT_OF_RANGE
            macros.S:315    *ABS*:fffffffffffffff3 INVALID_WORD
            macros.S:316    *ABS*:ffffffffffffffec TO_READ_ONLY
            macros.S:317    *ABS*:ffffffffffffffe8 NOT_A_NUMBER
            macros.S:332    *ABS*:000000000000000d CR_
            macros.S:333    *ABS*:000000000000000a LF_
            macros.S:334    *ABS*:0000000000000008 BS_
            macros.S:335    *ABS*:0000000000000020 BL_
            macros.S:341    *ABS*:0000000000000000 BIT_CARRY
            macros.S:343    *ABS*:0000000000000001 BIT_ZERO
            macros.S:345    *ABS*:0000000000000002 BIT_NEG
            macros.S:373    *ABS*:0000000000000080 SPM_SIZE
            macros.S:375    *ABS*:0000000000000100 SRAM_START
            macros.S:377    *ABS*:00000000000008ff SRAM_END
            macros.S:379    *ABS*:0000000000000000 FLASH_RWW
            macros.S:381    *ABS*:0000000000003e00 FLASH_NRWW
            macros.S:383    *ABS*:0000000000003fff FLASH_END
            macros.S:385    *ABS*:00000000000003ff E2P_END
            macros.S:391    *ABS*:0000000000000004 E2P_PAGESIZE
            macros.S:393    *ABS*:0000000000000000 E2P_START
            macros.S:397    *ABS*:000000000000001e SIGNATURE_000
            macros.S:398    *ABS*:0000000000000095 SIGNATURE_001
            macros.S:401    *ABS*:000000000000000f SIGNATURE_002
            macros.S:403    *ABS*:000000000000000f SIGNATURE_003
            macros.S:405    *ABS*:0000000000000016 SIGNATURE_004
              bios.S:266    .text:0000000000000086 HALT
            macros.S:410    *ABS*:0000000000000001 IDLE
            macros.S:411    *ABS*:0000000000000002 BUSY
            macros.S:412    *ABS*:0000000000000003 WAIT
            macros.S:414    *ABS*:0000000000000004 GIVE
            macros.S:415    *ABS*:0000000000000008 TAKE
              main.S:47     .eeprom:0000000000000000 e_void
              main.S:48     .eeprom:0000000000000002 e_live
              main.S:49     .eeprom:0000000000000004 e_turn
              main.S:50     .eeprom:0000000000000006 e_rest
              main.S:51     .eeprom:0000000000000008 e_last
              main.S:52     .eeprom:000000000000000a e_dp
              main.S:53     .eeprom:000000000000000c e_up
              main.S:54     .eeprom:000000000000000e e_ep
              main.S:56     .eeprom:0000000000000010 EP0
              main.S:64     data:0000000000000100 TIB0
              main.S:68     data:0000000000000148 SPZ
              main.S:69     data:000000000000016c SP0
              main.S:70     data:000000000000016c PSZ
              main.S:71     data:0000000000000190 PS0
              main.S:72     data:0000000000000190 RSZ
              main.S:73     data:00000000000001b4 RS0
              main.S:77     data:00000000000001b4 VOID
              main.S:78     data:00000000000001b6 LIVE
              main.S:80     data:00000000000001b8 TURN
              main.S:81     data:00000000000001ba REST
              main.S:83     data:00000000000001bc LAST
              main.S:84     data:00000000000001be VDP
              main.S:86     data:00000000000001c0 VUP
              main.S:87     data:00000000000001c2 VEP
              main.S:91     data:00000000000001c4 VHP
              main.S:92     data:00000000000001c6 SEED
              main.S:94     data:00000000000001c8 STAT
              main.S:95     data:00000000000001ca RADX
              main.S:97     data:00000000000001cc TOIN
              main.S:98     data:00000000000001ce SPAN
              main.S:100    data:00000000000001d0 SCRS
              main.S:101    data:00000000000001d2 BLKS
              main.S:103    data:00000000000001d4 HAND
              main.S:104    data:00000000000001d6 CSPP
              main.S:106    data:00000000000001d8 CURR
              main.S:107    data:00000000000001da CTXT
              main.S:109    data:00000000000001dc HLD
              main.S:110    data:00000000000001de HLDS
              main.S:112    data:00000000000001e0 WARN
              main.S:113    data:00000000000001e2 ERRN
              main.S:115    data:00000000000001e4 TMP0
              main.S:116    data:00000000000001e6 TMP1
              main.S:117    data:00000000000001e8 TMP2
              main.S:118    data:00000000000001ea TMP3
              main.S:121    data:00000000000001ec UH0
              main.S:123    *ABS*:00000000000008ff US0
              bios.S:37     *ABS*:000000000000003f __SREG__
              bios.S:38     *ABS*:000000000000003e __SP_H__
              bios.S:39     *ABS*:000000000000003d __SP_L__
              bios.S:42     *ABS*:0000000000000009 UBRRL
              bios.S:43     *ABS*:0000000000000020 UCSRC
              bios.S:44     *ABS*:000000000000000a UCSRB
              bios.S:45     *ABS*:000000000000000b UCSRA
              bios.S:48     *ABS*:0000000000000021 WDTCR
              bios.S:51     *ABS*:0000000000000032 TCNT0
              bios.S:52     *ABS*:0000000000000033 TCCR0
              bios.S:53     *ABS*:0000000000000039 TIMSK
              bios.S:56     *ABS*:0000000000000037 SPMCR
              bios.S:59     *ABS*:0000000000000007 SPMIE
              bios.S:60     *ABS*:0000000000000006 RWWSB
              bios.S:62     *ABS*:0000000000000004 RWWSRE
              bios.S:63     *ABS*:0000000000000003 BLBSET
              bios.S:64     *ABS*:0000000000000002 PGWRT
              bios.S:65     *ABS*:0000000000000001 PGERS
              bios.S:66     *ABS*:0000000000000000 SPMEN
              bios.S:73     *ABS*:000000000000001f EEARH
              bios.S:74     *ABS*:000000000000001e EEARL
              bios.S:75     *ABS*:000000000000001d EEDR
              bios.S:76     *ABS*:000000000000001c EECR
              bios.S:77     *ABS*:0000000000000001 EEWE
              bios.S:78     *ABS*:0000000000000002 EEMWE
              bios.S:79     *ABS*:0000000000000000 EERE
              bios.S:83     *ABS*:0000000000000035 MCUCR
              bios.S:100    .text:0000000000000000 boot
              bios.S:126    .text:0000000000000026 RESET
              bios.S:241    .text:0000000000000070 TIM0_OVF
              bios.S:163    *ABS*:000000000000008f OFFSETCNT
              bios.S:165    .text:0000000000000036 TIMER0_SET
              bios.S:187    .text:000000000000004c WATCHDOG_SET
              bios.S:198    .text:0000000000000054 USART_SET
              bios.S:214    .text:000000000000006c GOOD
              bios.S:250    .text:000000000000007a TIM0_ADJ
          messages.S:28     .text:0000000000000092 disclaimer
          messages.S:35     .text:000000000000016d prompt
          messages.S:39     .text:0000000000000172 question
          messages.S:43     .text:0000000000000177 undefined
          messages.S:47     .text:0000000000000184 exception
          messages.S:51     .text:0000000000000191 abort
          messages.S:54     .text:000000000000019b roullete
       forth-leafs.S:88     .text:00000000000001e6 __forth__
       forth-leafs.S:98     .text:00000000000001e6 is_ENDS
       forth-leafs.S:98     .text:00000000000001ee ENDS
       forth-leafs.S:103    .text:00000000000001f0 _unnest
       forth-leafs.S:108    .text:00000000000001f4 _next
       forth-leafs.S:112    .text:0000000000000200 _void
       forth-leafs.S:124    .text:000000000000020e _jump
       forth-leafs.S:118    .text:0000000000000206 _nest
       forth-leafs.S:128    .text:0000000000000210 _link
       forth-leafs.S:135    .text:0000000000000212 is_NO_OP
       forth-leafs.S:135    .text:000000000000021a NO_OP
       forth-leafs.S:148    .text:0000000000000220 is_KEY
       forth-leafs.S:148    .text:0000000000000226 KEY
       forth-leafs.S:164    .text:0000000000000238 is_QKEY
       forth-leafs.S:164    .text:0000000000000240 QKEY
       forth-leafs.S:372    .text:0000000000000336 _iffalse
       forth-leafs.S:360    .text:0000000000000320 _iftrue
       forth-leafs.S:176    .text:0000000000000248 is_EMIT
       forth-leafs.S:176    .text:0000000000000250 EMIT
       forth-leafs.S:191    .text:0000000000000260 is_QEMIT
       forth-leafs.S:191    .text:0000000000000268 QEMIT
       forth-leafs.S:204    .text:0000000000000270 is_PUPTO
       forth-leafs.S:204    .text:000000000000027a PUPTO
       forth-leafs.S:214    .text:0000000000000280 is_PDNTO
       forth-leafs.S:214    .text:000000000000028a PDNTO
       forth-leafs.S:223    .text:0000000000000290 is_ECTO
       forth-leafs.S:223    .text:0000000000000296 ECTO
       forth-leafs.S:227    .text:000000000000029c _ee_write
       forth-leafs.S:258    .text:00000000000002b6 is_ECAT
       forth-leafs.S:258    .text:00000000000002bc ECAT
       forth-leafs.S:262    .text:00000000000002c2 _ee_read
       forth-leafs.S:284    .text:00000000000002d4 is_PCAT
       forth-leafs.S:284    .text:00000000000002da PCAT
       forth-leafs.S:286    .text:00000000000002dc _peek
       forth-leafs.S:298    .text:00000000000002e6 is_PCTO
       forth-leafs.S:298    .text:00000000000002ec PCTO
       forth-leafs.S:300    .text:00000000000002ee _poke
       forth-leafs.S:311    .text:00000000000002fa is_MILLIS
       forth-leafs.S:311    .text:0000000000000304 MILLIS
       forth-leafs.S:357    .text:0000000000000312 is_FTRUE
       forth-leafs.S:357    .text:000000000000031a FTRUE
       forth-leafs.S:369    .text:0000000000000328 is_FFALSE
       forth-leafs.S:369    .text:0000000000000330 FFALSE
       forth-leafs.S:381    .text:000000000000033e is_ZEQU
       forth-leafs.S:381    .text:0000000000000344 ZEQU
       forth-leafs.S:392    .text:0000000000000350 is_ZLTH
       forth-leafs.S:392    .text:0000000000000356 ZLTH
       forth-leafs.S:406    .text:0000000000000362 is_UMLESS
       forth-leafs.S:406    .text:0000000000000368 UMLESS
       forth-leafs.S:424    .text:000000000000037e is_UMPLUS
       forth-leafs.S:424    .text:0000000000000384 UMPLUS
       forth-leafs.S:446    .text:00000000000003a0 is_TO
       forth-leafs.S:446    .text:00000000000003a4 TO
       forth-leafs.S:460    .text:00000000000003b8 is_AT
       forth-leafs.S:460    .text:00000000000003bc AT
       forth-leafs.S:473    .text:00000000000003c8 is_ATAT
       forth-leafs.S:473    .text:00000000000003ce ATAT
       forth-leafs.S:496    .text:00000000000003e2 is_TOR
       forth-leafs.S:496    .text:00000000000003e8 TOR
       forth-leafs.S:509    .text:00000000000003fe is_RTO
       forth-leafs.S:509    .text:0000000000000404 RTO
       forth-leafs.S:522    .text:000000000000041a is_RAT
       forth-leafs.S:522    .text:0000000000000420 RAT
       forth-leafs.S:535    .text:000000000000043a is_RSTO
       forth-leafs.S:535    .text:0000000000000440 RSTO
       forth-leafs.S:545    .text:000000000000044c is_PSTO
       forth-leafs.S:545    .text:0000000000000452 PSTO
       forth-leafs.S:556    .text:000000000000045e is_RSAT
       forth-leafs.S:556    .text:0000000000000464 RSAT
       forth-leafs.S:567    .text:0000000000000470 is_PSAT
       forth-leafs.S:567    .text:0000000000000476 PSAT
       forth-leafs.S:578    .text:0000000000000482 is_DROP
       forth-leafs.S:578    .text:000000000000048a DROP
       forth-leafs.S:580    .text:000000000000048c PULL
       forth-leafs.S:588    .text:0000000000000494 is_DUP
       forth-leafs.S:588    .text:000000000000049a DUP
       forth-leafs.S:590    .text:000000000000049c PUSH
       forth-leafs.S:598    .text:00000000000004a4 is_SWAP
       forth-leafs.S:598    .text:00000000000004ac SWAP
       forth-leafs.S:609    .text:00000000000004bc is_OVER
       forth-leafs.S:609    .text:00000000000004c4 OVER
       forth-leafs.S:621    .text:00000000000004d8 is_ROT
       forth-leafs.S:621    .text:00000000000004de ROT
       forth-leafs.S:635    .text:00000000000004f6 is_ZDUP
       forth-leafs.S:635    .text:00000000000004fe ZDUP
       forth-leafs.S:647    .text:000000000000050c is_LTHAN
       forth-leafs.S:647    .text:0000000000000510 LTHAN
       forth-leafs.S:663    .text:0000000000000524 is_PLUS
       forth-leafs.S:663    .text:0000000000000528 PLUS
       forth-leafs.S:676    .text:0000000000000538 is_MINUS
       forth-leafs.S:676    .text:000000000000053c MINUS
       forth-leafs.S:689    .text:000000000000054e is_NAND
       forth-leafs.S:689    .text:0000000000000556 NAND
       forth-leafs.S:702    .text:0000000000000568 is_AND
       forth-leafs.S:702    .text:000000000000056e AND
       forth-leafs.S:713    .text:000000000000057c is_OR
       forth-leafs.S:713    .text:0000000000000582 OR
       forth-leafs.S:724    .text:0000000000000590 is_XOR
       forth-leafs.S:724    .text:0000000000000596 XOR
       forth-leafs.S:736    .text:00000000000005a4 is_INVERT
       forth-leafs.S:736    .text:00000000000005ae INVERT
       forth-leafs.S:738    .text:00000000000005b0 _inv
       forth-leafs.S:748    .text:00000000000005b8 is_NEGATE
       forth-leafs.S:748    .text:00000000000005c2 NEGATE
       forth-leafs.S:750    .text:00000000000005c4 _neg
       forth-leafs.S:759    .text:00000000000005cc is_SHL
       forth-leafs.S:759    .text:00000000000005d2 SHL
       forth-leafs.S:761    .text:00000000000005d4 _shl
       forth-leafs.S:771    .text:00000000000005de is_SHR
       forth-leafs.S:771    .text:00000000000005e4 SHR
       forth-leafs.S:773    .text:00000000000005e6 _shr
       forth-leafs.S:783    .text:00000000000005f0 is_ENDIAN
       forth-leafs.S:783    .text:00000000000005f6 ENDIAN
       forth-leafs.S:794    .text:0000000000000602 is_BRANCH
       forth-leafs.S:794    .text:000000000000060c BRANCH
       forth-leafs.S:796    .text:000000000000060e _branch
       forth-leafs.S:807    .text:0000000000000626 is_ZBRANCH
       forth-leafs.S:807    .text:0000000000000630 ZBRANCH
       forth-leafs.S:825    .text:000000000000064a is_LIT
       forth-leafs.S:825    .text:0000000000000650 LIT
       forth-leafs.S:840    *ABS*:fffffffffffffffe rounds
       forth-leafs.S:842    .text:000000000000066e is_ALIGNED
       forth-leafs.S:842    .text:0000000000000678 ALIGNED
       forth-leafs.S:853    .text:0000000000000682 is_CELL
       forth-leafs.S:853    .text:000000000000068a CELL
       forth-leafs.S:865    .text:0000000000000698 is_CTO
       forth-leafs.S:865    .text:000000000000069e CTO
       forth-leafs.S:878    .text:00000000000006b0 is_CAT
       forth-leafs.S:878    .text:00000000000006b6 CAT
       forth-leafs.S:890    .text:00000000000006c2 is_JUMP
       forth-leafs.S:890    .text:00000000000006ca JUMP
       forth-leafs.S:904    .text:00000000000006d0 is_ZERO
       forth-leafs.S:904    .text:00000000000006d4 ZERO
       forth-leafs.S:915    .text:00000000000006e2 is_ONE
       forth-leafs.S:915    .text:00000000000006e6 ONE
       forth-leafs.S:926    .text:00000000000006f4 is_TWO
       forth-leafs.S:926    .text:00000000000006f8 TWO
       forth-twigs.S:69     .text:0000000000000706 is_ETO
       forth-twigs.S:69     .text:000000000000070c ETO
       forth-twigs.S:80     .text:0000000000000720 is_EAT
       forth-twigs.S:80     .text:0000000000000726 EAT
       forth-twigs.S:95     .text:0000000000000742 is_NIP
       forth-twigs.S:95     .text:0000000000000748 NIP
       forth-twigs.S:102    .text:000000000000074e is_SWIP
       forth-twigs.S:102    .text:0000000000000756 SWIP
       forth-twigs.S:116    .text:000000000000075e is_ROTU
       forth-twigs.S:116    .text:0000000000000764 ROTU
       forth-twigs.S:123    .text:000000000000076a is_ROTD
       forth-twigs.S:123    .text:0000000000000772 ROTD
       forth-twigs.S:130    .text:0000000000000778 is_TUCK
       forth-twigs.S:130    .text:0000000000000780 TUCK
       forth-twigs.S:137    .text:0000000000000786 is_FLIP
       forth-twigs.S:137    .text:000000000000078e FLIP
       forth-twigs.S:144    .text:0000000000000796 is_EQUAL
       forth-twigs.S:144    .text:000000000000079a EQUAL
       forth-twigs.S:151    .text:00000000000007a0 is_NOTEQUAL
       forth-twigs.S:151    .text:00000000000007a6 NOTEQUAL
       forth-twigs.S:158    .text:00000000000007ac is_GTHAN
       forth-twigs.S:158    .text:00000000000007b0 GTHAN
       forth-twigs.S:164    .text:00000000000007b6 is_ZEROGT
       forth-twigs.S:164    .text:00000000000007bc ZEROGT
       forth-twigs.S:170    .text:00000000000007c2 is_ZEROLT
       forth-twigs.S:170    .text:00000000000007c8 ZEROLT
       forth-twigs.S:178    .text:00000000000007d0 is_CELLS
       forth-twigs.S:178    .text:00000000000007d8 CELLS
       forth-twigs.S:185    .text:00000000000007dc is_CELLPLUS
       forth-twigs.S:185    .text:00000000000007e4 CELLPLUS
       forth-twigs.S:192    .text:00000000000007ea is_CELLMINUS
       forth-twigs.S:192    .text:00000000000007f2 CELLMINUS
       forth-twigs.S:199    .text:00000000000007f8 is_ONEPLUS
       forth-twigs.S:199    .text:00000000000007fe ONEPLUS
       forth-twigs.S:206    .text:0000000000000804 is_ONEMINUS
       forth-twigs.S:206    .text:000000000000080a ONEMINUS
       forth-twigs.S:213    .text:0000000000000810 is_TWOPLUS
       forth-twigs.S:213    .text:0000000000000816 TWOPLUS
       forth-twigs.S:220    .text:000000000000081c is_TWOMINUS
       forth-twigs.S:220    .text:0000000000000822 TWOMINUS
       forth-twigs.S:227    .text:0000000000000828 is_PLUSTO
       forth-twigs.S:227    .text:000000000000082e PLUSTO
       forth-twigs.S:234    .text:000000000000083c is_CHARPLUS
       forth-twigs.S:234    .text:0000000000000844 CHARPLUS
       forth-twigs.S:241    .text:0000000000000848 is_CHARMINUS
       forth-twigs.S:241    .text:0000000000000850 CHARMINUS
       forth-twigs.S:249    .text:0000000000000854 is_CHARS
       forth-twigs.S:249    .text:000000000000085c CHARS
       forth-twigs.S:260    .text:000000000000085e is_TIB
       forth-twigs.S:260    .text:0000000000000864 TIB
       forth-twigs.S:268    .text:000000000000086e is_STATE
       forth-twigs.S:268    .text:0000000000000876 STATE
       forth-twigs.S:275    .text:000000000000087c is_BASE
       forth-twigs.S:275    .text:0000000000000884 BASE
       forth-twigs.S:282    .text:000000000000088a is_CSP
       forth-twigs.S:282    .text:0000000000000890 CSP
       forth-twigs.S:289    .text:0000000000000896 is_EPP
       forth-twigs.S:289    .text:000000000000089c EPP
       forth-twigs.S:296    .text:00000000000008a2 is_DPP
       forth-twigs.S:296    .text:00000000000008a8 DPP
       forth-twigs.S:303    .text:00000000000008ae is_HPP
       forth-twigs.S:303    .text:00000000000008b4 HPP
       forth-twigs.S:311    .text:00000000000008ba is_UPP
       forth-twigs.S:311    .text:00000000000008c0 UPP
       forth-twigs.S:319    .text:00000000000008c6 is_BUFF
       forth-twigs.S:319    .text:00000000000008ce BUFF
       forth-twigs.S:327    .text:00000000000008d6 is_PAD
       forth-twigs.S:327    .text:00000000000008dc PAD
       forth-twigs.S:349    .text:00000000000008e4 is_DEPTH
       forth-twigs.S:349    .text:00000000000008ec DEPTH
       forth-twigs.S:356    .text:00000000000008f6 is_RDEPTH
       forth-twigs.S:356    .text:0000000000000900 RDEPTH
       forth-twigs.S:367    .text:000000000000090a is_CURRENT
       forth-twigs.S:367    .text:0000000000000914 CURRENT
       forth-twigs.S:371    .text:000000000000091a is_CONTEXT
       forth-twigs.S:371    .text:0000000000000924 CONTEXT
       forth-twigs.S:375    .text:000000000000092a is_DEFINITIONS
       forth-twigs.S:375    .text:0000000000000938 DEFINITIONS
       forth-twigs.S:379    .text:0000000000000942 is_LATEST
       forth-twigs.S:379    .text:000000000000094c LATEST
       forth-twigs.S:403    .text:0000000000000952 is_UHERE
       forth-twigs.S:403    .text:000000000000095a UHERE
       forth-twigs.S:410    .text:0000000000000960 is_HERE
       forth-twigs.S:410    .text:0000000000000968 HERE
       forth-twigs.S:418    .text:000000000000096e is_ALLOT
       forth-twigs.S:418    .text:0000000000000976 ALLOT
       forth-twigs.S:429    .text:000000000000098e is_ALIGN
       forth-twigs.S:429    .text:0000000000000996 ALIGN
       forth-twigs.S:438    .text:00000000000009ac is_CCOMMA
       forth-twigs.S:438    .text:00000000000009b2 CCOMMA
       forth-twigs.S:445    .text:00000000000009bc is_COMMA
       forth-twigs.S:445    .text:00000000000009c0 COMMA
       forth-twigs.S:454    .text:00000000000009ca is_TOMMA
       forth-twigs.S:454    .text:00000000000009d0 TOMMA
       forth-twigs.S:465    .text:00000000000009dc is_DOVAR
       forth-twigs.S:465    .text:00000000000009e4 DOVAR
       forth-twigs.S:476    .text:00000000000009ee is_DOCON
       forth-twigs.S:476    .text:00000000000009f6 DOCON
       forth-twigs.S:483    .text:00000000000009fe is_LITERAL
       forth-twigs.S:483    .text:0000000000000a08 LITERAL
       forth-twigs.S:490    .text:0000000000000a12 is_KTICK
       forth-twigs.S:490    .text:0000000000000a18 KTICK
       forth-twigs.S:498    .text:0000000000000a20 is_COMP
       forth-twigs.S:498    .text:0000000000000a28 COMP
       forth-twigs.S:505    .text:0000000000000a36 is_EXIT
       forth-twigs.S:505    .text:0000000000000a3e EXIT
       forth-twigs.S:512    .text:0000000000000a44 is_EXEC
       forth-twigs.S:512    .text:0000000000000a4e EXEC
       forth-twigs.S:520    .text:0000000000000a52 is_TAIL
       forth-twigs.S:520    .text:0000000000000a5a TAIL
       forth-twigs.S:536    .text:0000000000000a64 is_MARKTO
       forth-twigs.S:536    .text:0000000000000a6e MARKTO
       forth-twigs.S:545    .text:0000000000000a76 is_TOMARK
       forth-twigs.S:545    .text:0000000000000a80 TOMARK
       forth-twigs.S:552    .text:0000000000000a88 is_BEGIN
       forth-twigs.S:552    .text:0000000000000a90 BEGIN
       forth-twigs.S:559    .text:0000000000000a94 is_AGAIN
       forth-twigs.S:559    .text:0000000000000a9c AGAIN
       forth-twigs.S:566    .text:0000000000000aa4 is_UNTIL
       forth-twigs.S:566    .text:0000000000000aac UNTIL
       forth-twigs.S:573    .text:0000000000000ab4 is_UNLESS
       forth-twigs.S:573    .text:0000000000000abe UNLESS
       forth-twigs.S:580    .text:0000000000000ac4 is_IF
       forth-twigs.S:580    .text:0000000000000aca IF
       forth-twigs.S:587    .text:0000000000000ad2 is_GO
       forth-twigs.S:587    .text:0000000000000ad8 GO
       forth-twigs.S:594    .text:0000000000000ae0 is_THEN
       forth-twigs.S:594    .text:0000000000000ae8 THEN
       forth-twigs.S:601    .text:0000000000000af4 ENDIF
       forth-twigs.S:601    .text:0000000000000aec is_ENDIF
       forth-twigs.S:608    .text:0000000000000af8 is_ELSE
       forth-twigs.S:608    .text:0000000000000b00 ELSE
       forth-twigs.S:615    .text:0000000000000b08 is_WHILE
       forth-twigs.S:615    .text:0000000000000b10 WHILE
       forth-twigs.S:622    .text:0000000000000b16 is_REPEAT
       forth-twigs.S:622    .text:0000000000000b20 REPEAT
       forth-twigs.S:630    .text:0000000000000b26 is_AHEAD
       forth-twigs.S:630    .text:0000000000000b2e AHEAD
       forth-twigs.S:637    .text:0000000000000b32 is_AFT
       forth-twigs.S:637    .text:0000000000000b38 AFT
       forth-twigs.S:644    .text:0000000000000b42 is_HOOK
       forth-twigs.S:644    .text:0000000000000b4a HOOK
       forth-twigs.S:651    .text:0000000000000b50 is_BACK
       forth-twigs.S:651    .text:0000000000000b58 BACK
       forth-twigs.S:658    .text:0000000000000b5e is_FOR
       forth-twigs.S:658    .text:0000000000000b64 FOR
       forth-twigs.S:665    .text:0000000000000b6c is_TXEN
       forth-twigs.S:665    .text:0000000000000b74 TXEN
       forth-twigs.S:675    .text:0000000000000b82 is_NEXT
       forth-twigs.S:675    .text:0000000000000b8a NEXT
       forth-twigs.S:697    .text:0000000000000b92 is_CASE
       forth-twigs.S:697    .text:0000000000000b9a CASE
       forth-twigs.S:704    .text:0000000000000b9e is_OF
       forth-twigs.S:704    .text:0000000000000ba4 OF
       forth-twigs.S:711    .text:0000000000000bb8 is_ENDOF
       forth-twigs.S:711    .text:0000000000000bc0 ENDOF
       forth-twigs.S:718    .text:0000000000000bc6 is_DEFAULT
       forth-twigs.S:718    .text:0000000000000bd0 DEFAULT
       forth-twigs.S:725    .text:0000000000000bde is_ENDCASE
       forth-twigs.S:725    .text:0000000000000be8 ENDCASE
       forth-twigs.S:733    .text:0000000000000bf6 is_DOIT
       forth-twigs.S:733    .text:0000000000000bfe DOIT
       forth-twigs.S:743    .text:0000000000000c0e is_LOOPN
       forth-twigs.S:743    .text:0000000000000c18 LOOPN
       forth-twigs.S:755    .text:0000000000000c38 is_LOOPI
       forth-twigs.S:755    .text:0000000000000c40 LOOPI
       forth-twigs.S:763    .text:0000000000000c46 is_DO
       forth-twigs.S:763    .text:0000000000000c4c DO
       forth-twigs.S:770    .text:0000000000000c54 is_I
       forth-twigs.S:770    .text:0000000000000c58 I
       forth-twigs.S:777    .text:0000000000000c60 is_J
       forth-twigs.S:777    .text:0000000000000c64 J
       forth-twigs.S:785    .text:0000000000000c74 is_LEAVE
       forth-twigs.S:785    .text:0000000000000c7c LEAVE
       forth-twigs.S:806    .text:0000000000000cac UNLOOP
       forth-twigs.S:792    .text:0000000000000c82 is_LOOP
       forth-twigs.S:792    .text:0000000000000c8a LOOP
       forth-twigs.S:799    .text:0000000000000c92 is_PLOOP
       forth-twigs.S:799    .text:0000000000000c9a PLOOP
       forth-twigs.S:806    .text:0000000000000ca2 is_UNLOOP
       forth-twigs.S:814    .text:0000000000000cb6 is_CR
       forth-twigs.S:814    .text:0000000000000cbc CR
       forth-twigs.S:821    .text:0000000000000cc4 is_LF
       forth-twigs.S:821    .text:0000000000000cca LF
       forth-twigs.S:828    .text:0000000000000cd2 is_BL
       forth-twigs.S:828    .text:0000000000000cd8 BL
       forth-twigs.S:835    .text:0000000000000ce0 is_PACE
       forth-twigs.S:835    .text:0000000000000ce8 PACE
       forth-twigs.S:842    .text:0000000000000cf0 is_BELL
       forth-twigs.S:842    .text:0000000000000cf8 BELL
       forth-twigs.S:849    .text:0000000000000d00 is_SPACE
       forth-twigs.S:849    .text:0000000000000d08 SPACE
       forth-twigs.S:856    .text:0000000000000d10 is_SPACES
       forth-twigs.S:856    .text:0000000000000d1a SPACES
       forth-twigs.S:865    .text:0000000000000d2a is_COUNT
       forth-twigs.S:865    .text:0000000000000d32 COUNT
       forth-twigs.S:872    .text:0000000000000d3e is_TYPE
       forth-twigs.S:872    .text:0000000000000d46 TYPE
       forth-twigs.S:882    .text:0000000000000d64 is_UMMINUS
       forth-twigs.S:882    .text:0000000000000d6a UMMINUS
       forth-twigs.S:893    .text:0000000000000d70 is_ULESS
       forth-twigs.S:893    .text:0000000000000d76 ULESS
       forth-twigs.S:901    .text:0000000000000d86 is_UMORE
       forth-twigs.S:901    .text:0000000000000d8c UMORE
       forth-twigs.S:908    .text:0000000000000d9c is_UAT
       forth-twigs.S:908    .text:0000000000000da2 UAT
       forth-twigs.S:916    .text:0000000000000da8 is_UTO
       forth-twigs.S:916    .text:0000000000000dae UTO
       forth-twigs.S:924    .text:0000000000000db4 is_USV
       forth-twigs.S:924    .text:0000000000000dba USV
       forth-twigs.S:932    .text:0000000000000dc2 is_ULD
       forth-twigs.S:932    .text:0000000000000dc8 ULD
       forth-twigs.S:938    .text:0000000000000dd0 is_COLDZERO
       forth-twigs.S:938    .text:0000000000000dd8 COLDZERO
              main.S:173    .text:0000000000002252 ZZZZ
              main.S:178    .text:0000000000002260 free_flash
       forth-twigs.S:955    .text:0000000000000e34 is_EELOAD
       forth-twigs.S:955    .text:0000000000000e3e EELOAD
       forth-twigs.S:969    .text:0000000000000eae is_EESAVE
       forth-twigs.S:969    .text:0000000000000eb8 EESAVE
       forth-twigs.S:983    .text:0000000000000f38 is_COLD
       forth-twigs.S:983    .text:0000000000000f40 COLD
       forth-twigs.S:987    .text:0000000000000f50 _safe
       forth-twigs.S:998    .text:0000000000000f8c WARM
       forth-twigs.S:998    .text:0000000000000f84 is_WARM
       interpreter.S:1438   .text:00000000000021d6 QUIT
       forth-twigs.S:1006   .text:0000000000000f96 is_BYE
       forth-twigs.S:1006   .text:0000000000000f9c BYE
           doubles.S:33     .text:0000000000000fa8 is_FOUR
           doubles.S:33     .text:0000000000000fac FOUR
           doubles.S:40     .text:0000000000000fb2 is_FOURPLUS
           doubles.S:40     .text:0000000000000fb8 FOURPLUS
           doubles.S:47     .text:0000000000000fc0 is_FOURMINUS
           doubles.S:47     .text:0000000000000fc6 FOURMINUS
           doubles.S:55     .text:0000000000000fce is_TWOTO
           doubles.S:55     .text:0000000000000fd4 TWOTO
           doubles.S:61     .text:0000000000000fe0 is_TWOAT
           doubles.S:61     .text:0000000000000fe6 TWOAT
           doubles.S:68     .text:0000000000000ff2 is_TWOTOR
           doubles.S:68     .text:0000000000000ff8 TWOTOR
           doubles.S:75     .text:0000000000001000 is_TWORTO
           doubles.S:75     .text:0000000000001006 TWORTO
           doubles.S:82     .text:000000000000100e is_TWORAT
           doubles.S:82     .text:0000000000001014 TWORAT
           doubles.S:89     .text:0000000000001024 is_TWODROP
           doubles.S:89     .text:000000000000102c TWODROP
           doubles.S:96     .text:0000000000001032 is_TWODUP
           doubles.S:96     .text:000000000000103a TWODUP
           doubles.S:103    .text:0000000000001040 is_TWOSWAP
           doubles.S:103    .text:0000000000001048 TWOSWAP
           doubles.S:110    .text:0000000000001052 is_DPLUS
           doubles.S:110    .text:0000000000001058 DPLUS
           doubles.S:117    .text:000000000000106a is_DMINUS
           doubles.S:117    .text:0000000000001070 DMINUS
           doubles.S:124    .text:0000000000001082 is_DNEG
           doubles.S:124    .text:000000000000108c DNEG
           doubles.S:131    .text:000000000000109c is_DABS
           doubles.S:131    .text:00000000000010a4 DABS
              math.S:36     *ABS*:0000000000001505 djbHASH
              math.S:37     .text:00000000000010b0 is_HASH
              math.S:37     .text:00000000000010b8 HASH
              math.S:89     .text:00000000000010ec is_RANDOM
              math.S:89     .text:00000000000010f6 RANDOM
              math.S:110    .text:000000000000111a _seed
              math.S:106    .text:000000000000110a is_RAND
              math.S:106    .text:0000000000001112 RAND
              math.S:119    .text:0000000000001126 is_ABS
              math.S:119    .text:000000000000112c ABS
              math.S:128    .text:0000000000001138 is_MAX
              math.S:128    .text:000000000000113e MAX
              math.S:137    .text:000000000000114c is_MIN
              math.S:137    .text:0000000000001152 MIN
              math.S:144    .text:0000000000001158 is_WITHIN
              math.S:144    .text:0000000000001162 WITHIN
              math.S:155    .text:0000000000001170 is_UMPASS
              math.S:155    .text:000000000000117a UMPASS
              math.S:165    .text:000000000000118e is_UMDIVMOD
              math.S:165    .text:0000000000001198 UMDIVMOD
              math.S:182    .text:00000000000011e8 is_MDIVMOD
              math.S:182    .text:00000000000011f0 MDIVMOD
              math.S:195    .text:0000000000001226 is_DIVMOD
              math.S:195    .text:000000000000122e DIVMOD
              math.S:202    .text:000000000000123a is_MOD
              math.S:202    .text:0000000000001240 MOD
              math.S:209    .text:0000000000001248 is_DIV
              math.S:209    .text:000000000000124c DIV
              math.S:218    .text:0000000000001256 is_UMSTAR
              math.S:218    .text:000000000000125c UMSTAR
              math.S:230    .text:0000000000001282 is_STAR
              math.S:230    .text:0000000000001286 STAR
              math.S:237    .text:000000000000128e is_MSTAR
              math.S:237    .text:0000000000001294 MSTAR
              math.S:247    .text:00000000000012b2 is_STARDIVMOD
              math.S:247    .text:00000000000012ba STARDIVMOD
              math.S:254    .text:00000000000012c6 is_STARDIV
              math.S:254    .text:00000000000012cc STARDIV
             flush.S:81     .text:00000000000012d6 is_LDFLASH
             flush.S:81     .text:00000000000012e6 LDFLASH
             flush.S:123    .text:000000000000130e is_SVFLASH
             flush.S:123    .text:000000000000131e SVFLASH
             flush.S:203    .text:0000000000001362 _does_spm
          pictures.S:18     .text:0000000000001376 is_DIGIT
          pictures.S:18     .text:000000000000137e DIGIT
          pictures.S:31     .text:00000000000013c4 is_LTSNUM
          pictures.S:31     .text:00000000000013ca LTSNUM
          pictures.S:38     .text:00000000000013d4 is_HOLD
          pictures.S:38     .text:00000000000013dc HOLD
          pictures.S:45     .text:00000000000013ec is_SNUM
          pictures.S:45     .text:00000000000013f0 SNUM
          pictures.S:54     .text:000000000000140a is_SNUMS
          pictures.S:54     .text:0000000000001410 SNUMS
          pictures.S:61     .text:000000000000141e is_SIGN
          pictures.S:61     .text:0000000000001426 SIGN
       interpreter.S:1300   .text:000000000000202c CHAR
          pictures.S:69     .text:0000000000001434 is_SNUMGT
          pictures.S:69     .text:000000000000143a SNUMGT
          pictures.S:79     .text:0000000000001448 is_UDOTP
          pictures.S:79     .text:0000000000001450 UDOTP
          pictures.S:86     .text:000000000000145a is_UDOT
          pictures.S:86     .text:0000000000001460 UDOT
          pictures.S:93     .text:0000000000001468 is_UDOTR
          pictures.S:93     .text:000000000000146e UDOTR
          pictures.S:100    .text:000000000000147c is_DOTP
          pictures.S:100    .text:0000000000001482 DOTP
          pictures.S:107    .text:0000000000001494 is_DOT
          pictures.S:107    .text:0000000000001498 DOT
          pictures.S:114    .text:00000000000014a0 is_QUESTION
          pictures.S:114    .text:00000000000014a4 QUESTION
          pictures.S:121    .text:00000000000014aa is_DOTR
          pictures.S:121    .text:00000000000014b0 DOTR
          pictures.S:128    .text:00000000000014c0 is_UDDOTP
          pictures.S:128    .text:00000000000014c8 UDDOTP
          pictures.S:135    .text:00000000000014d0 is_UDDOT
          pictures.S:135    .text:00000000000014d6 UDDOT
          pictures.S:142    .text:00000000000014de is_UDDOTR
          pictures.S:142    .text:00000000000014e6 UDDOTR
          pictures.S:149    .text:00000000000014f6 is_DDOTP
          pictures.S:149    .text:00000000000014fe DDOTP
          pictures.S:156    .text:000000000000150e is_DDOT
          pictures.S:156    .text:0000000000001514 DDOT
          pictures.S:163    .text:000000000000151c is_DDOTR
          pictures.S:163    .text:0000000000001522 DDOTR
       interpreter.S:46     .text:0000000000001530 is_skipf
       interpreter.S:46     .text:000000000000153a skipf
       interpreter.S:73     .text:000000000000155a is_scanf
       interpreter.S:73     .text:0000000000001564 scanf
       interpreter.S:100    .text:0000000000001584 is_samef
       interpreter.S:100    .text:000000000000158e samef
       interpreter.S:132    .text:00000000000015ba is_copyf
       interpreter.S:132    .text:00000000000015c4 copyf
       interpreter.S:163    .text:00000000000015ec is_refillf
       interpreter.S:163    .text:00000000000015f8 refillf
       interpreter.S:299    .text:0000000000001656 is_wordf
       interpreter.S:299    .text:0000000000001660 wordf
       interpreter.S:326    .text:000000000000167e _wsto
       interpreter.S:314    .text:000000000000166a is_parsef
       interpreter.S:314    .text:0000000000001674 parsef
       interpreter.S:338    .text:000000000000168c _tows
       interpreter.S:354    .text:000000000000169c _wsat
       interpreter.S:375    .text:00000000000016b0 is_digitf
       interpreter.S:375    .text:00000000000016ba digitf
       interpreter.S:418    .text:00000000000016e2 is_numberf
       interpreter.S:418    .text:00000000000016ee numberf
       interpreter.S:548    .text:000000000000176e _bin_base
       interpreter.S:592    .text:0000000000001796 _next_digit
       interpreter.S:558    .text:0000000000001778 _nib_base
       interpreter.S:565    .text:000000000000177c _oct_base
       interpreter.S:572    .text:0000000000001780 _dec_base
       interpreter.S:581    .text:000000000000178a _hex_base
       interpreter.S:648    .text:00000000000017bc is_findf
       interpreter.S:648    .text:00000000000017c6 findf
       interpreter.S:791    .text:0000000000001870 is_NULL
       interpreter.S:791    .text:0000000000001878 NULL
       interpreter.S:811    .text:0000000000001883 is_QERROR
       interpreter.S:811    .text:000000000000188e QERROR
       interpreter.S:1404   .text:0000000000002170 NONEN
       interpreter.S:819    .text:00000000000018a4 is_QCOMP
       interpreter.S:819    .text:00000000000018ac QCOMP
       interpreter.S:823    .text:00000000000018ba is_QEXEC
       interpreter.S:823    .text:00000000000018c2 QEXEC
       interpreter.S:827    .text:00000000000018d2 is_QCSP
       interpreter.S:827    .text:00000000000018da QCSP
       interpreter.S:831    .text:00000000000018ea is_QSTACK
       interpreter.S:831    .text:00000000000018f4 QSTACK
       interpreter.S:837    .text:0000000000001914 is_QPAIR
       interpreter.S:837    .text:000000000000191c QPAIR
       interpreter.S:851    .text:0000000000001926 is_QHOOK
       interpreter.S:851    .text:000000000000192e QHOOK
       interpreter.S:854    .text:0000000000001938 is_QBACK
       interpreter.S:854    .text:0000000000001940 QBACK
       interpreter.S:857    .text:000000000000194c is_QIF
       interpreter.S:857    .text:0000000000001952 QIF
       interpreter.S:860    .text:000000000000195c is_QELSE
       interpreter.S:860    .text:0000000000001964 QELSE
       interpreter.S:863    .text:0000000000001974 is_QENDIF
       interpreter.S:863    .text:000000000000197c QENDIF
       interpreter.S:866    .text:0000000000001988 is_QTHEN
       interpreter.S:866    .text:0000000000001990 QTHEN
       interpreter.S:869    .text:000000000000199c is_QAHEAD
       interpreter.S:869    .text:00000000000019a4 QAHEAD
       interpreter.S:872    .text:00000000000019ae is_QAFT
       interpreter.S:872    .text:00000000000019b4 QAFT
       interpreter.S:875    .text:00000000000019c4 is_QBEGIN
       interpreter.S:875    .text:00000000000019cc QBEGIN
       interpreter.S:878    .text:00000000000019d6 is_QAGAIN
       interpreter.S:878    .text:00000000000019de QAGAIN
       interpreter.S:881    .text:00000000000019ea is_QUNTIL
       interpreter.S:881    .text:00000000000019f2 QUNTIL
       interpreter.S:884    .text:00000000000019fe is_QWHILE
       interpreter.S:884    .text:0000000000001a06 QWHILE
       interpreter.S:887    .text:0000000000001a16 is_QREPEAT
       interpreter.S:887    .text:0000000000001a20 QREPEAT
       interpreter.S:890    .text:0000000000001a2c is_QFOR
       interpreter.S:890    .text:0000000000001a32 QFOR
       interpreter.S:893    .text:0000000000001a3c is_QNEXT
       interpreter.S:893    .text:0000000000001a44 QNEXT
       interpreter.S:896    .text:0000000000001a50 is_QCASE
       interpreter.S:896    .text:0000000000001a58 QCASE
       interpreter.S:899    .text:0000000000001a62 is_QENDCASE
       interpreter.S:899    .text:0000000000001a6c QENDCASE
       interpreter.S:902    .text:0000000000001a78 is_QOF
       interpreter.S:902    .text:0000000000001a7e QOF
       interpreter.S:905    .text:0000000000001a8c is_QENDOF
       interpreter.S:905    .text:0000000000001a94 QENDOF
       interpreter.S:908    .text:0000000000001aa4 is_QDO
       interpreter.S:908    .text:0000000000001aaa QDO
       interpreter.S:911    .text:0000000000001ab4 is_QLOOP
       interpreter.S:911    .text:0000000000001abc QLOOP
       interpreter.S:914    .text:0000000000001ac8 is_QPLOOP
       interpreter.S:914    .text:0000000000001ad0 QPLOOP
       interpreter.S:917    .text:0000000000001adc is_QLEAVE
       interpreter.S:917    .text:0000000000001ae4 QLEAVE
       interpreter.S:920    .text:0000000000001af4 is_QUNLOOP
       interpreter.S:920    .text:0000000000001afe QUNLOOP
       interpreter.S:935    .text:0000000000001b0e is_VALUE
       interpreter.S:935    .text:0000000000001b16 VALUE
       interpreter.S:1315   .text:0000000000002052 CREATE
       interpreter.S:942    .text:0000000000001b1e is_TOVALUE
       interpreter.S:942    .text:0000000000001b24 TOVALUE
       interpreter.S:1291   .text:0000000000002018 FIND
       interpreter.S:950    .text:0000000000001b2c is_DEFER
       interpreter.S:950    .text:0000000000001b34 DEFER
              main.S:172    .text:0000000000002252 UNDEF
       interpreter.S:957    .text:0000000000001b44 is_ISDEFER
       interpreter.S:957    .text:0000000000001b4a ISDEFER
       interpreter.S:964    .text:0000000000001b54 is_SSMOVE
       interpreter.S:964    .text:0000000000001b5e SSMOVE
       interpreter.S:1021   .text:0000000000001cf6 is_MOVE
       interpreter.S:1021   .text:0000000000001cfe MOVE
       interpreter.S:1036   .text:0000000000001d3a is_CMOVE
       interpreter.S:1036   .text:0000000000001d42 CMOVE
       interpreter.S:1045   .text:0000000000001d58 is_FILL
       interpreter.S:1045   .text:0000000000001d60 FILL
       interpreter.S:1058   .text:0000000000001d8a is_RBRAC
       interpreter.S:1058   .text:0000000000001d8e RBRAC
       interpreter.S:1065   .text:0000000000001d96 is_LBRAC
       interpreter.S:1065   .text:0000000000001d9a LBRAC
       interpreter.S:1072   .text:0000000000001da2 is_TOGGLE
       interpreter.S:1072   .text:0000000000001dac TOGGLE
       interpreter.S:1080   .text:0000000000001db8 is_TONFA
       interpreter.S:1080   .text:0000000000001dc0 TONFA
       interpreter.S:1087   .text:0000000000001dc6 is_TOCFA
       interpreter.S:1087   .text:0000000000001dce TOCFA
       interpreter.S:1094   .text:0000000000001dde is_HIDDEN
       interpreter.S:1094   .text:0000000000001de8 HIDDEN
       interpreter.S:1101   .text:0000000000001df2 is_IMMEDIATE
       interpreter.S:1101   .text:0000000000001dfe IMMEDIATE
       interpreter.S:1108   .text:0000000000001e08 is_COMPILE_ONLY
       interpreter.S:1108   .text:0000000000001e18 COMPILE_ONLY
       interpreter.S:1115   .text:0000000000001e22 is_HANDLER
       interpreter.S:1115   .text:0000000000001e2c HANDLER
       interpreter.S:1122   .text:0000000000001e32 is_CATCH
       interpreter.S:1122   .text:0000000000001e3a CATCH
       interpreter.S:1131   .text:0000000000001e5a is_THROW
       interpreter.S:1131   .text:0000000000001e62 THROW
       interpreter.S:1141   .text:0000000000001e82 is_ABORT
       interpreter.S:1141   .text:0000000000001e8a ABORT
       interpreter.S:1148   .text:0000000000001e92 is_ACCEPT
       interpreter.S:1148   .text:0000000000001e9c ACCEPT
       interpreter.S:1155   .text:0000000000001ea0 is_OVERT
       interpreter.S:1155   .text:0000000000001ea8 OVERT
       interpreter.S:1163   .text:0000000000001eac is_COLON
       interpreter.S:1163   .text:0000000000001eb0 COLON
       interpreter.S:1170   .text:0000000000001eb6 is_SEMIS
       interpreter.S:1170   .text:0000000000001eba SEMIS
       interpreter.S:1179   .text:0000000000001ec2 is_SOURCE
       interpreter.S:1179   .text:0000000000001ecc SOURCE
       interpreter.S:1188   .text:0000000000001ee8 is_SOURCEPLUS
       interpreter.S:1188   .text:0000000000001ef2 SOURCEPLUS
       interpreter.S:1195   .text:0000000000001efc is_REFILL
       interpreter.S:1195   .text:0000000000001f06 REFILL
       interpreter.S:1203   .text:0000000000001f12 is_PARSE
       interpreter.S:1203   .text:0000000000001f1a PARSE
       interpreter.S:1213   .text:0000000000001f34 is_BACKSLASH
       interpreter.S:1213   .text:0000000000001f38 BACKSLASH
       interpreter.S:1220   .text:0000000000001f42 is_PAREN
       interpreter.S:1220   .text:0000000000001f46 PAREN
       interpreter.S:1228   .text:0000000000001f52 is_DOTPAREN
       interpreter.S:1228   .text:0000000000001f58 DOTPAREN
       interpreter.S:1236   .text:0000000000001f60 is_SBSQUOTE
       interpreter.S:1236   .text:0000000000001f66 SBSQUOTE
       interpreter.S:1246   .text:0000000000001f82 is_SQUOTE
       interpreter.S:1246   .text:0000000000001f88 SQUOTE
       interpreter.S:1258   .text:0000000000001fa4 is_DOTQUOTE
       interpreter.S:1258   .text:0000000000001faa DOTQUOTE
       interpreter.S:1272   .text:0000000000001fd4 is_PARSEN
       interpreter.S:1272   .text:0000000000001fe2 PARSEN
       interpreter.S:1284   .text:0000000000001ffc is_FINDN
       interpreter.S:1284   .text:0000000000002008 FINDN
       interpreter.S:1291   .text:0000000000002010 is_FIND
       interpreter.S:1300   .text:0000000000002024 is_CHAR
       interpreter.S:1307   .text:0000000000002034 is_NONAME
       interpreter.S:1307   .text:000000000000203e NONAME
       interpreter.S:1315   .text:0000000000002048 is_CREATE
       interpreter.S:1328   .text:0000000000002090 is_DOES
       interpreter.S:1328   .text:0000000000002098 DOES
       interpreter.S:1335   .text:00000000000020a4 is_DOESTO
       interpreter.S:1335   .text:00000000000020ac DOESTO
       interpreter.S:1346   .text:00000000000020b8 is_CONSTANT
       interpreter.S:1346   .text:00000000000020c4 CONSTANT
       interpreter.S:1360   .text:00000000000020e2 is_VARIABLE
       interpreter.S:1360   .text:00000000000020ee VARIABLE
       interpreter.S:1370   .text:000000000000210c is_TICK
       interpreter.S:1370   .text:0000000000002110 TICK
       interpreter.S:1380   .text:0000000000002120 is_POSTPONE
       interpreter.S:1380   .text:000000000000212c POSTPONE
       interpreter.S:1387   .text:0000000000002132 is_COMPILE
       interpreter.S:1387   .text:000000000000213c COMPILE
       interpreter.S:1394   .text:0000000000002144 is_NUMBN
       interpreter.S:1394   .text:000000000000214c NUMBN
       interpreter.S:1404   .text:0000000000002168 is_NONEN
       interpreter.S:1411   .text:0000000000002180 is_EVAL
       interpreter.S:1411   .text:0000000000002188 EVAL
       interpreter.S:1438   .text:00000000000021ce is_QUIT
              main.S:172    .text:000000000000224a is_UNDEF

NO UNDEFINED SYMBOLS
